// Generated from SOQL.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var SOQLListener = require('./SOQLListener').SOQLListener;
var grammarFileName = "SOQL.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u008f\u0299\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0003\u0002\u0003",
    "\u0002\u0003\u0003\u0003\u0003\u0005\u0003\u00b9\n\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u00c0\n",
    "\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0007\u0003",
    "\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0005\n\u00d1\n\n\u0003\u000b\u0005\u000b\u00d4\n\u000b\u0003",
    "\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0005\f\u00e1\n\f\u0003\r\u0003\r\u0003\u000e\u0003",
    "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003",
    "\u0010\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0013\u0003",
    "\u0013\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u00fd",
    "\n\u0017\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0005\u001c\u010a\n\u001c\u0003\u001c\u0005\u001c\u010d\n\u001c\u0003",
    "\u001c\u0005\u001c\u0110\n\u001c\u0003\u001c\u0003\u001c\u0005\u001c",
    "\u0114\n\u001c\u0005\u001c\u0116\n\u001c\u0003\u001c\u0005\u001c\u0119",
    "\n\u001c\u0003\u001c\u0005\u001c\u011c\n\u001c\u0003\u001c\u0005\u001c",
    "\u011f\n\u001c\u0003\u001c\u0005\u001c\u0122\n\u001c\u0003\u001c\u0005",
    "\u001c\u0125\n\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0007\u001d\u012d\n\u001d\f\u001d\u000e\u001d",
    "\u0130\u000b\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0007",
    "\u001e\u0136\n\u001e\f\u001e\u000e\u001e\u0139\u000b\u001e\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003!\u0003",
    "!\u0003!\u0003!\u0003!\u0005!\u0147\n!\u0003\"\u0003\"\u0003\"\u0003",
    "#\u0003#\u0003#\u0003#\u0003$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003",
    "&\u0003&\u0003&\u0003&\u0005&\u015a\n&\u0003&\u0003&\u0005&\u015e\n",
    "&\u0003\'\u0003\'\u0003\'\u0003\'\u0005\'\u0164\n\'\u0003(\u0003(\u0003",
    "(\u0003(\u0005(\u016a\n(\u0003(\u0005(\u016d\n(\u0003(\u0005(\u0170",
    "\n(\u0003(\u0005(\u0173\n(\u0003(\u0005(\u0176\n(\u0003(\u0005(\u0179",
    "\n(\u0003(\u0005(\u017c\n(\u0003(\u0005(\u017f\n(\u0003(\u0003(\u0003",
    ")\u0003)\u0003)\u0003)\u0007)\u0187\n)\f)\u000e)\u018a\u000b)\u0003",
    "*\u0003*\u0003*\u0003*\u0005*\u0190\n*\u0003+\u0003+\u0005+\u0194\n",
    "+\u0003,\u0003,\u0005,\u0198\n,\u0003-\u0003-\u0005-\u019c\n-\u0003",
    ".\u0005.\u019f\n.\u0003.\u0003.\u0003/\u0003/\u0003/\u0005/\u01a6\n",
    "/\u0003/\u0003/\u00030\u00030\u00030\u00070\u01ad\n0\f0\u000e0\u01b0",
    "\u000b0\u00031\u00031\u00031\u00051\u01b5\n1\u00032\u00032\u00032\u0003",
    "2\u00052\u01bb\n2\u00032\u00032\u00033\u00063\u01c0\n3\r3\u000e3\u01c1",
    "\u00034\u00034\u00034\u00034\u00035\u00035\u00035\u00036\u00036\u0003",
    "6\u00037\u00037\u00037\u00077\u01d1\n7\f7\u000e7\u01d4\u000b7\u0003",
    "8\u00058\u01d7\n8\u00038\u00038\u00058\u01db\n8\u00039\u00039\u0003",
    "9\u00069\u01e0\n9\r9\u000e9\u01e1\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u01ee\n:\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0005;\u01f5\n;\u0003<\u0003<\u0003<\u0007<\u01fa\n",
    "<\f<\u000e<\u01fd\u000b<\u0003=\u0005=\u0200\n=\u0003=\u0003=\u0005",
    "=\u0204\n=\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0005?\u020d",
    "\n?\u0003@\u0003@\u0003@\u0003@\u0003A\u0003A\u0003A\u0003A\u0003A\u0005",
    "A\u0218\nA\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0005C\u0220\n",
    "C\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0007E\u0229\nE\f",
    "E\u000eE\u022c\u000bE\u0003F\u0003F\u0003F\u0006F\u0231\nF\rF\u000e",
    "F\u0232\u0003F\u0003F\u0005F\u0237\nF\u0003G\u0003G\u0003G\u0005G\u023c",
    "\nG\u0003H\u0003H\u0003H\u0005H\u0241\nH\u0003I\u0003I\u0003J\u0003",
    "J\u0003J\u0003J\u0003K\u0003K\u0003K\u0007K\u024c\nK\fK\u000eK\u024f",
    "\u000bK\u0003L\u0003L\u0003L\u0003L\u0003M\u0003M\u0003M\u0003M\u0003",
    "M\u0007M\u025a\nM\fM\u000eM\u025d\u000bM\u0003M\u0003M\u0005M\u0261",
    "\nM\u0003N\u0003N\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0007R\u0274\nR\f",
    "R\u000eR\u0277\u000bR\u0003S\u0003S\u0005S\u027b\nS\u0003T\u0003T\u0003",
    "T\u0007T\u0280\nT\fT\u000eT\u0283\u000bT\u0003U\u0003U\u0005U\u0287",
    "\nU\u0003U\u0005U\u028a\nU\u0003V\u0003V\u0003W\u0003W\u0003W\u0003",
    "X\u0003X\u0005X\u0293\nX\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0002\u0002",
    "[\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u0002\u0012\u0003\u0002$4\u0003\u0002Oe\u0003\u0002fz\u0004\u0002",
    "\u008d\u008d\u008f\u008f\u0004\u0002\u000e\u000e\u001e\u001e\u0003\u0002",
    "5A\u0003\u0002BG\u0003\u0002HI\u0003\u0002JN\u0004\u0002\u0006\u0006",
    "\u001b\u001b\u0003\u0002\u0004\u0005\u0003\u0002$\'\u0004\u0002\b\b",
    "\u000b\u000b\u0004\u0002\u000f\u000f\u0015\u0015\u0005\u0002##--22\u0004",
    "\u0002//33\u0002\u029f\u0002\u00b4\u0003\u0002\u0002\u0002\u0004\u00b8",
    "\u0003\u0002\u0002\u0002\u0006\u00bf\u0003\u0002\u0002\u0002\b\u00c1",
    "\u0003\u0002\u0002\u0002\n\u00c3\u0003\u0002\u0002\u0002\f\u00c5\u0003",
    "\u0002\u0002\u0002\u000e\u00c7\u0003\u0002\u0002\u0002\u0010\u00c9\u0003",
    "\u0002\u0002\u0002\u0012\u00d0\u0003\u0002\u0002\u0002\u0014\u00d3\u0003",
    "\u0002\u0002\u0002\u0016\u00e0\u0003\u0002\u0002\u0002\u0018\u00e2\u0003",
    "\u0002\u0002\u0002\u001a\u00e4\u0003\u0002\u0002\u0002\u001c\u00e6\u0003",
    "\u0002\u0002\u0002\u001e\u00ea\u0003\u0002\u0002\u0002 \u00ec\u0003",
    "\u0002\u0002\u0002\"\u00ee\u0003\u0002\u0002\u0002$\u00f0\u0003\u0002",
    "\u0002\u0002&\u00f2\u0003\u0002\u0002\u0002(\u00f4\u0003\u0002\u0002",
    "\u0002*\u00f6\u0003\u0002\u0002\u0002,\u00fc\u0003\u0002\u0002\u0002",
    ".\u00fe\u0003\u0002\u0002\u00020\u0100\u0003\u0002\u0002\u00022\u0102",
    "\u0003\u0002\u0002\u00024\u0104\u0003\u0002\u0002\u00026\u0106\u0003",
    "\u0002\u0002\u00028\u0128\u0003\u0002\u0002\u0002:\u0131\u0003\u0002",
    "\u0002\u0002<\u013a\u0003\u0002\u0002\u0002>\u013e\u0003\u0002\u0002",
    "\u0002@\u0141\u0003\u0002\u0002\u0002B\u0148\u0003\u0002\u0002\u0002",
    "D\u014b\u0003\u0002\u0002\u0002F\u014f\u0003\u0002\u0002\u0002H\u0152",
    "\u0003\u0002\u0002\u0002J\u0155\u0003\u0002\u0002\u0002L\u015f\u0003",
    "\u0002\u0002\u0002N\u0165\u0003\u0002\u0002\u0002P\u0182\u0003\u0002",
    "\u0002\u0002R\u018f\u0003\u0002\u0002\u0002T\u0193\u0003\u0002\u0002",
    "\u0002V\u0195\u0003\u0002\u0002\u0002X\u0199\u0003\u0002\u0002\u0002",
    "Z\u019e\u0003\u0002\u0002\u0002\\\u01a2\u0003\u0002\u0002\u0002^\u01a9",
    "\u0003\u0002\u0002\u0002`\u01b4\u0003\u0002\u0002\u0002b\u01b6\u0003",
    "\u0002\u0002\u0002d\u01bf\u0003\u0002\u0002\u0002f\u01c3\u0003\u0002",
    "\u0002\u0002h\u01c7\u0003\u0002\u0002\u0002j\u01ca\u0003\u0002\u0002",
    "\u0002l\u01cd\u0003\u0002\u0002\u0002n\u01d6\u0003\u0002\u0002\u0002",
    "p\u01df\u0003\u0002\u0002\u0002r\u01ed\u0003\u0002\u0002\u0002t\u01f4",
    "\u0003\u0002\u0002\u0002v\u01f6\u0003\u0002\u0002\u0002x\u01ff\u0003",
    "\u0002\u0002\u0002z\u0205\u0003\u0002\u0002\u0002|\u020c\u0003\u0002",
    "\u0002\u0002~\u020e\u0003\u0002\u0002\u0002\u0080\u0212\u0003\u0002",
    "\u0002\u0002\u0082\u0219\u0003\u0002\u0002\u0002\u0084\u021f\u0003\u0002",
    "\u0002\u0002\u0086\u0221\u0003\u0002\u0002\u0002\u0088\u0225\u0003\u0002",
    "\u0002\u0002\u008a\u0230\u0003\u0002\u0002\u0002\u008c\u0238\u0003\u0002",
    "\u0002\u0002\u008e\u023d\u0003\u0002\u0002\u0002\u0090\u0242\u0003\u0002",
    "\u0002\u0002\u0092\u0244\u0003\u0002\u0002\u0002\u0094\u0248\u0003\u0002",
    "\u0002\u0002\u0096\u0250\u0003\u0002\u0002\u0002\u0098\u0260\u0003\u0002",
    "\u0002\u0002\u009a\u0262\u0003\u0002\u0002\u0002\u009c\u0264\u0003\u0002",
    "\u0002\u0002\u009e\u0266\u0003\u0002\u0002\u0002\u00a0\u026b\u0003\u0002",
    "\u0002\u0002\u00a2\u0270\u0003\u0002\u0002\u0002\u00a4\u027a\u0003\u0002",
    "\u0002\u0002\u00a6\u027c\u0003\u0002\u0002\u0002\u00a8\u0284\u0003\u0002",
    "\u0002\u0002\u00aa\u028b\u0003\u0002\u0002\u0002\u00ac\u028d\u0003\u0002",
    "\u0002\u0002\u00ae\u0292\u0003\u0002\u0002\u0002\u00b0\u0294\u0003\u0002",
    "\u0002\u0002\u00b2\u0296\u0003\u0002\u0002\u0002\u00b4\u00b5\t\u0002",
    "\u0002\u0002\u00b5\u0003\u0003\u0002\u0002\u0002\u00b6\u00b9\u0005\u0002",
    "\u0002\u0002\u00b7\u00b9\u0007\u0011\u0002\u0002\u00b8\u00b6\u0003\u0002",
    "\u0002\u0002\u00b8\u00b7\u0003\u0002\u0002\u0002\u00b9\u0005\u0003\u0002",
    "\u0002\u0002\u00ba\u00c0\u0007\u008a\u0002\u0002\u00bb\u00c0\u0005\u0004",
    "\u0003\u0002\u00bc\u00c0\u0005\u0018\r\u0002\u00bd\u00c0\u0005\u001a",
    "\u000e\u0002\u00be\u00c0\u0005,\u0017\u0002\u00bf\u00ba\u0003\u0002",
    "\u0002\u0002\u00bf\u00bb\u0003\u0002\u0002\u0002\u00bf\u00bc\u0003\u0002",
    "\u0002\u0002\u00bf\u00bd\u0003\u0002\u0002\u0002\u00bf\u00be\u0003\u0002",
    "\u0002\u0002\u00c0\u0007\u0003\u0002\u0002\u0002\u00c1\u00c2\u0005\u0006",
    "\u0004\u0002\u00c2\t\u0003\u0002\u0002\u0002\u00c3\u00c4\u0005\u0006",
    "\u0004\u0002\u00c4\u000b\u0003\u0002\u0002\u0002\u00c5\u00c6\u0005\u0006",
    "\u0004\u0002\u00c6\r\u0003\u0002\u0002\u0002\u00c7\u00c8\u0005\u0006",
    "\u0004\u0002\u00c8\u000f\u0003\u0002\u0002\u0002\u00c9\u00ca\u0005\u0006",
    "\u0004\u0002\u00ca\u0011\u0003\u0002\u0002\u0002\u00cb\u00d1\u0007\u008a",
    "\u0002\u0002\u00cc\u00d1\u0005\u0002\u0002\u0002\u00cd\u00d1\u0005\u0018",
    "\r\u0002\u00ce\u00d1\u0005\u001a\u000e\u0002\u00cf\u00d1\u0005,\u0017",
    "\u0002\u00d0\u00cb\u0003\u0002\u0002\u0002\u00d0\u00cc\u0003\u0002\u0002",
    "\u0002\u00d0\u00cd\u0003\u0002\u0002\u0002\u00d0\u00ce\u0003\u0002\u0002",
    "\u0002\u00d0\u00cf\u0003\u0002\u0002\u0002\u00d1\u0013\u0003\u0002\u0002",
    "\u0002\u00d2\u00d4\u0007\u0007\u0002\u0002\u00d3\u00d2\u0003\u0002\u0002",
    "\u0002\u00d3\u00d4\u0003\u0002\u0002\u0002\u00d4\u00d5\u0003\u0002\u0002",
    "\u0002\u00d5\u00d6\u0005\u0012\n\u0002\u00d6\u0015\u0003\u0002\u0002",
    "\u0002\u00d7\u00e1\u0005\u0018\r\u0002\u00d8\u00e1\u0005\u001c\u000f",
    "\u0002\u00d9\u00e1\u0005\u001e\u0010\u0002\u00da\u00e1\u0005 \u0011",
    "\u0002\u00db\u00e1\u0005\"\u0012\u0002\u00dc\u00e1\u0005$\u0013\u0002",
    "\u00dd\u00e1\u0005&\u0014\u0002\u00de\u00e1\u0005(\u0015\u0002\u00df",
    "\u00e1\u0005*\u0016\u0002\u00e0\u00d7\u0003\u0002\u0002\u0002\u00e0",
    "\u00d8\u0003\u0002\u0002\u0002\u00e0\u00d9\u0003\u0002\u0002\u0002\u00e0",
    "\u00da\u0003\u0002\u0002\u0002\u00e0\u00db\u0003\u0002\u0002\u0002\u00e0",
    "\u00dc\u0003\u0002\u0002\u0002\u00e0\u00dd\u0003\u0002\u0002\u0002\u00e0",
    "\u00de\u0003\u0002\u0002\u0002\u00e0\u00df\u0003\u0002\u0002\u0002\u00e1",
    "\u0017\u0003\u0002\u0002\u0002\u00e2\u00e3\t\u0003\u0002\u0002\u00e3",
    "\u0019\u0003\u0002\u0002\u0002\u00e4\u00e5\t\u0004\u0002\u0002\u00e5",
    "\u001b\u0003\u0002\u0002\u0002\u00e6\u00e7\u0005\u001a\u000e\u0002\u00e7",
    "\u00e8\u0007\u0082\u0002\u0002\u00e8\u00e9\u0007\u008d\u0002\u0002\u00e9",
    "\u001d\u0003\u0002\u0002\u0002\u00ea\u00eb\u0007\u008c\u0002\u0002\u00eb",
    "\u001f\u0003\u0002\u0002\u0002\u00ec\u00ed\u0007\u008b\u0002\u0002\u00ed",
    "!\u0003\u0002\u0002\u0002\u00ee\u00ef\t\u0005\u0002\u0002\u00ef#\u0003",
    "\u0002\u0002\u0002\u00f0\u00f1\u0007\u008e\u0002\u0002\u00f1%\u0003",
    "\u0002\u0002\u0002\u00f2\u00f3\u0007\u0004\u0002\u0002\u00f3\'\u0003",
    "\u0002\u0002\u0002\u00f4\u00f5\t\u0006\u0002\u0002\u00f5)\u0003\u0002",
    "\u0002\u0002\u00f6\u00f7\u0007\u0019\u0002\u0002\u00f7+\u0003\u0002",
    "\u0002\u0002\u00f8\u00fd\u0005.\u0018\u0002\u00f9\u00fd\u00050\u0019",
    "\u0002\u00fa\u00fd\u00052\u001a\u0002\u00fb\u00fd\u00054\u001b\u0002",
    "\u00fc\u00f8\u0003\u0002\u0002\u0002\u00fc\u00f9\u0003\u0002\u0002\u0002",
    "\u00fc\u00fa\u0003\u0002\u0002\u0002\u00fc\u00fb\u0003\u0002\u0002\u0002",
    "\u00fd-\u0003\u0002\u0002\u0002\u00fe\u00ff\t\u0007\u0002\u0002\u00ff",
    "/\u0003\u0002\u0002\u0002\u0100\u0101\t\b\u0002\u0002\u01011\u0003\u0002",
    "\u0002\u0002\u0102\u0103\t\t\u0002\u0002\u01033\u0003\u0002\u0002\u0002",
    "\u0104\u0105\t\n\u0002\u0002\u01055\u0003\u0002\u0002\u0002\u0106\u0107",
    "\u00058\u001d\u0002\u0107\u0109\u0005:\u001e\u0002\u0108\u010a\u0005",
    "<\u001f\u0002\u0109\u0108\u0003\u0002\u0002\u0002\u0109\u010a\u0003",
    "\u0002\u0002\u0002\u010a\u010c\u0003\u0002\u0002\u0002\u010b\u010d\u0005",
    "> \u0002\u010c\u010b\u0003\u0002\u0002\u0002\u010c\u010d\u0003\u0002",
    "\u0002\u0002\u010d\u010f\u0003\u0002\u0002\u0002\u010e\u0110\u0005\u008e",
    "H\u0002\u010f\u010e\u0003\u0002\u0002\u0002\u010f\u0110\u0003\u0002",
    "\u0002\u0002\u0110\u0115\u0003\u0002\u0002\u0002\u0111\u0113\u0005@",
    "!\u0002\u0112\u0114\u0005B\"\u0002\u0113\u0112\u0003\u0002\u0002\u0002",
    "\u0113\u0114\u0003\u0002\u0002\u0002\u0114\u0116\u0003\u0002\u0002\u0002",
    "\u0115\u0111\u0003\u0002\u0002\u0002\u0115\u0116\u0003\u0002\u0002\u0002",
    "\u0116\u0118\u0003\u0002\u0002\u0002\u0117\u0119\u0005D#\u0002\u0118",
    "\u0117\u0003\u0002\u0002\u0002\u0118\u0119\u0003\u0002\u0002\u0002\u0119",
    "\u011b\u0003\u0002\u0002\u0002\u011a\u011c\u0005F$\u0002\u011b\u011a",
    "\u0003\u0002\u0002\u0002\u011b\u011c\u0003\u0002\u0002\u0002\u011c\u011e",
    "\u0003\u0002\u0002\u0002\u011d\u011f\u0005H%\u0002\u011e\u011d\u0003",
    "\u0002\u0002\u0002\u011e\u011f\u0003\u0002\u0002\u0002\u011f\u0121\u0003",
    "\u0002\u0002\u0002\u0120\u0122\u0005J&\u0002\u0121\u0120\u0003\u0002",
    "\u0002\u0002\u0121\u0122\u0003\u0002\u0002\u0002\u0122\u0124\u0003\u0002",
    "\u0002\u0002\u0123\u0125\u0005L\'\u0002\u0124\u0123\u0003\u0002\u0002",
    "\u0002\u0124\u0125\u0003\u0002\u0002\u0002\u0125\u0126\u0003\u0002\u0002",
    "\u0002\u0126\u0127\u0007\u0002\u0002\u0003\u01277\u0003\u0002\u0002",
    "\u0002\u0128\u0129\u0007\u001d\u0002\u0002\u0129\u012e\u0005R*\u0002",
    "\u012a\u012b\u0007\u0084\u0002\u0002\u012b\u012d\u0005R*\u0002\u012c",
    "\u012a\u0003\u0002\u0002\u0002\u012d\u0130\u0003\u0002\u0002\u0002\u012e",
    "\u012c\u0003\u0002\u0002\u0002\u012e\u012f\u0003\u0002\u0002\u0002\u012f",
    "9\u0003\u0002\u0002\u0002\u0130\u012e\u0003\u0002\u0002\u0002\u0131",
    "\u0132\u0007\u0010\u0002\u0002\u0132\u0137\u0005n8\u0002\u0133\u0134",
    "\u0007\u0084\u0002\u0002\u0134\u0136\u0005n8\u0002\u0135\u0133\u0003",
    "\u0002\u0002\u0002\u0136\u0139\u0003\u0002\u0002\u0002\u0137\u0135\u0003",
    "\u0002\u0002\u0002\u0137\u0138\u0003\u0002\u0002\u0002\u0138;\u0003",
    "\u0002\u0002\u0002\u0139\u0137\u0003\u0002\u0002\u0002\u013a\u013b\u0007",
    "\u001f\u0002\u0002\u013b\u013c\u0007.\u0002\u0002\u013c\u013d\u0005",
    "\f\u0007\u0002\u013d=\u0003\u0002\u0002\u0002\u013e\u013f\u0007 \u0002",
    "\u0002\u013f\u0140\u0005v<\u0002\u0140?\u0003\u0002\u0002\u0002\u0141",
    "\u0142\u0007\u0011\u0002\u0002\u0142\u0146\u0007\t\u0002\u0002\u0143",
    "\u0147\u0005\u009eP\u0002\u0144\u0147\u0005\u00a0Q\u0002\u0145\u0147",
    "\u0005\u009cO\u0002\u0146\u0143\u0003\u0002\u0002\u0002\u0146\u0144",
    "\u0003\u0002\u0002\u0002\u0146\u0145\u0003\u0002\u0002\u0002\u0147A",
    "\u0003\u0002\u0002\u0002\u0148\u0149\u0007\u0012\u0002\u0002\u0149\u014a",
    "\u0005v<\u0002\u014aC\u0003\u0002\u0002\u0002\u014b\u014c\u0007,\u0002",
    "\u0002\u014c\u014d\u0007\t\u0002\u0002\u014d\u014e\u0005\u00a6T\u0002",
    "\u014eE\u0003\u0002\u0002\u0002\u014f\u0150\u0007\u0017\u0002\u0002",
    "\u0150\u0151\u0007\u008d\u0002\u0002\u0151G\u0003\u0002\u0002\u0002",
    "\u0152\u0153\u0007+\u0002\u0002\u0153\u0154\u0007\u008d\u0002\u0002",
    "\u0154I\u0003\u0002\u0002\u0002\u0155\u0156\u0007\"\u0002\u0002\u0156",
    "\u0159\u0005\u00b0Y\u0002\u0157\u0158\u0007\u0084\u0002\u0002\u0158",
    "\u015a\u0005\u00b0Y\u0002\u0159\u0157\u0003\u0002\u0002\u0002\u0159",
    "\u015a\u0003\u0002\u0002\u0002\u015a\u015d\u0003\u0002\u0002\u0002\u015b",
    "\u015c\u0007\u0084\u0002\u0002\u015c\u015e\u0005\u00b0Y\u0002\u015d",
    "\u015b\u0003\u0002\u0002\u0002\u015d\u015e\u0003\u0002\u0002\u0002\u015e",
    "K\u0003\u0002\u0002\u0002\u015f\u0160\u0007#\u0002\u0002\u0160\u0163",
    "\u0005\u00b2Z\u0002\u0161\u0162\u0007\u0084\u0002\u0002\u0162\u0164",
    "\u0005\u00b2Z\u0002\u0163\u0161\u0003\u0002\u0002\u0002\u0163\u0164",
    "\u0003\u0002\u0002\u0002\u0164M\u0003\u0002\u0002\u0002\u0165\u0166",
    "\u0007\u0087\u0002\u0002\u0166\u0167\u0005P)\u0002\u0167\u0169\u0005",
    ":\u001e\u0002\u0168\u016a\u0005<\u001f\u0002\u0169\u0168\u0003\u0002",
    "\u0002\u0002\u0169\u016a\u0003\u0002\u0002\u0002\u016a\u016c\u0003\u0002",
    "\u0002\u0002\u016b\u016d\u0005> \u0002\u016c\u016b\u0003\u0002\u0002",
    "\u0002\u016c\u016d\u0003\u0002\u0002\u0002\u016d\u016f\u0003\u0002\u0002",
    "\u0002\u016e\u0170\u0005\u008eH\u0002\u016f\u016e\u0003\u0002\u0002",
    "\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0172\u0003\u0002\u0002",
    "\u0002\u0171\u0173\u0005D#\u0002\u0172\u0171\u0003\u0002\u0002\u0002",
    "\u0172\u0173\u0003\u0002\u0002\u0002\u0173\u0175\u0003\u0002\u0002\u0002",
    "\u0174\u0176\u0005F$\u0002\u0175\u0174\u0003\u0002\u0002\u0002\u0175",
    "\u0176\u0003\u0002\u0002\u0002\u0176\u0178\u0003\u0002\u0002\u0002\u0177",
    "\u0179\u0005H%\u0002\u0178\u0177\u0003\u0002\u0002\u0002\u0178\u0179",
    "\u0003\u0002\u0002\u0002\u0179\u017b\u0003\u0002\u0002\u0002\u017a\u017c",
    "\u0005J&\u0002\u017b\u017a\u0003\u0002\u0002\u0002\u017b\u017c\u0003",
    "\u0002\u0002\u0002\u017c\u017e\u0003\u0002\u0002\u0002\u017d\u017f\u0005",
    "L\'\u0002\u017e\u017d\u0003\u0002\u0002\u0002\u017e\u017f\u0003\u0002",
    "\u0002\u0002\u017f\u0180\u0003\u0002\u0002\u0002\u0180\u0181\u0007\u0086",
    "\u0002\u0002\u0181O\u0003\u0002\u0002\u0002\u0182\u0183\u0007\u001d",
    "\u0002\u0002\u0183\u0188\u0005T+\u0002\u0184\u0185\u0007\u0084\u0002",
    "\u0002\u0185\u0187\u0005T+\u0002\u0186\u0184\u0003\u0002\u0002\u0002",
    "\u0187\u018a\u0003\u0002\u0002\u0002\u0188\u0186\u0003\u0002\u0002\u0002",
    "\u0188\u0189\u0003\u0002\u0002\u0002\u0189Q\u0003\u0002\u0002\u0002",
    "\u018a\u0188\u0003\u0002\u0002\u0002\u018b\u0190\u0005V,\u0002\u018c",
    "\u0190\u0005X-\u0002\u018d\u0190\u0005N(\u0002\u018e\u0190\u0005b2\u0002",
    "\u018f\u018b\u0003\u0002\u0002\u0002\u018f\u018c\u0003\u0002\u0002\u0002",
    "\u018f\u018d\u0003\u0002\u0002\u0002\u018f\u018e\u0003\u0002\u0002\u0002",
    "\u0190S\u0003\u0002\u0002\u0002\u0191\u0194\u0005V,\u0002\u0192\u0194",
    "\u0005X-\u0002\u0193\u0191\u0003\u0002\u0002\u0002\u0193\u0192\u0003",
    "\u0002\u0002\u0002\u0194U\u0003\u0002\u0002\u0002\u0195\u0197\u0005",
    "Z.\u0002\u0196\u0198\u0005\u0014\u000b\u0002\u0197\u0196\u0003\u0002",
    "\u0002\u0002\u0197\u0198\u0003\u0002\u0002\u0002\u0198W\u0003\u0002",
    "\u0002\u0002\u0199\u019b\u0005\\/\u0002\u019a\u019c\u0005\u0014\u000b",
    "\u0002\u019b\u019a\u0003\u0002\u0002\u0002\u019b\u019c\u0003\u0002\u0002",
    "\u0002\u019cY\u0003\u0002\u0002\u0002\u019d\u019f\u0005p9\u0002\u019e",
    "\u019d\u0003\u0002\u0002\u0002\u019e\u019f\u0003\u0002\u0002\u0002\u019f",
    "\u01a0\u0003\u0002\u0002\u0002\u01a0\u01a1\u0005\n\u0006\u0002\u01a1",
    "[\u0003\u0002\u0002\u0002\u01a2\u01a3\u0005,\u0017\u0002\u01a3\u01a5",
    "\u0007\u0087\u0002\u0002\u01a4\u01a6\u0005^0\u0002\u01a5\u01a4\u0003",
    "\u0002\u0002\u0002\u01a5\u01a6\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003",
    "\u0002\u0002\u0002\u01a7\u01a8\u0007\u0086\u0002\u0002\u01a8]\u0003",
    "\u0002\u0002\u0002\u01a9\u01ae\u0005`1\u0002\u01aa\u01ab\u0007\u0084",
    "\u0002\u0002\u01ab\u01ad\u0005`1\u0002\u01ac\u01aa\u0003\u0002\u0002",
    "\u0002\u01ad\u01b0\u0003\u0002\u0002\u0002\u01ae\u01ac\u0003\u0002\u0002",
    "\u0002\u01ae\u01af\u0003\u0002\u0002\u0002\u01af_\u0003\u0002\u0002",
    "\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002\u01b1\u01b5\u0005Z.\u0002",
    "\u01b2\u01b5\u0005\u0016\f\u0002\u01b3\u01b5\u0005\\/\u0002\u01b4\u01b1",
    "\u0003\u0002\u0002\u0002\u01b4\u01b2\u0003\u0002\u0002\u0002\u01b4\u01b3",
    "\u0003\u0002\u0002\u0002\u01b5a\u0003\u0002\u0002\u0002\u01b6\u01b7",
    "\u00071\u0002\u0002\u01b7\u01b8\u0005Z.\u0002\u01b8\u01ba\u0005d3\u0002",
    "\u01b9\u01bb\u0005j6\u0002\u01ba\u01b9\u0003\u0002\u0002\u0002\u01ba",
    "\u01bb\u0003\u0002\u0002\u0002\u01bb\u01bc\u0003\u0002\u0002\u0002\u01bc",
    "\u01bd\u0007*\u0002\u0002\u01bdc\u0003\u0002\u0002\u0002\u01be\u01c0",
    "\u0005f4\u0002\u01bf\u01be\u0003\u0002\u0002\u0002\u01c0\u01c1\u0003",
    "\u0002\u0002\u0002\u01c1\u01bf\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003",
    "\u0002\u0002\u0002\u01c2e\u0003\u0002\u0002\u0002\u01c3\u01c4\u0007",
    "4\u0002\u0002\u01c4\u01c5\u0005\b\u0005\u0002\u01c5\u01c6\u0005h5\u0002",
    "\u01c6g\u0003\u0002\u0002\u0002\u01c7\u01c8\u00070\u0002\u0002\u01c8",
    "\u01c9\u0005l7\u0002\u01c9i\u0003\u0002\u0002\u0002\u01ca\u01cb\u0007",
    "\f\u0002\u0002\u01cb\u01cc\u0005l7\u0002\u01cck\u0003\u0002\u0002\u0002",
    "\u01cd\u01d2\u0005Z.\u0002\u01ce\u01cf\u0007\u0084\u0002\u0002\u01cf",
    "\u01d1\u0005Z.\u0002\u01d0\u01ce\u0003\u0002\u0002\u0002\u01d1\u01d4",
    "\u0003\u0002\u0002\u0002\u01d2\u01d0\u0003\u0002\u0002\u0002\u01d2\u01d3",
    "\u0003\u0002\u0002\u0002\u01d3m\u0003\u0002\u0002\u0002\u01d4\u01d2",
    "\u0003\u0002\u0002\u0002\u01d5\u01d7\u0005p9\u0002\u01d6\u01d5\u0003",
    "\u0002\u0002\u0002\u01d6\u01d7\u0003\u0002\u0002\u0002\u01d7\u01d8\u0003",
    "\u0002\u0002\u0002\u01d8\u01da\u0005\b\u0005\u0002\u01d9\u01db\u0005",
    "\u0014\u000b\u0002\u01da\u01d9\u0003\u0002\u0002\u0002\u01da\u01db\u0003",
    "\u0002\u0002\u0002\u01dbo\u0003\u0002\u0002\u0002\u01dc\u01dd\u0005",
    "\b\u0005\u0002\u01dd\u01de\u0007\u0081\u0002\u0002\u01de\u01e0\u0003",
    "\u0002\u0002\u0002\u01df\u01dc\u0003\u0002\u0002\u0002\u01e0\u01e1\u0003",
    "\u0002\u0002\u0002\u01e1\u01df\u0003\u0002\u0002\u0002\u01e1\u01e2\u0003",
    "\u0002\u0002\u0002\u01e2q\u0003\u0002\u0002\u0002\u01e3\u01ee\u0007",
    "{\u0002\u0002\u01e4\u01ee\u0007|\u0002\u0002\u01e5\u01ee\u0007}\u0002",
    "\u0002\u01e6\u01ee\u0007~\u0002\u0002\u01e7\u01ee\u0007\u007f\u0002",
    "\u0002\u01e8\u01ee\u0007\u0080\u0002\u0002\u01e9\u01ea\u0007\u007f\u0002",
    "\u0002\u01ea\u01ee\u0007{\u0002\u0002\u01eb\u01ec\u0007\u0080\u0002",
    "\u0002\u01ec\u01ee\u0007{\u0002\u0002\u01ed\u01e3\u0003\u0002\u0002",
    "\u0002\u01ed\u01e4\u0003\u0002\u0002\u0002\u01ed\u01e5\u0003\u0002\u0002",
    "\u0002\u01ed\u01e6\u0003\u0002\u0002\u0002\u01ed\u01e7\u0003\u0002\u0002",
    "\u0002\u01ed\u01e8\u0003\u0002\u0002\u0002\u01ed\u01e9\u0003\u0002\u0002",
    "\u0002\u01ed\u01eb\u0003\u0002\u0002\u0002\u01ees\u0003\u0002\u0002",
    "\u0002\u01ef\u01f5\u0007\u0013\u0002\u0002\u01f0\u01f1\u0007\u0018\u0002",
    "\u0002\u01f1\u01f5\u0007\u0013\u0002\u0002\u01f2\u01f5\u0007\u0014\u0002",
    "\u0002\u01f3\u01f5\u0007\r\u0002\u0002\u01f4\u01ef\u0003\u0002\u0002",
    "\u0002\u01f4\u01f0\u0003\u0002\u0002\u0002\u01f4\u01f2\u0003\u0002\u0002",
    "\u0002\u01f4\u01f3\u0003\u0002\u0002\u0002\u01f5u\u0003\u0002\u0002",
    "\u0002\u01f6\u01fb\u0005x=\u0002\u01f7\u01f8\t\u000b\u0002\u0002\u01f8",
    "\u01fa\u0005x=\u0002\u01f9\u01f7\u0003\u0002\u0002\u0002\u01fa\u01fd",
    "\u0003\u0002\u0002\u0002\u01fb\u01f9\u0003\u0002\u0002\u0002\u01fb\u01fc",
    "\u0003\u0002\u0002\u0002\u01fcw\u0003\u0002\u0002\u0002\u01fd\u01fb",
    "\u0003\u0002\u0002\u0002\u01fe\u0200\u0007\u0018\u0002\u0002\u01ff\u01fe",
    "\u0003\u0002\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u0203",
    "\u0003\u0002\u0002\u0002\u0201\u0204\u0005|?\u0002\u0202\u0204\u0005",
    "z>\u0002\u0203\u0201\u0003\u0002\u0002\u0002\u0203\u0202\u0003\u0002",
    "\u0002\u0002\u0204y\u0003\u0002\u0002\u0002\u0205\u0206\u0007\u0087",
    "\u0002\u0002\u0206\u0207\u0005v<\u0002\u0207\u0208\u0007\u0086\u0002",
    "\u0002\u0208{\u0003\u0002\u0002\u0002\u0209\u020d\u0005~@\u0002\u020a",
    "\u020d\u0005\u0080A\u0002\u020b\u020d\u0005\u0082B\u0002\u020c\u0209",
    "\u0003\u0002\u0002\u0002\u020c\u020a\u0003\u0002\u0002\u0002\u020c\u020b",
    "\u0003\u0002\u0002\u0002\u020d}\u0003\u0002\u0002\u0002\u020e\u020f",
    "\u0005\u0084C\u0002\u020f\u0210\u0005r:\u0002\u0210\u0211\u0005\u0016",
    "\f\u0002\u0211\u007f\u0003\u0002\u0002\u0002\u0212\u0213\u0005\u0084",
    "C\u0002\u0213\u0217\u0005t;\u0002\u0214\u0218\u0005N(\u0002\u0215\u0218",
    "\u0005\u0086D\u0002\u0216\u0218\u0005\u008cG\u0002\u0217\u0214\u0003",
    "\u0002\u0002\u0002\u0217\u0215\u0003\u0002\u0002\u0002\u0217\u0216\u0003",
    "\u0002\u0002\u0002\u0218\u0081\u0003\u0002\u0002\u0002\u0219\u021a\u0005",
    "\u0084C\u0002\u021a\u021b\u0007\u0016\u0002\u0002\u021b\u021c\t\f\u0002",
    "\u0002\u021c\u0083\u0003\u0002\u0002\u0002\u021d\u0220\u0005Z.\u0002",
    "\u021e\u0220\u0005\\/\u0002\u021f\u021d\u0003\u0002\u0002\u0002\u021f",
    "\u021e\u0003\u0002\u0002\u0002\u0220\u0085\u0003\u0002\u0002\u0002\u0221",
    "\u0222\u0007\u0087\u0002\u0002\u0222\u0223\u0005\u0088E\u0002\u0223",
    "\u0224\u0007\u0086\u0002\u0002\u0224\u0087\u0003\u0002\u0002\u0002\u0225",
    "\u022a\u0005\u0016\f\u0002\u0226\u0227\u0007\u0084\u0002\u0002\u0227",
    "\u0229\u0005\u0016\f\u0002\u0228\u0226\u0003\u0002\u0002\u0002\u0229",
    "\u022c\u0003\u0002\u0002\u0002\u022a\u0228\u0003\u0002\u0002\u0002\u022a",
    "\u022b\u0003\u0002\u0002\u0002\u022b\u0089\u0003\u0002\u0002\u0002\u022c",
    "\u022a\u0003\u0002\u0002\u0002\u022d\u022e\u0005\u0006\u0004\u0002\u022e",
    "\u022f\u0007\u0081\u0002\u0002\u022f\u0231\u0003\u0002\u0002\u0002\u0230",
    "\u022d\u0003\u0002\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232",
    "\u0230\u0003\u0002\u0002\u0002\u0232\u0233\u0003\u0002\u0002\u0002\u0233",
    "\u0236\u0003\u0002\u0002\u0002\u0234\u0237\u0005\u0006\u0004\u0002\u0235",
    "\u0237\u0005,\u0017\u0002\u0236\u0234\u0003\u0002\u0002\u0002\u0236",
    "\u0235\u0003\u0002\u0002\u0002\u0237\u008b\u0003\u0002\u0002\u0002\u0238",
    "\u023b\u0007\u0082\u0002\u0002\u0239\u023c\u0005\u0006\u0004\u0002\u023a",
    "\u023c\u0005\u008aF\u0002\u023b\u0239\u0003\u0002\u0002\u0002\u023b",
    "\u023a\u0003\u0002\u0002\u0002\u023c\u008d\u0003\u0002\u0002\u0002\u023d",
    "\u0240\u0007!\u0002\u0002\u023e\u0241\u0005\u0090I\u0002\u023f\u0241",
    "\u0005\u0092J\u0002\u0240\u023e\u0003\u0002\u0002\u0002\u0240\u023f",
    "\u0003\u0002\u0002\u0002\u0241\u008f\u0003\u0002\u0002\u0002\u0242\u0243",
    "\u0005~@\u0002\u0243\u0091\u0003\u0002\u0002\u0002\u0244\u0245\u0007",
    ")\u0002\u0002\u0245\u0246\u0007(\u0002\u0002\u0246\u0247\u0005\u0094",
    "K\u0002\u0247\u0093\u0003\u0002\u0002\u0002\u0248\u024d\u0005\u0096",
    "L\u0002\u0249\u024a\u0007\u0006\u0002\u0002\u024a\u024c\u0005\u0096",
    "L\u0002\u024b\u0249\u0003\u0002\u0002\u0002\u024c\u024f\u0003\u0002",
    "\u0002\u0002\u024d\u024b\u0003\u0002\u0002\u0002\u024d\u024e\u0003\u0002",
    "\u0002\u0002\u024e\u0095\u0003\u0002\u0002\u0002\u024f\u024d\u0003\u0002",
    "\u0002\u0002\u0250\u0251\u0005\u000e\b\u0002\u0251\u0252\u0005\u009a",
    "N\u0002\u0252\u0253\u0005\u0098M\u0002\u0253\u0097\u0003\u0002\u0002",
    "\u0002\u0254\u0261\u0005\u0010\t\u0002\u0255\u0256\u0007\u0087\u0002",
    "\u0002\u0256\u025b\u0005\u0010\t\u0002\u0257\u0258\u0007\u0084\u0002",
    "\u0002\u0258\u025a\u0005\u0010\t\u0002\u0259\u0257\u0003\u0002\u0002",
    "\u0002\u025a\u025d\u0003\u0002\u0002\u0002\u025b\u0259\u0003\u0002\u0002",
    "\u0002\u025b\u025c\u0003\u0002\u0002\u0002\u025c\u025e\u0003\u0002\u0002",
    "\u0002\u025d\u025b\u0003\u0002\u0002\u0002\u025e\u025f\u0007\u0086\u0002",
    "\u0002\u025f\u0261\u0003\u0002\u0002\u0002\u0260\u0254\u0003\u0002\u0002",
    "\u0002\u0260\u0255\u0003\u0002\u0002\u0002\u0261\u0099\u0003\u0002\u0002",
    "\u0002\u0262\u0263\t\r\u0002\u0002\u0263\u009b\u0003\u0002\u0002\u0002",
    "\u0264\u0265\u0005\u00a2R\u0002\u0265\u009d\u0003\u0002\u0002\u0002",
    "\u0266\u0267\u0007\u001c\u0002\u0002\u0267\u0268\u0007\u0087\u0002\u0002",
    "\u0268\u0269\u0005\u00a2R\u0002\u0269\u026a\u0007\u0086\u0002\u0002",
    "\u026a\u009f\u0003\u0002\u0002\u0002\u026b\u026c\u0007\n\u0002\u0002",
    "\u026c\u026d\u0007\u0087\u0002\u0002\u026d\u026e\u0005\u00a2R\u0002",
    "\u026e\u026f\u0007\u0086\u0002\u0002\u026f\u00a1\u0003\u0002\u0002\u0002",
    "\u0270\u0275\u0005\u00a4S\u0002\u0271\u0272\u0007\u0084\u0002\u0002",
    "\u0272\u0274\u0005\u00a4S\u0002\u0273\u0271\u0003\u0002\u0002\u0002",
    "\u0274\u0277\u0003\u0002\u0002\u0002\u0275\u0273\u0003\u0002\u0002\u0002",
    "\u0275\u0276\u0003\u0002\u0002\u0002\u0276\u00a3\u0003\u0002\u0002\u0002",
    "\u0277\u0275\u0003\u0002\u0002\u0002\u0278\u027b\u0005Z.\u0002\u0279",
    "\u027b\u0005\\/\u0002\u027a\u0278\u0003\u0002\u0002\u0002\u027a\u0279",
    "\u0003\u0002\u0002\u0002\u027b\u00a5\u0003\u0002\u0002\u0002\u027c\u0281",
    "\u0005\u00a8U\u0002\u027d\u027e\u0007\u0084\u0002\u0002\u027e\u0280",
    "\u0005\u00a8U\u0002\u027f\u027d\u0003\u0002\u0002\u0002\u0280\u0283",
    "\u0003\u0002\u0002\u0002\u0281\u027f\u0003\u0002\u0002\u0002\u0281\u0282",
    "\u0003\u0002\u0002\u0002\u0282\u00a7\u0003\u0002\u0002\u0002\u0283\u0281",
    "\u0003\u0002\u0002\u0002\u0284\u0286\u0005\u00aeX\u0002\u0285\u0287",
    "\u0005\u00aaV\u0002\u0286\u0285\u0003\u0002\u0002\u0002\u0286\u0287",
    "\u0003\u0002\u0002\u0002\u0287\u0289\u0003\u0002\u0002\u0002\u0288\u028a",
    "\u0005\u00acW\u0002\u0289\u0288\u0003\u0002\u0002\u0002\u0289\u028a",
    "\u0003\u0002\u0002\u0002\u028a\u00a9\u0003\u0002\u0002\u0002\u028b\u028c",
    "\t\u000e\u0002\u0002\u028c\u00ab\u0003\u0002\u0002\u0002\u028d\u028e",
    "\u0007\u001a\u0002\u0002\u028e\u028f\t\u000f\u0002\u0002\u028f\u00ad",
    "\u0003\u0002\u0002\u0002\u0290\u0293\u0005Z.\u0002\u0291\u0293\u0005",
    "\\/\u0002\u0292\u0290\u0003\u0002\u0002\u0002\u0292\u0291\u0003\u0002",
    "\u0002\u0002\u0293\u00af\u0003\u0002\u0002\u0002\u0294\u0295\t\u0010",
    "\u0002\u0002\u0295\u00b1\u0003\u0002\u0002\u0002\u0296\u0297\t\u0011",
    "\u0002\u0002\u0297\u00b3\u0003\u0002\u0002\u0002E\u00b8\u00bf\u00d0",
    "\u00d3\u00e0\u00fc\u0109\u010c\u010f\u0113\u0115\u0118\u011b\u011e\u0121",
    "\u0124\u012e\u0137\u0146\u0159\u015d\u0163\u0169\u016c\u016f\u0172\u0175",
    "\u0178\u017b\u017e\u0188\u018f\u0193\u0197\u019b\u019e\u01a5\u01ae\u01b4",
    "\u01ba\u01c1\u01d2\u01d6\u01da\u01e1\u01ed\u01f4\u01fb\u01ff\u0203\u020c",
    "\u0217\u021f\u022a\u0232\u0236\u023b\u0240\u024d\u025b\u0260\u0275\u027a",
    "\u0281\u0286\u0289\u0292"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, "'='", null, "'<='", "'>='", 
                     "'>'", "'<'", "'.'", "':'", "';'", "','", "'*'", "')'", 
                     "'('", "'+'", "'-'" ];

var symbolicNames = [ null, "WHITE_SPACE", "STRING_VALUE", "LIKE_STRING_VALUE", 
                      "AND", "AS", "ASC", "BY", "CUBE", "DESC", "ELSE", 
                      "EXCLUDES", "FALSE", "FIRST", "FROM", "GROUP", "HAVING", 
                      "IN", "INCLUDES", "LAST", "LIKE", "LIMIT", "NOT", 
                      "NULL", "NULLS", "OR", "ROLLUP", "SELECT", "TRUE", 
                      "USING", "WHERE", "WITH", "FOR", "UPDATE", "ABOVE", 
                      "ABOVE_OR_BELOW", "AT", "BELOW", "CATEGORY", "DATA", 
                      "END", "OFFSET", "ORDER", "REFERENCE", "SCOPE", "TRACKING", 
                      "THEN", "TYPEOF", "VIEW", "VIEWSTAT", "WHEN", "CALENDAR_MONTH", 
                      "CALENDAR_QUARTER", "CALENDAR_YEAR", "DAY_IN_MONTH", 
                      "DAY_IN_WEEK", "DAY_IN_YEAR", "DAY_ONLY", "FISCAL_MONTH", 
                      "FISCAL_QUARTER", "FISCAL_YEAR", "HOUR_IN_DAY", "WEEK_IN_MONTH", 
                      "WEEK_IN_YEAR", "AVG", "COUNT", "COUNT_DISTINCT", 
                      "MIN", "MAX", "SUM", "DISTANCE", "GEOLOCATION", "FORMAT", 
                      "TOLABEL", "CONVERT_TIME_ZONE", "CONVERT_CURRENCY", 
                      "GROUPING", "YESTERDAY", "TODAY", "TOMORROW", "LAST_WEEK", 
                      "THIS_WEEK", "NEXT_WEEK", "LAST_MONTH", "THIS_MONTH", 
                      "NEXT_MONTH", "LAST_90_DAYS", "NEXT_90_DAYS", "THIS_QUARTER", 
                      "LAST_QUARTER", "NEXT_QUARTER", "THIS_YEAR", "LAST_YEAR", 
                      "NEXT_YEAR", "THIS_FISCAL_QUARTER", "LAST_FISCAL_QUARTER", 
                      "NEXT_FISCAL_QUARTER", "THIS_FISCAL_YEAR", "LAST_FISCAL_YEAR", 
                      "NEXT_FISCAL_YEAR", "NEXT_N_DAYS", "LAST_N_DAYS", 
                      "N_DAYS_AGO", "NEXT_N_WEEKS", "LAST_N_WEEKS", "N_WEEKS_AGO", 
                      "NEXT_N_MONTHS", "LAST_N_MONTHS", "N_MONTHS_AGO", 
                      "NEXT_N_QUARTERS", "LAST_N_QUARTERS", "N_QUARTERS_AGO", 
                      "NEXT_N_YEARS", "LAST_N_YEARS", "N_YEARS_AGO", "NEXT_N_FISCAL_QUARTERS", 
                      "LAST_N_FISCAL_QUARTERS", "N_FISCAL_QUARTERS_AGO", 
                      "NEXT_N_FISCAL_YEARS", "LAST_N_FISCAL_YEARS", "N_FISCAL_YEARS_AGO", 
                      "EQ", "NOT_EQ", "LET", "GET", "GTH", "LTH", "DOT", 
                      "COLON", "SEMICOLON", "COMMA", "ASTERISK", "RPAREN", 
                      "LPAREN", "PLUS", "MINUS", "ID", "DATE", "DATETIME", 
                      "UNSIGNED_INTEGER", "REAL_NUMBER", "SIGNED_INTEGER" ];

var ruleNames =  [ "keywords_alias_allowed", "keywords_name_allowed", "name", 
                   "object_name", "field_name", "filter_scope_name", "data_category_group_name", 
                   "data_category_name", "alias_name", "alias", "literal", 
                   "date_formula_literal", "date_formula_n_literal_name", 
                   "date_formula_n_literal", "datetime_literal", "date_literal", 
                   "integer_literal", "real_literal", "string_literal", 
                   "boolean_literal", "null_literal", "function_name", "function_date", 
                   "function_aggregate", "function_location", "function_other", 
                   "soql_query", "select_clause", "from_clause", "using_clause", 
                   "where_clause", "groupby_clause", "having_clause", "orderby_clause", 
                   "limit_clause", "offset_clause", "for_clause", "update_clause", 
                   "soql_subquery", "subquery_select_clause", "select_spec", 
                   "subquery_select_spec", "field_spec", "function_call_spec", 
                   "field", "function_call", "function_parameter_list", 
                   "function_parameter", "typeof_spec", "typeof_when_then_clause_list", 
                   "typeof_when_then_clause", "typeof_then_clause", "typeof_else_clause", 
                   "field_list", "object_spec", "object_prefix", "comparison_operator", 
                   "set_operator", "condition", "condition1", "parenthesis", 
                   "simple_condition", "field_based_condition", "set_based_condition", 
                   "like_based_condition", "condition_field", "set_values", 
                   "set_value_list", "set_values_complex", "set_values_variable", 
                   "with_clause", "with_plain_clause", "with_data_category_clause", 
                   "data_category_spec_list", "data_category_spec", "data_category_parameter_list", 
                   "data_category_selector", "group_by_plain_clause", "group_by_rollup_clause", 
                   "group_by_cube_clause", "group_by_list", "group_by_spec", 
                   "order_by_list", "order_by_spec", "order_by_direction_clause", 
                   "order_by_nulls_clause", "order_by_field", "for_value", 
                   "update_value" ];

function SOQLParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SOQLParser.prototype = Object.create(antlr4.Parser.prototype);
SOQLParser.prototype.constructor = SOQLParser;

Object.defineProperty(SOQLParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SOQLParser.EOF = antlr4.Token.EOF;
SOQLParser.WHITE_SPACE = 1;
SOQLParser.STRING_VALUE = 2;
SOQLParser.LIKE_STRING_VALUE = 3;
SOQLParser.AND = 4;
SOQLParser.AS = 5;
SOQLParser.ASC = 6;
SOQLParser.BY = 7;
SOQLParser.CUBE = 8;
SOQLParser.DESC = 9;
SOQLParser.ELSE = 10;
SOQLParser.EXCLUDES = 11;
SOQLParser.FALSE = 12;
SOQLParser.FIRST = 13;
SOQLParser.FROM = 14;
SOQLParser.GROUP = 15;
SOQLParser.HAVING = 16;
SOQLParser.IN = 17;
SOQLParser.INCLUDES = 18;
SOQLParser.LAST = 19;
SOQLParser.LIKE = 20;
SOQLParser.LIMIT = 21;
SOQLParser.NOT = 22;
SOQLParser.NULL = 23;
SOQLParser.NULLS = 24;
SOQLParser.OR = 25;
SOQLParser.ROLLUP = 26;
SOQLParser.SELECT = 27;
SOQLParser.TRUE = 28;
SOQLParser.USING = 29;
SOQLParser.WHERE = 30;
SOQLParser.WITH = 31;
SOQLParser.FOR = 32;
SOQLParser.UPDATE = 33;
SOQLParser.ABOVE = 34;
SOQLParser.ABOVE_OR_BELOW = 35;
SOQLParser.AT = 36;
SOQLParser.BELOW = 37;
SOQLParser.CATEGORY = 38;
SOQLParser.DATA = 39;
SOQLParser.END = 40;
SOQLParser.OFFSET = 41;
SOQLParser.ORDER = 42;
SOQLParser.REFERENCE = 43;
SOQLParser.SCOPE = 44;
SOQLParser.TRACKING = 45;
SOQLParser.THEN = 46;
SOQLParser.TYPEOF = 47;
SOQLParser.VIEW = 48;
SOQLParser.VIEWSTAT = 49;
SOQLParser.WHEN = 50;
SOQLParser.CALENDAR_MONTH = 51;
SOQLParser.CALENDAR_QUARTER = 52;
SOQLParser.CALENDAR_YEAR = 53;
SOQLParser.DAY_IN_MONTH = 54;
SOQLParser.DAY_IN_WEEK = 55;
SOQLParser.DAY_IN_YEAR = 56;
SOQLParser.DAY_ONLY = 57;
SOQLParser.FISCAL_MONTH = 58;
SOQLParser.FISCAL_QUARTER = 59;
SOQLParser.FISCAL_YEAR = 60;
SOQLParser.HOUR_IN_DAY = 61;
SOQLParser.WEEK_IN_MONTH = 62;
SOQLParser.WEEK_IN_YEAR = 63;
SOQLParser.AVG = 64;
SOQLParser.COUNT = 65;
SOQLParser.COUNT_DISTINCT = 66;
SOQLParser.MIN = 67;
SOQLParser.MAX = 68;
SOQLParser.SUM = 69;
SOQLParser.DISTANCE = 70;
SOQLParser.GEOLOCATION = 71;
SOQLParser.FORMAT = 72;
SOQLParser.TOLABEL = 73;
SOQLParser.CONVERT_TIME_ZONE = 74;
SOQLParser.CONVERT_CURRENCY = 75;
SOQLParser.GROUPING = 76;
SOQLParser.YESTERDAY = 77;
SOQLParser.TODAY = 78;
SOQLParser.TOMORROW = 79;
SOQLParser.LAST_WEEK = 80;
SOQLParser.THIS_WEEK = 81;
SOQLParser.NEXT_WEEK = 82;
SOQLParser.LAST_MONTH = 83;
SOQLParser.THIS_MONTH = 84;
SOQLParser.NEXT_MONTH = 85;
SOQLParser.LAST_90_DAYS = 86;
SOQLParser.NEXT_90_DAYS = 87;
SOQLParser.THIS_QUARTER = 88;
SOQLParser.LAST_QUARTER = 89;
SOQLParser.NEXT_QUARTER = 90;
SOQLParser.THIS_YEAR = 91;
SOQLParser.LAST_YEAR = 92;
SOQLParser.NEXT_YEAR = 93;
SOQLParser.THIS_FISCAL_QUARTER = 94;
SOQLParser.LAST_FISCAL_QUARTER = 95;
SOQLParser.NEXT_FISCAL_QUARTER = 96;
SOQLParser.THIS_FISCAL_YEAR = 97;
SOQLParser.LAST_FISCAL_YEAR = 98;
SOQLParser.NEXT_FISCAL_YEAR = 99;
SOQLParser.NEXT_N_DAYS = 100;
SOQLParser.LAST_N_DAYS = 101;
SOQLParser.N_DAYS_AGO = 102;
SOQLParser.NEXT_N_WEEKS = 103;
SOQLParser.LAST_N_WEEKS = 104;
SOQLParser.N_WEEKS_AGO = 105;
SOQLParser.NEXT_N_MONTHS = 106;
SOQLParser.LAST_N_MONTHS = 107;
SOQLParser.N_MONTHS_AGO = 108;
SOQLParser.NEXT_N_QUARTERS = 109;
SOQLParser.LAST_N_QUARTERS = 110;
SOQLParser.N_QUARTERS_AGO = 111;
SOQLParser.NEXT_N_YEARS = 112;
SOQLParser.LAST_N_YEARS = 113;
SOQLParser.N_YEARS_AGO = 114;
SOQLParser.NEXT_N_FISCAL_QUARTERS = 115;
SOQLParser.LAST_N_FISCAL_QUARTERS = 116;
SOQLParser.N_FISCAL_QUARTERS_AGO = 117;
SOQLParser.NEXT_N_FISCAL_YEARS = 118;
SOQLParser.LAST_N_FISCAL_YEARS = 119;
SOQLParser.N_FISCAL_YEARS_AGO = 120;
SOQLParser.EQ = 121;
SOQLParser.NOT_EQ = 122;
SOQLParser.LET = 123;
SOQLParser.GET = 124;
SOQLParser.GTH = 125;
SOQLParser.LTH = 126;
SOQLParser.DOT = 127;
SOQLParser.COLON = 128;
SOQLParser.SEMICOLON = 129;
SOQLParser.COMMA = 130;
SOQLParser.ASTERISK = 131;
SOQLParser.RPAREN = 132;
SOQLParser.LPAREN = 133;
SOQLParser.PLUS = 134;
SOQLParser.MINUS = 135;
SOQLParser.ID = 136;
SOQLParser.DATE = 137;
SOQLParser.DATETIME = 138;
SOQLParser.UNSIGNED_INTEGER = 139;
SOQLParser.REAL_NUMBER = 140;
SOQLParser.SIGNED_INTEGER = 141;

SOQLParser.RULE_keywords_alias_allowed = 0;
SOQLParser.RULE_keywords_name_allowed = 1;
SOQLParser.RULE_name = 2;
SOQLParser.RULE_object_name = 3;
SOQLParser.RULE_field_name = 4;
SOQLParser.RULE_filter_scope_name = 5;
SOQLParser.RULE_data_category_group_name = 6;
SOQLParser.RULE_data_category_name = 7;
SOQLParser.RULE_alias_name = 8;
SOQLParser.RULE_alias = 9;
SOQLParser.RULE_literal = 10;
SOQLParser.RULE_date_formula_literal = 11;
SOQLParser.RULE_date_formula_n_literal_name = 12;
SOQLParser.RULE_date_formula_n_literal = 13;
SOQLParser.RULE_datetime_literal = 14;
SOQLParser.RULE_date_literal = 15;
SOQLParser.RULE_integer_literal = 16;
SOQLParser.RULE_real_literal = 17;
SOQLParser.RULE_string_literal = 18;
SOQLParser.RULE_boolean_literal = 19;
SOQLParser.RULE_null_literal = 20;
SOQLParser.RULE_function_name = 21;
SOQLParser.RULE_function_date = 22;
SOQLParser.RULE_function_aggregate = 23;
SOQLParser.RULE_function_location = 24;
SOQLParser.RULE_function_other = 25;
SOQLParser.RULE_soql_query = 26;
SOQLParser.RULE_select_clause = 27;
SOQLParser.RULE_from_clause = 28;
SOQLParser.RULE_using_clause = 29;
SOQLParser.RULE_where_clause = 30;
SOQLParser.RULE_groupby_clause = 31;
SOQLParser.RULE_having_clause = 32;
SOQLParser.RULE_orderby_clause = 33;
SOQLParser.RULE_limit_clause = 34;
SOQLParser.RULE_offset_clause = 35;
SOQLParser.RULE_for_clause = 36;
SOQLParser.RULE_update_clause = 37;
SOQLParser.RULE_soql_subquery = 38;
SOQLParser.RULE_subquery_select_clause = 39;
SOQLParser.RULE_select_spec = 40;
SOQLParser.RULE_subquery_select_spec = 41;
SOQLParser.RULE_field_spec = 42;
SOQLParser.RULE_function_call_spec = 43;
SOQLParser.RULE_field = 44;
SOQLParser.RULE_function_call = 45;
SOQLParser.RULE_function_parameter_list = 46;
SOQLParser.RULE_function_parameter = 47;
SOQLParser.RULE_typeof_spec = 48;
SOQLParser.RULE_typeof_when_then_clause_list = 49;
SOQLParser.RULE_typeof_when_then_clause = 50;
SOQLParser.RULE_typeof_then_clause = 51;
SOQLParser.RULE_typeof_else_clause = 52;
SOQLParser.RULE_field_list = 53;
SOQLParser.RULE_object_spec = 54;
SOQLParser.RULE_object_prefix = 55;
SOQLParser.RULE_comparison_operator = 56;
SOQLParser.RULE_set_operator = 57;
SOQLParser.RULE_condition = 58;
SOQLParser.RULE_condition1 = 59;
SOQLParser.RULE_parenthesis = 60;
SOQLParser.RULE_simple_condition = 61;
SOQLParser.RULE_field_based_condition = 62;
SOQLParser.RULE_set_based_condition = 63;
SOQLParser.RULE_like_based_condition = 64;
SOQLParser.RULE_condition_field = 65;
SOQLParser.RULE_set_values = 66;
SOQLParser.RULE_set_value_list = 67;
SOQLParser.RULE_set_values_complex = 68;
SOQLParser.RULE_set_values_variable = 69;
SOQLParser.RULE_with_clause = 70;
SOQLParser.RULE_with_plain_clause = 71;
SOQLParser.RULE_with_data_category_clause = 72;
SOQLParser.RULE_data_category_spec_list = 73;
SOQLParser.RULE_data_category_spec = 74;
SOQLParser.RULE_data_category_parameter_list = 75;
SOQLParser.RULE_data_category_selector = 76;
SOQLParser.RULE_group_by_plain_clause = 77;
SOQLParser.RULE_group_by_rollup_clause = 78;
SOQLParser.RULE_group_by_cube_clause = 79;
SOQLParser.RULE_group_by_list = 80;
SOQLParser.RULE_group_by_spec = 81;
SOQLParser.RULE_order_by_list = 82;
SOQLParser.RULE_order_by_spec = 83;
SOQLParser.RULE_order_by_direction_clause = 84;
SOQLParser.RULE_order_by_nulls_clause = 85;
SOQLParser.RULE_order_by_field = 86;
SOQLParser.RULE_for_value = 87;
SOQLParser.RULE_update_value = 88;

function Keywords_alias_allowedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_keywords_alias_allowed;
    return this;
}

Keywords_alias_allowedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Keywords_alias_allowedContext.prototype.constructor = Keywords_alias_allowedContext;

Keywords_alias_allowedContext.prototype.ABOVE = function() {
    return this.getToken(SOQLParser.ABOVE, 0);
};

Keywords_alias_allowedContext.prototype.ABOVE_OR_BELOW = function() {
    return this.getToken(SOQLParser.ABOVE_OR_BELOW, 0);
};

Keywords_alias_allowedContext.prototype.AT = function() {
    return this.getToken(SOQLParser.AT, 0);
};

Keywords_alias_allowedContext.prototype.BELOW = function() {
    return this.getToken(SOQLParser.BELOW, 0);
};

Keywords_alias_allowedContext.prototype.CATEGORY = function() {
    return this.getToken(SOQLParser.CATEGORY, 0);
};

Keywords_alias_allowedContext.prototype.DATA = function() {
    return this.getToken(SOQLParser.DATA, 0);
};

Keywords_alias_allowedContext.prototype.END = function() {
    return this.getToken(SOQLParser.END, 0);
};

Keywords_alias_allowedContext.prototype.OFFSET = function() {
    return this.getToken(SOQLParser.OFFSET, 0);
};

Keywords_alias_allowedContext.prototype.ORDER = function() {
    return this.getToken(SOQLParser.ORDER, 0);
};

Keywords_alias_allowedContext.prototype.REFERENCE = function() {
    return this.getToken(SOQLParser.REFERENCE, 0);
};

Keywords_alias_allowedContext.prototype.SCOPE = function() {
    return this.getToken(SOQLParser.SCOPE, 0);
};

Keywords_alias_allowedContext.prototype.TRACKING = function() {
    return this.getToken(SOQLParser.TRACKING, 0);
};

Keywords_alias_allowedContext.prototype.THEN = function() {
    return this.getToken(SOQLParser.THEN, 0);
};

Keywords_alias_allowedContext.prototype.TYPEOF = function() {
    return this.getToken(SOQLParser.TYPEOF, 0);
};

Keywords_alias_allowedContext.prototype.VIEW = function() {
    return this.getToken(SOQLParser.VIEW, 0);
};

Keywords_alias_allowedContext.prototype.VIEWSTAT = function() {
    return this.getToken(SOQLParser.VIEWSTAT, 0);
};

Keywords_alias_allowedContext.prototype.WHEN = function() {
    return this.getToken(SOQLParser.WHEN, 0);
};

Keywords_alias_allowedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterKeywords_alias_allowed(this);
	}
};

Keywords_alias_allowedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitKeywords_alias_allowed(this);
	}
};




SOQLParser.Keywords_alias_allowedContext = Keywords_alias_allowedContext;

SOQLParser.prototype.keywords_alias_allowed = function() {

    var localctx = new Keywords_alias_allowedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SOQLParser.RULE_keywords_alias_allowed);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 178;
        _la = this._input.LA(1);
        if(!(((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (SOQLParser.ABOVE - 34)) | (1 << (SOQLParser.ABOVE_OR_BELOW - 34)) | (1 << (SOQLParser.AT - 34)) | (1 << (SOQLParser.BELOW - 34)) | (1 << (SOQLParser.CATEGORY - 34)) | (1 << (SOQLParser.DATA - 34)) | (1 << (SOQLParser.END - 34)) | (1 << (SOQLParser.OFFSET - 34)) | (1 << (SOQLParser.ORDER - 34)) | (1 << (SOQLParser.REFERENCE - 34)) | (1 << (SOQLParser.SCOPE - 34)) | (1 << (SOQLParser.TRACKING - 34)) | (1 << (SOQLParser.THEN - 34)) | (1 << (SOQLParser.TYPEOF - 34)) | (1 << (SOQLParser.VIEW - 34)) | (1 << (SOQLParser.VIEWSTAT - 34)) | (1 << (SOQLParser.WHEN - 34)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Keywords_name_allowedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_keywords_name_allowed;
    return this;
}

Keywords_name_allowedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Keywords_name_allowedContext.prototype.constructor = Keywords_name_allowedContext;

Keywords_name_allowedContext.prototype.keywords_alias_allowed = function() {
    return this.getTypedRuleContext(Keywords_alias_allowedContext,0);
};

Keywords_name_allowedContext.prototype.GROUP = function() {
    return this.getToken(SOQLParser.GROUP, 0);
};

Keywords_name_allowedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterKeywords_name_allowed(this);
	}
};

Keywords_name_allowedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitKeywords_name_allowed(this);
	}
};




SOQLParser.Keywords_name_allowedContext = Keywords_name_allowedContext;

SOQLParser.prototype.keywords_name_allowed = function() {

    var localctx = new Keywords_name_allowedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SOQLParser.RULE_keywords_name_allowed);
    try {
        this.state = 182;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SOQLParser.ABOVE:
        case SOQLParser.ABOVE_OR_BELOW:
        case SOQLParser.AT:
        case SOQLParser.BELOW:
        case SOQLParser.CATEGORY:
        case SOQLParser.DATA:
        case SOQLParser.END:
        case SOQLParser.OFFSET:
        case SOQLParser.ORDER:
        case SOQLParser.REFERENCE:
        case SOQLParser.SCOPE:
        case SOQLParser.TRACKING:
        case SOQLParser.THEN:
        case SOQLParser.TYPEOF:
        case SOQLParser.VIEW:
        case SOQLParser.VIEWSTAT:
        case SOQLParser.WHEN:
            this.enterOuterAlt(localctx, 1);
            this.state = 180;
            this.keywords_alias_allowed();
            break;
        case SOQLParser.GROUP:
            this.enterOuterAlt(localctx, 2);
            this.state = 181;
            this.match(SOQLParser.GROUP);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_name;
    return this;
}

NameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameContext.prototype.constructor = NameContext;

NameContext.prototype.ID = function() {
    return this.getToken(SOQLParser.ID, 0);
};

NameContext.prototype.keywords_name_allowed = function() {
    return this.getTypedRuleContext(Keywords_name_allowedContext,0);
};

NameContext.prototype.date_formula_literal = function() {
    return this.getTypedRuleContext(Date_formula_literalContext,0);
};

NameContext.prototype.date_formula_n_literal_name = function() {
    return this.getTypedRuleContext(Date_formula_n_literal_nameContext,0);
};

NameContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

NameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterName(this);
	}
};

NameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitName(this);
	}
};




SOQLParser.NameContext = NameContext;

SOQLParser.prototype.name = function() {

    var localctx = new NameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SOQLParser.RULE_name);
    try {
        this.state = 189;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SOQLParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 184;
            this.match(SOQLParser.ID);
            break;
        case SOQLParser.GROUP:
        case SOQLParser.ABOVE:
        case SOQLParser.ABOVE_OR_BELOW:
        case SOQLParser.AT:
        case SOQLParser.BELOW:
        case SOQLParser.CATEGORY:
        case SOQLParser.DATA:
        case SOQLParser.END:
        case SOQLParser.OFFSET:
        case SOQLParser.ORDER:
        case SOQLParser.REFERENCE:
        case SOQLParser.SCOPE:
        case SOQLParser.TRACKING:
        case SOQLParser.THEN:
        case SOQLParser.TYPEOF:
        case SOQLParser.VIEW:
        case SOQLParser.VIEWSTAT:
        case SOQLParser.WHEN:
            this.enterOuterAlt(localctx, 2);
            this.state = 185;
            this.keywords_name_allowed();
            break;
        case SOQLParser.YESTERDAY:
        case SOQLParser.TODAY:
        case SOQLParser.TOMORROW:
        case SOQLParser.LAST_WEEK:
        case SOQLParser.THIS_WEEK:
        case SOQLParser.NEXT_WEEK:
        case SOQLParser.LAST_MONTH:
        case SOQLParser.THIS_MONTH:
        case SOQLParser.NEXT_MONTH:
        case SOQLParser.LAST_90_DAYS:
        case SOQLParser.NEXT_90_DAYS:
        case SOQLParser.THIS_QUARTER:
        case SOQLParser.LAST_QUARTER:
        case SOQLParser.NEXT_QUARTER:
        case SOQLParser.THIS_YEAR:
        case SOQLParser.LAST_YEAR:
        case SOQLParser.NEXT_YEAR:
        case SOQLParser.THIS_FISCAL_QUARTER:
        case SOQLParser.LAST_FISCAL_QUARTER:
        case SOQLParser.NEXT_FISCAL_QUARTER:
        case SOQLParser.THIS_FISCAL_YEAR:
        case SOQLParser.LAST_FISCAL_YEAR:
        case SOQLParser.NEXT_FISCAL_YEAR:
            this.enterOuterAlt(localctx, 3);
            this.state = 186;
            this.date_formula_literal();
            break;
        case SOQLParser.NEXT_N_DAYS:
        case SOQLParser.LAST_N_DAYS:
        case SOQLParser.N_DAYS_AGO:
        case SOQLParser.NEXT_N_WEEKS:
        case SOQLParser.LAST_N_WEEKS:
        case SOQLParser.N_WEEKS_AGO:
        case SOQLParser.NEXT_N_MONTHS:
        case SOQLParser.LAST_N_MONTHS:
        case SOQLParser.N_MONTHS_AGO:
        case SOQLParser.NEXT_N_QUARTERS:
        case SOQLParser.LAST_N_QUARTERS:
        case SOQLParser.N_QUARTERS_AGO:
        case SOQLParser.NEXT_N_YEARS:
        case SOQLParser.LAST_N_YEARS:
        case SOQLParser.N_YEARS_AGO:
        case SOQLParser.NEXT_N_FISCAL_QUARTERS:
        case SOQLParser.LAST_N_FISCAL_QUARTERS:
        case SOQLParser.N_FISCAL_QUARTERS_AGO:
        case SOQLParser.NEXT_N_FISCAL_YEARS:
        case SOQLParser.LAST_N_FISCAL_YEARS:
        case SOQLParser.N_FISCAL_YEARS_AGO:
            this.enterOuterAlt(localctx, 4);
            this.state = 187;
            this.date_formula_n_literal_name();
            break;
        case SOQLParser.CALENDAR_MONTH:
        case SOQLParser.CALENDAR_QUARTER:
        case SOQLParser.CALENDAR_YEAR:
        case SOQLParser.DAY_IN_MONTH:
        case SOQLParser.DAY_IN_WEEK:
        case SOQLParser.DAY_IN_YEAR:
        case SOQLParser.DAY_ONLY:
        case SOQLParser.FISCAL_MONTH:
        case SOQLParser.FISCAL_QUARTER:
        case SOQLParser.FISCAL_YEAR:
        case SOQLParser.HOUR_IN_DAY:
        case SOQLParser.WEEK_IN_MONTH:
        case SOQLParser.WEEK_IN_YEAR:
        case SOQLParser.AVG:
        case SOQLParser.COUNT:
        case SOQLParser.COUNT_DISTINCT:
        case SOQLParser.MIN:
        case SOQLParser.MAX:
        case SOQLParser.SUM:
        case SOQLParser.DISTANCE:
        case SOQLParser.GEOLOCATION:
        case SOQLParser.FORMAT:
        case SOQLParser.TOLABEL:
        case SOQLParser.CONVERT_TIME_ZONE:
        case SOQLParser.CONVERT_CURRENCY:
        case SOQLParser.GROUPING:
            this.enterOuterAlt(localctx, 5);
            this.state = 188;
            this.function_name();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_object_name;
    return this;
}

Object_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_nameContext.prototype.constructor = Object_nameContext;

Object_nameContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Object_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterObject_name(this);
	}
};

Object_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitObject_name(this);
	}
};




SOQLParser.Object_nameContext = Object_nameContext;

SOQLParser.prototype.object_name = function() {

    var localctx = new Object_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SOQLParser.RULE_object_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 191;
        this.name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_field_name;
    return this;
}

Field_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_nameContext.prototype.constructor = Field_nameContext;

Field_nameContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Field_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterField_name(this);
	}
};

Field_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitField_name(this);
	}
};




SOQLParser.Field_nameContext = Field_nameContext;

SOQLParser.prototype.field_name = function() {

    var localctx = new Field_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SOQLParser.RULE_field_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 193;
        this.name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Filter_scope_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_filter_scope_name;
    return this;
}

Filter_scope_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Filter_scope_nameContext.prototype.constructor = Filter_scope_nameContext;

Filter_scope_nameContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Filter_scope_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterFilter_scope_name(this);
	}
};

Filter_scope_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitFilter_scope_name(this);
	}
};




SOQLParser.Filter_scope_nameContext = Filter_scope_nameContext;

SOQLParser.prototype.filter_scope_name = function() {

    var localctx = new Filter_scope_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SOQLParser.RULE_filter_scope_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 195;
        this.name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_category_group_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_data_category_group_name;
    return this;
}

Data_category_group_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_category_group_nameContext.prototype.constructor = Data_category_group_nameContext;

Data_category_group_nameContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Data_category_group_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterData_category_group_name(this);
	}
};

Data_category_group_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitData_category_group_name(this);
	}
};




SOQLParser.Data_category_group_nameContext = Data_category_group_nameContext;

SOQLParser.prototype.data_category_group_name = function() {

    var localctx = new Data_category_group_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SOQLParser.RULE_data_category_group_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 197;
        this.name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_category_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_data_category_name;
    return this;
}

Data_category_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_category_nameContext.prototype.constructor = Data_category_nameContext;

Data_category_nameContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Data_category_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterData_category_name(this);
	}
};

Data_category_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitData_category_name(this);
	}
};




SOQLParser.Data_category_nameContext = Data_category_nameContext;

SOQLParser.prototype.data_category_name = function() {

    var localctx = new Data_category_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SOQLParser.RULE_data_category_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 199;
        this.name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alias_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_alias_name;
    return this;
}

Alias_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alias_nameContext.prototype.constructor = Alias_nameContext;

Alias_nameContext.prototype.ID = function() {
    return this.getToken(SOQLParser.ID, 0);
};

Alias_nameContext.prototype.keywords_alias_allowed = function() {
    return this.getTypedRuleContext(Keywords_alias_allowedContext,0);
};

Alias_nameContext.prototype.date_formula_literal = function() {
    return this.getTypedRuleContext(Date_formula_literalContext,0);
};

Alias_nameContext.prototype.date_formula_n_literal_name = function() {
    return this.getTypedRuleContext(Date_formula_n_literal_nameContext,0);
};

Alias_nameContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Alias_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterAlias_name(this);
	}
};

Alias_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitAlias_name(this);
	}
};




SOQLParser.Alias_nameContext = Alias_nameContext;

SOQLParser.prototype.alias_name = function() {

    var localctx = new Alias_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SOQLParser.RULE_alias_name);
    try {
        this.state = 206;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SOQLParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 201;
            this.match(SOQLParser.ID);
            break;
        case SOQLParser.ABOVE:
        case SOQLParser.ABOVE_OR_BELOW:
        case SOQLParser.AT:
        case SOQLParser.BELOW:
        case SOQLParser.CATEGORY:
        case SOQLParser.DATA:
        case SOQLParser.END:
        case SOQLParser.OFFSET:
        case SOQLParser.ORDER:
        case SOQLParser.REFERENCE:
        case SOQLParser.SCOPE:
        case SOQLParser.TRACKING:
        case SOQLParser.THEN:
        case SOQLParser.TYPEOF:
        case SOQLParser.VIEW:
        case SOQLParser.VIEWSTAT:
        case SOQLParser.WHEN:
            this.enterOuterAlt(localctx, 2);
            this.state = 202;
            this.keywords_alias_allowed();
            break;
        case SOQLParser.YESTERDAY:
        case SOQLParser.TODAY:
        case SOQLParser.TOMORROW:
        case SOQLParser.LAST_WEEK:
        case SOQLParser.THIS_WEEK:
        case SOQLParser.NEXT_WEEK:
        case SOQLParser.LAST_MONTH:
        case SOQLParser.THIS_MONTH:
        case SOQLParser.NEXT_MONTH:
        case SOQLParser.LAST_90_DAYS:
        case SOQLParser.NEXT_90_DAYS:
        case SOQLParser.THIS_QUARTER:
        case SOQLParser.LAST_QUARTER:
        case SOQLParser.NEXT_QUARTER:
        case SOQLParser.THIS_YEAR:
        case SOQLParser.LAST_YEAR:
        case SOQLParser.NEXT_YEAR:
        case SOQLParser.THIS_FISCAL_QUARTER:
        case SOQLParser.LAST_FISCAL_QUARTER:
        case SOQLParser.NEXT_FISCAL_QUARTER:
        case SOQLParser.THIS_FISCAL_YEAR:
        case SOQLParser.LAST_FISCAL_YEAR:
        case SOQLParser.NEXT_FISCAL_YEAR:
            this.enterOuterAlt(localctx, 3);
            this.state = 203;
            this.date_formula_literal();
            break;
        case SOQLParser.NEXT_N_DAYS:
        case SOQLParser.LAST_N_DAYS:
        case SOQLParser.N_DAYS_AGO:
        case SOQLParser.NEXT_N_WEEKS:
        case SOQLParser.LAST_N_WEEKS:
        case SOQLParser.N_WEEKS_AGO:
        case SOQLParser.NEXT_N_MONTHS:
        case SOQLParser.LAST_N_MONTHS:
        case SOQLParser.N_MONTHS_AGO:
        case SOQLParser.NEXT_N_QUARTERS:
        case SOQLParser.LAST_N_QUARTERS:
        case SOQLParser.N_QUARTERS_AGO:
        case SOQLParser.NEXT_N_YEARS:
        case SOQLParser.LAST_N_YEARS:
        case SOQLParser.N_YEARS_AGO:
        case SOQLParser.NEXT_N_FISCAL_QUARTERS:
        case SOQLParser.LAST_N_FISCAL_QUARTERS:
        case SOQLParser.N_FISCAL_QUARTERS_AGO:
        case SOQLParser.NEXT_N_FISCAL_YEARS:
        case SOQLParser.LAST_N_FISCAL_YEARS:
        case SOQLParser.N_FISCAL_YEARS_AGO:
            this.enterOuterAlt(localctx, 4);
            this.state = 204;
            this.date_formula_n_literal_name();
            break;
        case SOQLParser.CALENDAR_MONTH:
        case SOQLParser.CALENDAR_QUARTER:
        case SOQLParser.CALENDAR_YEAR:
        case SOQLParser.DAY_IN_MONTH:
        case SOQLParser.DAY_IN_WEEK:
        case SOQLParser.DAY_IN_YEAR:
        case SOQLParser.DAY_ONLY:
        case SOQLParser.FISCAL_MONTH:
        case SOQLParser.FISCAL_QUARTER:
        case SOQLParser.FISCAL_YEAR:
        case SOQLParser.HOUR_IN_DAY:
        case SOQLParser.WEEK_IN_MONTH:
        case SOQLParser.WEEK_IN_YEAR:
        case SOQLParser.AVG:
        case SOQLParser.COUNT:
        case SOQLParser.COUNT_DISTINCT:
        case SOQLParser.MIN:
        case SOQLParser.MAX:
        case SOQLParser.SUM:
        case SOQLParser.DISTANCE:
        case SOQLParser.GEOLOCATION:
        case SOQLParser.FORMAT:
        case SOQLParser.TOLABEL:
        case SOQLParser.CONVERT_TIME_ZONE:
        case SOQLParser.CONVERT_CURRENCY:
        case SOQLParser.GROUPING:
            this.enterOuterAlt(localctx, 5);
            this.state = 205;
            this.function_name();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_alias;
    return this;
}

AliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasContext.prototype.constructor = AliasContext;

AliasContext.prototype.alias_name = function() {
    return this.getTypedRuleContext(Alias_nameContext,0);
};

AliasContext.prototype.AS = function() {
    return this.getToken(SOQLParser.AS, 0);
};

AliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterAlias(this);
	}
};

AliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitAlias(this);
	}
};




SOQLParser.AliasContext = AliasContext;

SOQLParser.prototype.alias = function() {

    var localctx = new AliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SOQLParser.RULE_alias);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 209;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.AS) {
            this.state = 208;
            this.match(SOQLParser.AS);
        }

        this.state = 211;
        this.alias_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.date_formula_literal = function() {
    return this.getTypedRuleContext(Date_formula_literalContext,0);
};

LiteralContext.prototype.date_formula_n_literal = function() {
    return this.getTypedRuleContext(Date_formula_n_literalContext,0);
};

LiteralContext.prototype.datetime_literal = function() {
    return this.getTypedRuleContext(Datetime_literalContext,0);
};

LiteralContext.prototype.date_literal = function() {
    return this.getTypedRuleContext(Date_literalContext,0);
};

LiteralContext.prototype.integer_literal = function() {
    return this.getTypedRuleContext(Integer_literalContext,0);
};

LiteralContext.prototype.real_literal = function() {
    return this.getTypedRuleContext(Real_literalContext,0);
};

LiteralContext.prototype.string_literal = function() {
    return this.getTypedRuleContext(String_literalContext,0);
};

LiteralContext.prototype.boolean_literal = function() {
    return this.getTypedRuleContext(Boolean_literalContext,0);
};

LiteralContext.prototype.null_literal = function() {
    return this.getTypedRuleContext(Null_literalContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitLiteral(this);
	}
};




SOQLParser.LiteralContext = LiteralContext;

SOQLParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SOQLParser.RULE_literal);
    try {
        this.state = 222;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SOQLParser.YESTERDAY:
        case SOQLParser.TODAY:
        case SOQLParser.TOMORROW:
        case SOQLParser.LAST_WEEK:
        case SOQLParser.THIS_WEEK:
        case SOQLParser.NEXT_WEEK:
        case SOQLParser.LAST_MONTH:
        case SOQLParser.THIS_MONTH:
        case SOQLParser.NEXT_MONTH:
        case SOQLParser.LAST_90_DAYS:
        case SOQLParser.NEXT_90_DAYS:
        case SOQLParser.THIS_QUARTER:
        case SOQLParser.LAST_QUARTER:
        case SOQLParser.NEXT_QUARTER:
        case SOQLParser.THIS_YEAR:
        case SOQLParser.LAST_YEAR:
        case SOQLParser.NEXT_YEAR:
        case SOQLParser.THIS_FISCAL_QUARTER:
        case SOQLParser.LAST_FISCAL_QUARTER:
        case SOQLParser.NEXT_FISCAL_QUARTER:
        case SOQLParser.THIS_FISCAL_YEAR:
        case SOQLParser.LAST_FISCAL_YEAR:
        case SOQLParser.NEXT_FISCAL_YEAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 213;
            this.date_formula_literal();
            break;
        case SOQLParser.NEXT_N_DAYS:
        case SOQLParser.LAST_N_DAYS:
        case SOQLParser.N_DAYS_AGO:
        case SOQLParser.NEXT_N_WEEKS:
        case SOQLParser.LAST_N_WEEKS:
        case SOQLParser.N_WEEKS_AGO:
        case SOQLParser.NEXT_N_MONTHS:
        case SOQLParser.LAST_N_MONTHS:
        case SOQLParser.N_MONTHS_AGO:
        case SOQLParser.NEXT_N_QUARTERS:
        case SOQLParser.LAST_N_QUARTERS:
        case SOQLParser.N_QUARTERS_AGO:
        case SOQLParser.NEXT_N_YEARS:
        case SOQLParser.LAST_N_YEARS:
        case SOQLParser.N_YEARS_AGO:
        case SOQLParser.NEXT_N_FISCAL_QUARTERS:
        case SOQLParser.LAST_N_FISCAL_QUARTERS:
        case SOQLParser.N_FISCAL_QUARTERS_AGO:
        case SOQLParser.NEXT_N_FISCAL_YEARS:
        case SOQLParser.LAST_N_FISCAL_YEARS:
        case SOQLParser.N_FISCAL_YEARS_AGO:
            this.enterOuterAlt(localctx, 2);
            this.state = 214;
            this.date_formula_n_literal();
            break;
        case SOQLParser.DATETIME:
            this.enterOuterAlt(localctx, 3);
            this.state = 215;
            this.datetime_literal();
            break;
        case SOQLParser.DATE:
            this.enterOuterAlt(localctx, 4);
            this.state = 216;
            this.date_literal();
            break;
        case SOQLParser.UNSIGNED_INTEGER:
        case SOQLParser.SIGNED_INTEGER:
            this.enterOuterAlt(localctx, 5);
            this.state = 217;
            this.integer_literal();
            break;
        case SOQLParser.REAL_NUMBER:
            this.enterOuterAlt(localctx, 6);
            this.state = 218;
            this.real_literal();
            break;
        case SOQLParser.STRING_VALUE:
            this.enterOuterAlt(localctx, 7);
            this.state = 219;
            this.string_literal();
            break;
        case SOQLParser.FALSE:
        case SOQLParser.TRUE:
            this.enterOuterAlt(localctx, 8);
            this.state = 220;
            this.boolean_literal();
            break;
        case SOQLParser.NULL:
            this.enterOuterAlt(localctx, 9);
            this.state = 221;
            this.null_literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Date_formula_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_date_formula_literal;
    return this;
}

Date_formula_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Date_formula_literalContext.prototype.constructor = Date_formula_literalContext;

Date_formula_literalContext.prototype.YESTERDAY = function() {
    return this.getToken(SOQLParser.YESTERDAY, 0);
};

Date_formula_literalContext.prototype.TODAY = function() {
    return this.getToken(SOQLParser.TODAY, 0);
};

Date_formula_literalContext.prototype.TOMORROW = function() {
    return this.getToken(SOQLParser.TOMORROW, 0);
};

Date_formula_literalContext.prototype.LAST_WEEK = function() {
    return this.getToken(SOQLParser.LAST_WEEK, 0);
};

Date_formula_literalContext.prototype.THIS_WEEK = function() {
    return this.getToken(SOQLParser.THIS_WEEK, 0);
};

Date_formula_literalContext.prototype.NEXT_WEEK = function() {
    return this.getToken(SOQLParser.NEXT_WEEK, 0);
};

Date_formula_literalContext.prototype.LAST_MONTH = function() {
    return this.getToken(SOQLParser.LAST_MONTH, 0);
};

Date_formula_literalContext.prototype.THIS_MONTH = function() {
    return this.getToken(SOQLParser.THIS_MONTH, 0);
};

Date_formula_literalContext.prototype.NEXT_MONTH = function() {
    return this.getToken(SOQLParser.NEXT_MONTH, 0);
};

Date_formula_literalContext.prototype.LAST_90_DAYS = function() {
    return this.getToken(SOQLParser.LAST_90_DAYS, 0);
};

Date_formula_literalContext.prototype.NEXT_90_DAYS = function() {
    return this.getToken(SOQLParser.NEXT_90_DAYS, 0);
};

Date_formula_literalContext.prototype.THIS_QUARTER = function() {
    return this.getToken(SOQLParser.THIS_QUARTER, 0);
};

Date_formula_literalContext.prototype.LAST_QUARTER = function() {
    return this.getToken(SOQLParser.LAST_QUARTER, 0);
};

Date_formula_literalContext.prototype.NEXT_QUARTER = function() {
    return this.getToken(SOQLParser.NEXT_QUARTER, 0);
};

Date_formula_literalContext.prototype.THIS_YEAR = function() {
    return this.getToken(SOQLParser.THIS_YEAR, 0);
};

Date_formula_literalContext.prototype.LAST_YEAR = function() {
    return this.getToken(SOQLParser.LAST_YEAR, 0);
};

Date_formula_literalContext.prototype.NEXT_YEAR = function() {
    return this.getToken(SOQLParser.NEXT_YEAR, 0);
};

Date_formula_literalContext.prototype.THIS_FISCAL_QUARTER = function() {
    return this.getToken(SOQLParser.THIS_FISCAL_QUARTER, 0);
};

Date_formula_literalContext.prototype.LAST_FISCAL_QUARTER = function() {
    return this.getToken(SOQLParser.LAST_FISCAL_QUARTER, 0);
};

Date_formula_literalContext.prototype.NEXT_FISCAL_QUARTER = function() {
    return this.getToken(SOQLParser.NEXT_FISCAL_QUARTER, 0);
};

Date_formula_literalContext.prototype.THIS_FISCAL_YEAR = function() {
    return this.getToken(SOQLParser.THIS_FISCAL_YEAR, 0);
};

Date_formula_literalContext.prototype.LAST_FISCAL_YEAR = function() {
    return this.getToken(SOQLParser.LAST_FISCAL_YEAR, 0);
};

Date_formula_literalContext.prototype.NEXT_FISCAL_YEAR = function() {
    return this.getToken(SOQLParser.NEXT_FISCAL_YEAR, 0);
};

Date_formula_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterDate_formula_literal(this);
	}
};

Date_formula_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitDate_formula_literal(this);
	}
};




SOQLParser.Date_formula_literalContext = Date_formula_literalContext;

SOQLParser.prototype.date_formula_literal = function() {

    var localctx = new Date_formula_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SOQLParser.RULE_date_formula_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 224;
        _la = this._input.LA(1);
        if(!(((((_la - 77)) & ~0x1f) == 0 && ((1 << (_la - 77)) & ((1 << (SOQLParser.YESTERDAY - 77)) | (1 << (SOQLParser.TODAY - 77)) | (1 << (SOQLParser.TOMORROW - 77)) | (1 << (SOQLParser.LAST_WEEK - 77)) | (1 << (SOQLParser.THIS_WEEK - 77)) | (1 << (SOQLParser.NEXT_WEEK - 77)) | (1 << (SOQLParser.LAST_MONTH - 77)) | (1 << (SOQLParser.THIS_MONTH - 77)) | (1 << (SOQLParser.NEXT_MONTH - 77)) | (1 << (SOQLParser.LAST_90_DAYS - 77)) | (1 << (SOQLParser.NEXT_90_DAYS - 77)) | (1 << (SOQLParser.THIS_QUARTER - 77)) | (1 << (SOQLParser.LAST_QUARTER - 77)) | (1 << (SOQLParser.NEXT_QUARTER - 77)) | (1 << (SOQLParser.THIS_YEAR - 77)) | (1 << (SOQLParser.LAST_YEAR - 77)) | (1 << (SOQLParser.NEXT_YEAR - 77)) | (1 << (SOQLParser.THIS_FISCAL_QUARTER - 77)) | (1 << (SOQLParser.LAST_FISCAL_QUARTER - 77)) | (1 << (SOQLParser.NEXT_FISCAL_QUARTER - 77)) | (1 << (SOQLParser.THIS_FISCAL_YEAR - 77)) | (1 << (SOQLParser.LAST_FISCAL_YEAR - 77)) | (1 << (SOQLParser.NEXT_FISCAL_YEAR - 77)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Date_formula_n_literal_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_date_formula_n_literal_name;
    return this;
}

Date_formula_n_literal_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Date_formula_n_literal_nameContext.prototype.constructor = Date_formula_n_literal_nameContext;

Date_formula_n_literal_nameContext.prototype.NEXT_N_DAYS = function() {
    return this.getToken(SOQLParser.NEXT_N_DAYS, 0);
};

Date_formula_n_literal_nameContext.prototype.LAST_N_DAYS = function() {
    return this.getToken(SOQLParser.LAST_N_DAYS, 0);
};

Date_formula_n_literal_nameContext.prototype.N_DAYS_AGO = function() {
    return this.getToken(SOQLParser.N_DAYS_AGO, 0);
};

Date_formula_n_literal_nameContext.prototype.NEXT_N_WEEKS = function() {
    return this.getToken(SOQLParser.NEXT_N_WEEKS, 0);
};

Date_formula_n_literal_nameContext.prototype.LAST_N_WEEKS = function() {
    return this.getToken(SOQLParser.LAST_N_WEEKS, 0);
};

Date_formula_n_literal_nameContext.prototype.N_WEEKS_AGO = function() {
    return this.getToken(SOQLParser.N_WEEKS_AGO, 0);
};

Date_formula_n_literal_nameContext.prototype.NEXT_N_MONTHS = function() {
    return this.getToken(SOQLParser.NEXT_N_MONTHS, 0);
};

Date_formula_n_literal_nameContext.prototype.LAST_N_MONTHS = function() {
    return this.getToken(SOQLParser.LAST_N_MONTHS, 0);
};

Date_formula_n_literal_nameContext.prototype.N_MONTHS_AGO = function() {
    return this.getToken(SOQLParser.N_MONTHS_AGO, 0);
};

Date_formula_n_literal_nameContext.prototype.NEXT_N_QUARTERS = function() {
    return this.getToken(SOQLParser.NEXT_N_QUARTERS, 0);
};

Date_formula_n_literal_nameContext.prototype.LAST_N_QUARTERS = function() {
    return this.getToken(SOQLParser.LAST_N_QUARTERS, 0);
};

Date_formula_n_literal_nameContext.prototype.N_QUARTERS_AGO = function() {
    return this.getToken(SOQLParser.N_QUARTERS_AGO, 0);
};

Date_formula_n_literal_nameContext.prototype.NEXT_N_YEARS = function() {
    return this.getToken(SOQLParser.NEXT_N_YEARS, 0);
};

Date_formula_n_literal_nameContext.prototype.LAST_N_YEARS = function() {
    return this.getToken(SOQLParser.LAST_N_YEARS, 0);
};

Date_formula_n_literal_nameContext.prototype.N_YEARS_AGO = function() {
    return this.getToken(SOQLParser.N_YEARS_AGO, 0);
};

Date_formula_n_literal_nameContext.prototype.NEXT_N_FISCAL_QUARTERS = function() {
    return this.getToken(SOQLParser.NEXT_N_FISCAL_QUARTERS, 0);
};

Date_formula_n_literal_nameContext.prototype.LAST_N_FISCAL_QUARTERS = function() {
    return this.getToken(SOQLParser.LAST_N_FISCAL_QUARTERS, 0);
};

Date_formula_n_literal_nameContext.prototype.N_FISCAL_QUARTERS_AGO = function() {
    return this.getToken(SOQLParser.N_FISCAL_QUARTERS_AGO, 0);
};

Date_formula_n_literal_nameContext.prototype.NEXT_N_FISCAL_YEARS = function() {
    return this.getToken(SOQLParser.NEXT_N_FISCAL_YEARS, 0);
};

Date_formula_n_literal_nameContext.prototype.LAST_N_FISCAL_YEARS = function() {
    return this.getToken(SOQLParser.LAST_N_FISCAL_YEARS, 0);
};

Date_formula_n_literal_nameContext.prototype.N_FISCAL_YEARS_AGO = function() {
    return this.getToken(SOQLParser.N_FISCAL_YEARS_AGO, 0);
};

Date_formula_n_literal_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterDate_formula_n_literal_name(this);
	}
};

Date_formula_n_literal_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitDate_formula_n_literal_name(this);
	}
};




SOQLParser.Date_formula_n_literal_nameContext = Date_formula_n_literal_nameContext;

SOQLParser.prototype.date_formula_n_literal_name = function() {

    var localctx = new Date_formula_n_literal_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SOQLParser.RULE_date_formula_n_literal_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 226;
        _la = this._input.LA(1);
        if(!(((((_la - 100)) & ~0x1f) == 0 && ((1 << (_la - 100)) & ((1 << (SOQLParser.NEXT_N_DAYS - 100)) | (1 << (SOQLParser.LAST_N_DAYS - 100)) | (1 << (SOQLParser.N_DAYS_AGO - 100)) | (1 << (SOQLParser.NEXT_N_WEEKS - 100)) | (1 << (SOQLParser.LAST_N_WEEKS - 100)) | (1 << (SOQLParser.N_WEEKS_AGO - 100)) | (1 << (SOQLParser.NEXT_N_MONTHS - 100)) | (1 << (SOQLParser.LAST_N_MONTHS - 100)) | (1 << (SOQLParser.N_MONTHS_AGO - 100)) | (1 << (SOQLParser.NEXT_N_QUARTERS - 100)) | (1 << (SOQLParser.LAST_N_QUARTERS - 100)) | (1 << (SOQLParser.N_QUARTERS_AGO - 100)) | (1 << (SOQLParser.NEXT_N_YEARS - 100)) | (1 << (SOQLParser.LAST_N_YEARS - 100)) | (1 << (SOQLParser.N_YEARS_AGO - 100)) | (1 << (SOQLParser.NEXT_N_FISCAL_QUARTERS - 100)) | (1 << (SOQLParser.LAST_N_FISCAL_QUARTERS - 100)) | (1 << (SOQLParser.N_FISCAL_QUARTERS_AGO - 100)) | (1 << (SOQLParser.NEXT_N_FISCAL_YEARS - 100)) | (1 << (SOQLParser.LAST_N_FISCAL_YEARS - 100)) | (1 << (SOQLParser.N_FISCAL_YEARS_AGO - 100)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Date_formula_n_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_date_formula_n_literal;
    return this;
}

Date_formula_n_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Date_formula_n_literalContext.prototype.constructor = Date_formula_n_literalContext;

Date_formula_n_literalContext.prototype.date_formula_n_literal_name = function() {
    return this.getTypedRuleContext(Date_formula_n_literal_nameContext,0);
};

Date_formula_n_literalContext.prototype.COLON = function() {
    return this.getToken(SOQLParser.COLON, 0);
};

Date_formula_n_literalContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(SOQLParser.UNSIGNED_INTEGER, 0);
};

Date_formula_n_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterDate_formula_n_literal(this);
	}
};

Date_formula_n_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitDate_formula_n_literal(this);
	}
};




SOQLParser.Date_formula_n_literalContext = Date_formula_n_literalContext;

SOQLParser.prototype.date_formula_n_literal = function() {

    var localctx = new Date_formula_n_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SOQLParser.RULE_date_formula_n_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 228;
        this.date_formula_n_literal_name();
        this.state = 229;
        this.match(SOQLParser.COLON);
        this.state = 230;
        this.match(SOQLParser.UNSIGNED_INTEGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Datetime_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_datetime_literal;
    return this;
}

Datetime_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Datetime_literalContext.prototype.constructor = Datetime_literalContext;

Datetime_literalContext.prototype.DATETIME = function() {
    return this.getToken(SOQLParser.DATETIME, 0);
};

Datetime_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterDatetime_literal(this);
	}
};

Datetime_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitDatetime_literal(this);
	}
};




SOQLParser.Datetime_literalContext = Datetime_literalContext;

SOQLParser.prototype.datetime_literal = function() {

    var localctx = new Datetime_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SOQLParser.RULE_datetime_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 232;
        this.match(SOQLParser.DATETIME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Date_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_date_literal;
    return this;
}

Date_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Date_literalContext.prototype.constructor = Date_literalContext;

Date_literalContext.prototype.DATE = function() {
    return this.getToken(SOQLParser.DATE, 0);
};

Date_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterDate_literal(this);
	}
};

Date_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitDate_literal(this);
	}
};




SOQLParser.Date_literalContext = Date_literalContext;

SOQLParser.prototype.date_literal = function() {

    var localctx = new Date_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SOQLParser.RULE_date_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 234;
        this.match(SOQLParser.DATE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Integer_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_integer_literal;
    return this;
}

Integer_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Integer_literalContext.prototype.constructor = Integer_literalContext;

Integer_literalContext.prototype.SIGNED_INTEGER = function() {
    return this.getToken(SOQLParser.SIGNED_INTEGER, 0);
};

Integer_literalContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(SOQLParser.UNSIGNED_INTEGER, 0);
};

Integer_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterInteger_literal(this);
	}
};

Integer_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitInteger_literal(this);
	}
};




SOQLParser.Integer_literalContext = Integer_literalContext;

SOQLParser.prototype.integer_literal = function() {

    var localctx = new Integer_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SOQLParser.RULE_integer_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 236;
        _la = this._input.LA(1);
        if(!(_la===SOQLParser.UNSIGNED_INTEGER || _la===SOQLParser.SIGNED_INTEGER)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Real_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_real_literal;
    return this;
}

Real_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Real_literalContext.prototype.constructor = Real_literalContext;

Real_literalContext.prototype.REAL_NUMBER = function() {
    return this.getToken(SOQLParser.REAL_NUMBER, 0);
};

Real_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterReal_literal(this);
	}
};

Real_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitReal_literal(this);
	}
};




SOQLParser.Real_literalContext = Real_literalContext;

SOQLParser.prototype.real_literal = function() {

    var localctx = new Real_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SOQLParser.RULE_real_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 238;
        this.match(SOQLParser.REAL_NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function String_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_string_literal;
    return this;
}

String_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
String_literalContext.prototype.constructor = String_literalContext;

String_literalContext.prototype.STRING_VALUE = function() {
    return this.getToken(SOQLParser.STRING_VALUE, 0);
};

String_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterString_literal(this);
	}
};

String_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitString_literal(this);
	}
};




SOQLParser.String_literalContext = String_literalContext;

SOQLParser.prototype.string_literal = function() {

    var localctx = new String_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SOQLParser.RULE_string_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 240;
        this.match(SOQLParser.STRING_VALUE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Boolean_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_boolean_literal;
    return this;
}

Boolean_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Boolean_literalContext.prototype.constructor = Boolean_literalContext;

Boolean_literalContext.prototype.TRUE = function() {
    return this.getToken(SOQLParser.TRUE, 0);
};

Boolean_literalContext.prototype.FALSE = function() {
    return this.getToken(SOQLParser.FALSE, 0);
};

Boolean_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterBoolean_literal(this);
	}
};

Boolean_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitBoolean_literal(this);
	}
};




SOQLParser.Boolean_literalContext = Boolean_literalContext;

SOQLParser.prototype.boolean_literal = function() {

    var localctx = new Boolean_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SOQLParser.RULE_boolean_literal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 242;
        _la = this._input.LA(1);
        if(!(_la===SOQLParser.FALSE || _la===SOQLParser.TRUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Null_literalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_null_literal;
    return this;
}

Null_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Null_literalContext.prototype.constructor = Null_literalContext;

Null_literalContext.prototype.NULL = function() {
    return this.getToken(SOQLParser.NULL, 0);
};

Null_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterNull_literal(this);
	}
};

Null_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitNull_literal(this);
	}
};




SOQLParser.Null_literalContext = Null_literalContext;

SOQLParser.prototype.null_literal = function() {

    var localctx = new Null_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SOQLParser.RULE_null_literal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 244;
        this.match(SOQLParser.NULL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_function_name;
    return this;
}

Function_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_nameContext.prototype.constructor = Function_nameContext;

Function_nameContext.prototype.function_date = function() {
    return this.getTypedRuleContext(Function_dateContext,0);
};

Function_nameContext.prototype.function_aggregate = function() {
    return this.getTypedRuleContext(Function_aggregateContext,0);
};

Function_nameContext.prototype.function_location = function() {
    return this.getTypedRuleContext(Function_locationContext,0);
};

Function_nameContext.prototype.function_other = function() {
    return this.getTypedRuleContext(Function_otherContext,0);
};

Function_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterFunction_name(this);
	}
};

Function_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitFunction_name(this);
	}
};




SOQLParser.Function_nameContext = Function_nameContext;

SOQLParser.prototype.function_name = function() {

    var localctx = new Function_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SOQLParser.RULE_function_name);
    try {
        this.state = 250;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SOQLParser.CALENDAR_MONTH:
        case SOQLParser.CALENDAR_QUARTER:
        case SOQLParser.CALENDAR_YEAR:
        case SOQLParser.DAY_IN_MONTH:
        case SOQLParser.DAY_IN_WEEK:
        case SOQLParser.DAY_IN_YEAR:
        case SOQLParser.DAY_ONLY:
        case SOQLParser.FISCAL_MONTH:
        case SOQLParser.FISCAL_QUARTER:
        case SOQLParser.FISCAL_YEAR:
        case SOQLParser.HOUR_IN_DAY:
        case SOQLParser.WEEK_IN_MONTH:
        case SOQLParser.WEEK_IN_YEAR:
            this.enterOuterAlt(localctx, 1);
            this.state = 246;
            this.function_date();
            break;
        case SOQLParser.AVG:
        case SOQLParser.COUNT:
        case SOQLParser.COUNT_DISTINCT:
        case SOQLParser.MIN:
        case SOQLParser.MAX:
        case SOQLParser.SUM:
            this.enterOuterAlt(localctx, 2);
            this.state = 247;
            this.function_aggregate();
            break;
        case SOQLParser.DISTANCE:
        case SOQLParser.GEOLOCATION:
            this.enterOuterAlt(localctx, 3);
            this.state = 248;
            this.function_location();
            break;
        case SOQLParser.FORMAT:
        case SOQLParser.TOLABEL:
        case SOQLParser.CONVERT_TIME_ZONE:
        case SOQLParser.CONVERT_CURRENCY:
        case SOQLParser.GROUPING:
            this.enterOuterAlt(localctx, 4);
            this.state = 249;
            this.function_other();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_dateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_function_date;
    return this;
}

Function_dateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_dateContext.prototype.constructor = Function_dateContext;

Function_dateContext.prototype.CALENDAR_MONTH = function() {
    return this.getToken(SOQLParser.CALENDAR_MONTH, 0);
};

Function_dateContext.prototype.CALENDAR_QUARTER = function() {
    return this.getToken(SOQLParser.CALENDAR_QUARTER, 0);
};

Function_dateContext.prototype.CALENDAR_YEAR = function() {
    return this.getToken(SOQLParser.CALENDAR_YEAR, 0);
};

Function_dateContext.prototype.DAY_IN_MONTH = function() {
    return this.getToken(SOQLParser.DAY_IN_MONTH, 0);
};

Function_dateContext.prototype.DAY_IN_WEEK = function() {
    return this.getToken(SOQLParser.DAY_IN_WEEK, 0);
};

Function_dateContext.prototype.DAY_IN_YEAR = function() {
    return this.getToken(SOQLParser.DAY_IN_YEAR, 0);
};

Function_dateContext.prototype.DAY_ONLY = function() {
    return this.getToken(SOQLParser.DAY_ONLY, 0);
};

Function_dateContext.prototype.FISCAL_MONTH = function() {
    return this.getToken(SOQLParser.FISCAL_MONTH, 0);
};

Function_dateContext.prototype.FISCAL_QUARTER = function() {
    return this.getToken(SOQLParser.FISCAL_QUARTER, 0);
};

Function_dateContext.prototype.FISCAL_YEAR = function() {
    return this.getToken(SOQLParser.FISCAL_YEAR, 0);
};

Function_dateContext.prototype.HOUR_IN_DAY = function() {
    return this.getToken(SOQLParser.HOUR_IN_DAY, 0);
};

Function_dateContext.prototype.WEEK_IN_MONTH = function() {
    return this.getToken(SOQLParser.WEEK_IN_MONTH, 0);
};

Function_dateContext.prototype.WEEK_IN_YEAR = function() {
    return this.getToken(SOQLParser.WEEK_IN_YEAR, 0);
};

Function_dateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterFunction_date(this);
	}
};

Function_dateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitFunction_date(this);
	}
};




SOQLParser.Function_dateContext = Function_dateContext;

SOQLParser.prototype.function_date = function() {

    var localctx = new Function_dateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SOQLParser.RULE_function_date);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 252;
        _la = this._input.LA(1);
        if(!(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (SOQLParser.CALENDAR_MONTH - 51)) | (1 << (SOQLParser.CALENDAR_QUARTER - 51)) | (1 << (SOQLParser.CALENDAR_YEAR - 51)) | (1 << (SOQLParser.DAY_IN_MONTH - 51)) | (1 << (SOQLParser.DAY_IN_WEEK - 51)) | (1 << (SOQLParser.DAY_IN_YEAR - 51)) | (1 << (SOQLParser.DAY_ONLY - 51)) | (1 << (SOQLParser.FISCAL_MONTH - 51)) | (1 << (SOQLParser.FISCAL_QUARTER - 51)) | (1 << (SOQLParser.FISCAL_YEAR - 51)) | (1 << (SOQLParser.HOUR_IN_DAY - 51)) | (1 << (SOQLParser.WEEK_IN_MONTH - 51)) | (1 << (SOQLParser.WEEK_IN_YEAR - 51)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_aggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_function_aggregate;
    return this;
}

Function_aggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_aggregateContext.prototype.constructor = Function_aggregateContext;

Function_aggregateContext.prototype.AVG = function() {
    return this.getToken(SOQLParser.AVG, 0);
};

Function_aggregateContext.prototype.COUNT = function() {
    return this.getToken(SOQLParser.COUNT, 0);
};

Function_aggregateContext.prototype.COUNT_DISTINCT = function() {
    return this.getToken(SOQLParser.COUNT_DISTINCT, 0);
};

Function_aggregateContext.prototype.MIN = function() {
    return this.getToken(SOQLParser.MIN, 0);
};

Function_aggregateContext.prototype.MAX = function() {
    return this.getToken(SOQLParser.MAX, 0);
};

Function_aggregateContext.prototype.SUM = function() {
    return this.getToken(SOQLParser.SUM, 0);
};

Function_aggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterFunction_aggregate(this);
	}
};

Function_aggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitFunction_aggregate(this);
	}
};




SOQLParser.Function_aggregateContext = Function_aggregateContext;

SOQLParser.prototype.function_aggregate = function() {

    var localctx = new Function_aggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SOQLParser.RULE_function_aggregate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 254;
        _la = this._input.LA(1);
        if(!(((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SOQLParser.AVG - 64)) | (1 << (SOQLParser.COUNT - 64)) | (1 << (SOQLParser.COUNT_DISTINCT - 64)) | (1 << (SOQLParser.MIN - 64)) | (1 << (SOQLParser.MAX - 64)) | (1 << (SOQLParser.SUM - 64)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_locationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_function_location;
    return this;
}

Function_locationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_locationContext.prototype.constructor = Function_locationContext;

Function_locationContext.prototype.DISTANCE = function() {
    return this.getToken(SOQLParser.DISTANCE, 0);
};

Function_locationContext.prototype.GEOLOCATION = function() {
    return this.getToken(SOQLParser.GEOLOCATION, 0);
};

Function_locationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterFunction_location(this);
	}
};

Function_locationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitFunction_location(this);
	}
};




SOQLParser.Function_locationContext = Function_locationContext;

SOQLParser.prototype.function_location = function() {

    var localctx = new Function_locationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SOQLParser.RULE_function_location);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 256;
        _la = this._input.LA(1);
        if(!(_la===SOQLParser.DISTANCE || _la===SOQLParser.GEOLOCATION)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_otherContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_function_other;
    return this;
}

Function_otherContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_otherContext.prototype.constructor = Function_otherContext;

Function_otherContext.prototype.FORMAT = function() {
    return this.getToken(SOQLParser.FORMAT, 0);
};

Function_otherContext.prototype.TOLABEL = function() {
    return this.getToken(SOQLParser.TOLABEL, 0);
};

Function_otherContext.prototype.CONVERT_TIME_ZONE = function() {
    return this.getToken(SOQLParser.CONVERT_TIME_ZONE, 0);
};

Function_otherContext.prototype.CONVERT_CURRENCY = function() {
    return this.getToken(SOQLParser.CONVERT_CURRENCY, 0);
};

Function_otherContext.prototype.GROUPING = function() {
    return this.getToken(SOQLParser.GROUPING, 0);
};

Function_otherContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterFunction_other(this);
	}
};

Function_otherContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitFunction_other(this);
	}
};




SOQLParser.Function_otherContext = Function_otherContext;

SOQLParser.prototype.function_other = function() {

    var localctx = new Function_otherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SOQLParser.RULE_function_other);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 258;
        _la = this._input.LA(1);
        if(!(((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (SOQLParser.FORMAT - 72)) | (1 << (SOQLParser.TOLABEL - 72)) | (1 << (SOQLParser.CONVERT_TIME_ZONE - 72)) | (1 << (SOQLParser.CONVERT_CURRENCY - 72)) | (1 << (SOQLParser.GROUPING - 72)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Soql_queryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_soql_query;
    return this;
}

Soql_queryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Soql_queryContext.prototype.constructor = Soql_queryContext;

Soql_queryContext.prototype.select_clause = function() {
    return this.getTypedRuleContext(Select_clauseContext,0);
};

Soql_queryContext.prototype.from_clause = function() {
    return this.getTypedRuleContext(From_clauseContext,0);
};

Soql_queryContext.prototype.EOF = function() {
    return this.getToken(SOQLParser.EOF, 0);
};

Soql_queryContext.prototype.using_clause = function() {
    return this.getTypedRuleContext(Using_clauseContext,0);
};

Soql_queryContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Soql_queryContext.prototype.with_clause = function() {
    return this.getTypedRuleContext(With_clauseContext,0);
};

Soql_queryContext.prototype.groupby_clause = function() {
    return this.getTypedRuleContext(Groupby_clauseContext,0);
};

Soql_queryContext.prototype.orderby_clause = function() {
    return this.getTypedRuleContext(Orderby_clauseContext,0);
};

Soql_queryContext.prototype.limit_clause = function() {
    return this.getTypedRuleContext(Limit_clauseContext,0);
};

Soql_queryContext.prototype.offset_clause = function() {
    return this.getTypedRuleContext(Offset_clauseContext,0);
};

Soql_queryContext.prototype.for_clause = function() {
    return this.getTypedRuleContext(For_clauseContext,0);
};

Soql_queryContext.prototype.update_clause = function() {
    return this.getTypedRuleContext(Update_clauseContext,0);
};

Soql_queryContext.prototype.having_clause = function() {
    return this.getTypedRuleContext(Having_clauseContext,0);
};

Soql_queryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterSoql_query(this);
	}
};

Soql_queryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitSoql_query(this);
	}
};




SOQLParser.Soql_queryContext = Soql_queryContext;

SOQLParser.prototype.soql_query = function() {

    var localctx = new Soql_queryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SOQLParser.RULE_soql_query);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 260;
        this.select_clause();
        this.state = 261;
        this.from_clause();
        this.state = 263;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.USING) {
            this.state = 262;
            this.using_clause();
        }

        this.state = 266;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.WHERE) {
            this.state = 265;
            this.where_clause();
        }

        this.state = 269;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.WITH) {
            this.state = 268;
            this.with_clause();
        }

        this.state = 275;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.GROUP) {
            this.state = 271;
            this.groupby_clause();
            this.state = 273;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SOQLParser.HAVING) {
                this.state = 272;
                this.having_clause();
            }

        }

        this.state = 278;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.ORDER) {
            this.state = 277;
            this.orderby_clause();
        }

        this.state = 281;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.LIMIT) {
            this.state = 280;
            this.limit_clause();
        }

        this.state = 284;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.OFFSET) {
            this.state = 283;
            this.offset_clause();
        }

        this.state = 287;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.FOR) {
            this.state = 286;
            this.for_clause();
        }

        this.state = 290;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.UPDATE) {
            this.state = 289;
            this.update_clause();
        }

        this.state = 292;
        this.match(SOQLParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_select_clause;
    return this;
}

Select_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_clauseContext.prototype.constructor = Select_clauseContext;

Select_clauseContext.prototype.SELECT = function() {
    return this.getToken(SOQLParser.SELECT, 0);
};

Select_clauseContext.prototype.select_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Select_specContext);
    } else {
        return this.getTypedRuleContext(Select_specContext,i);
    }
};

Select_clauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.COMMA);
    } else {
        return this.getToken(SOQLParser.COMMA, i);
    }
};


Select_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterSelect_clause(this);
	}
};

Select_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitSelect_clause(this);
	}
};




SOQLParser.Select_clauseContext = Select_clauseContext;

SOQLParser.prototype.select_clause = function() {

    var localctx = new Select_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SOQLParser.RULE_select_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        this.match(SOQLParser.SELECT);
        this.state = 295;
        this.select_spec();
        this.state = 300;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SOQLParser.COMMA) {
            this.state = 296;
            this.match(SOQLParser.COMMA);
            this.state = 297;
            this.select_spec();
            this.state = 302;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function From_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_from_clause;
    return this;
}

From_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
From_clauseContext.prototype.constructor = From_clauseContext;

From_clauseContext.prototype.FROM = function() {
    return this.getToken(SOQLParser.FROM, 0);
};

From_clauseContext.prototype.object_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Object_specContext);
    } else {
        return this.getTypedRuleContext(Object_specContext,i);
    }
};

From_clauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.COMMA);
    } else {
        return this.getToken(SOQLParser.COMMA, i);
    }
};


From_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterFrom_clause(this);
	}
};

From_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitFrom_clause(this);
	}
};




SOQLParser.From_clauseContext = From_clauseContext;

SOQLParser.prototype.from_clause = function() {

    var localctx = new From_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SOQLParser.RULE_from_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 303;
        this.match(SOQLParser.FROM);
        this.state = 304;
        this.object_spec();
        this.state = 309;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SOQLParser.COMMA) {
            this.state = 305;
            this.match(SOQLParser.COMMA);
            this.state = 306;
            this.object_spec();
            this.state = 311;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Using_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_using_clause;
    return this;
}

Using_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Using_clauseContext.prototype.constructor = Using_clauseContext;

Using_clauseContext.prototype.USING = function() {
    return this.getToken(SOQLParser.USING, 0);
};

Using_clauseContext.prototype.SCOPE = function() {
    return this.getToken(SOQLParser.SCOPE, 0);
};

Using_clauseContext.prototype.filter_scope_name = function() {
    return this.getTypedRuleContext(Filter_scope_nameContext,0);
};

Using_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterUsing_clause(this);
	}
};

Using_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitUsing_clause(this);
	}
};




SOQLParser.Using_clauseContext = Using_clauseContext;

SOQLParser.prototype.using_clause = function() {

    var localctx = new Using_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SOQLParser.RULE_using_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 312;
        this.match(SOQLParser.USING);
        this.state = 313;
        this.match(SOQLParser.SCOPE);
        this.state = 314;
        this.filter_scope_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Where_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_where_clause;
    return this;
}

Where_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Where_clauseContext.prototype.constructor = Where_clauseContext;

Where_clauseContext.prototype.WHERE = function() {
    return this.getToken(SOQLParser.WHERE, 0);
};

Where_clauseContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Where_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterWhere_clause(this);
	}
};

Where_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitWhere_clause(this);
	}
};




SOQLParser.Where_clauseContext = Where_clauseContext;

SOQLParser.prototype.where_clause = function() {

    var localctx = new Where_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SOQLParser.RULE_where_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 316;
        this.match(SOQLParser.WHERE);
        this.state = 317;
        this.condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Groupby_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_groupby_clause;
    return this;
}

Groupby_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Groupby_clauseContext.prototype.constructor = Groupby_clauseContext;

Groupby_clauseContext.prototype.GROUP = function() {
    return this.getToken(SOQLParser.GROUP, 0);
};

Groupby_clauseContext.prototype.BY = function() {
    return this.getToken(SOQLParser.BY, 0);
};

Groupby_clauseContext.prototype.group_by_rollup_clause = function() {
    return this.getTypedRuleContext(Group_by_rollup_clauseContext,0);
};

Groupby_clauseContext.prototype.group_by_cube_clause = function() {
    return this.getTypedRuleContext(Group_by_cube_clauseContext,0);
};

Groupby_clauseContext.prototype.group_by_plain_clause = function() {
    return this.getTypedRuleContext(Group_by_plain_clauseContext,0);
};

Groupby_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterGroupby_clause(this);
	}
};

Groupby_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitGroupby_clause(this);
	}
};




SOQLParser.Groupby_clauseContext = Groupby_clauseContext;

SOQLParser.prototype.groupby_clause = function() {

    var localctx = new Groupby_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SOQLParser.RULE_groupby_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 319;
        this.match(SOQLParser.GROUP);
        this.state = 320;
        this.match(SOQLParser.BY);
        this.state = 324;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SOQLParser.ROLLUP:
            this.state = 321;
            this.group_by_rollup_clause();
            break;
        case SOQLParser.CUBE:
            this.state = 322;
            this.group_by_cube_clause();
            break;
        case SOQLParser.GROUP:
        case SOQLParser.ABOVE:
        case SOQLParser.ABOVE_OR_BELOW:
        case SOQLParser.AT:
        case SOQLParser.BELOW:
        case SOQLParser.CATEGORY:
        case SOQLParser.DATA:
        case SOQLParser.END:
        case SOQLParser.OFFSET:
        case SOQLParser.ORDER:
        case SOQLParser.REFERENCE:
        case SOQLParser.SCOPE:
        case SOQLParser.TRACKING:
        case SOQLParser.THEN:
        case SOQLParser.TYPEOF:
        case SOQLParser.VIEW:
        case SOQLParser.VIEWSTAT:
        case SOQLParser.WHEN:
        case SOQLParser.CALENDAR_MONTH:
        case SOQLParser.CALENDAR_QUARTER:
        case SOQLParser.CALENDAR_YEAR:
        case SOQLParser.DAY_IN_MONTH:
        case SOQLParser.DAY_IN_WEEK:
        case SOQLParser.DAY_IN_YEAR:
        case SOQLParser.DAY_ONLY:
        case SOQLParser.FISCAL_MONTH:
        case SOQLParser.FISCAL_QUARTER:
        case SOQLParser.FISCAL_YEAR:
        case SOQLParser.HOUR_IN_DAY:
        case SOQLParser.WEEK_IN_MONTH:
        case SOQLParser.WEEK_IN_YEAR:
        case SOQLParser.AVG:
        case SOQLParser.COUNT:
        case SOQLParser.COUNT_DISTINCT:
        case SOQLParser.MIN:
        case SOQLParser.MAX:
        case SOQLParser.SUM:
        case SOQLParser.DISTANCE:
        case SOQLParser.GEOLOCATION:
        case SOQLParser.FORMAT:
        case SOQLParser.TOLABEL:
        case SOQLParser.CONVERT_TIME_ZONE:
        case SOQLParser.CONVERT_CURRENCY:
        case SOQLParser.GROUPING:
        case SOQLParser.YESTERDAY:
        case SOQLParser.TODAY:
        case SOQLParser.TOMORROW:
        case SOQLParser.LAST_WEEK:
        case SOQLParser.THIS_WEEK:
        case SOQLParser.NEXT_WEEK:
        case SOQLParser.LAST_MONTH:
        case SOQLParser.THIS_MONTH:
        case SOQLParser.NEXT_MONTH:
        case SOQLParser.LAST_90_DAYS:
        case SOQLParser.NEXT_90_DAYS:
        case SOQLParser.THIS_QUARTER:
        case SOQLParser.LAST_QUARTER:
        case SOQLParser.NEXT_QUARTER:
        case SOQLParser.THIS_YEAR:
        case SOQLParser.LAST_YEAR:
        case SOQLParser.NEXT_YEAR:
        case SOQLParser.THIS_FISCAL_QUARTER:
        case SOQLParser.LAST_FISCAL_QUARTER:
        case SOQLParser.NEXT_FISCAL_QUARTER:
        case SOQLParser.THIS_FISCAL_YEAR:
        case SOQLParser.LAST_FISCAL_YEAR:
        case SOQLParser.NEXT_FISCAL_YEAR:
        case SOQLParser.NEXT_N_DAYS:
        case SOQLParser.LAST_N_DAYS:
        case SOQLParser.N_DAYS_AGO:
        case SOQLParser.NEXT_N_WEEKS:
        case SOQLParser.LAST_N_WEEKS:
        case SOQLParser.N_WEEKS_AGO:
        case SOQLParser.NEXT_N_MONTHS:
        case SOQLParser.LAST_N_MONTHS:
        case SOQLParser.N_MONTHS_AGO:
        case SOQLParser.NEXT_N_QUARTERS:
        case SOQLParser.LAST_N_QUARTERS:
        case SOQLParser.N_QUARTERS_AGO:
        case SOQLParser.NEXT_N_YEARS:
        case SOQLParser.LAST_N_YEARS:
        case SOQLParser.N_YEARS_AGO:
        case SOQLParser.NEXT_N_FISCAL_QUARTERS:
        case SOQLParser.LAST_N_FISCAL_QUARTERS:
        case SOQLParser.N_FISCAL_QUARTERS_AGO:
        case SOQLParser.NEXT_N_FISCAL_YEARS:
        case SOQLParser.LAST_N_FISCAL_YEARS:
        case SOQLParser.N_FISCAL_YEARS_AGO:
        case SOQLParser.ID:
            this.state = 323;
            this.group_by_plain_clause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Having_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_having_clause;
    return this;
}

Having_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Having_clauseContext.prototype.constructor = Having_clauseContext;

Having_clauseContext.prototype.HAVING = function() {
    return this.getToken(SOQLParser.HAVING, 0);
};

Having_clauseContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

Having_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterHaving_clause(this);
	}
};

Having_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitHaving_clause(this);
	}
};




SOQLParser.Having_clauseContext = Having_clauseContext;

SOQLParser.prototype.having_clause = function() {

    var localctx = new Having_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SOQLParser.RULE_having_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 326;
        this.match(SOQLParser.HAVING);
        this.state = 327;
        this.condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Orderby_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_orderby_clause;
    return this;
}

Orderby_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Orderby_clauseContext.prototype.constructor = Orderby_clauseContext;

Orderby_clauseContext.prototype.ORDER = function() {
    return this.getToken(SOQLParser.ORDER, 0);
};

Orderby_clauseContext.prototype.BY = function() {
    return this.getToken(SOQLParser.BY, 0);
};

Orderby_clauseContext.prototype.order_by_list = function() {
    return this.getTypedRuleContext(Order_by_listContext,0);
};

Orderby_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterOrderby_clause(this);
	}
};

Orderby_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitOrderby_clause(this);
	}
};




SOQLParser.Orderby_clauseContext = Orderby_clauseContext;

SOQLParser.prototype.orderby_clause = function() {

    var localctx = new Orderby_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SOQLParser.RULE_orderby_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 329;
        this.match(SOQLParser.ORDER);
        this.state = 330;
        this.match(SOQLParser.BY);
        this.state = 331;
        this.order_by_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Limit_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_limit_clause;
    return this;
}

Limit_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Limit_clauseContext.prototype.constructor = Limit_clauseContext;

Limit_clauseContext.prototype.LIMIT = function() {
    return this.getToken(SOQLParser.LIMIT, 0);
};

Limit_clauseContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(SOQLParser.UNSIGNED_INTEGER, 0);
};

Limit_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterLimit_clause(this);
	}
};

Limit_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitLimit_clause(this);
	}
};




SOQLParser.Limit_clauseContext = Limit_clauseContext;

SOQLParser.prototype.limit_clause = function() {

    var localctx = new Limit_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SOQLParser.RULE_limit_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this.match(SOQLParser.LIMIT);
        this.state = 334;
        this.match(SOQLParser.UNSIGNED_INTEGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Offset_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_offset_clause;
    return this;
}

Offset_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Offset_clauseContext.prototype.constructor = Offset_clauseContext;

Offset_clauseContext.prototype.OFFSET = function() {
    return this.getToken(SOQLParser.OFFSET, 0);
};

Offset_clauseContext.prototype.UNSIGNED_INTEGER = function() {
    return this.getToken(SOQLParser.UNSIGNED_INTEGER, 0);
};

Offset_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterOffset_clause(this);
	}
};

Offset_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitOffset_clause(this);
	}
};




SOQLParser.Offset_clauseContext = Offset_clauseContext;

SOQLParser.prototype.offset_clause = function() {

    var localctx = new Offset_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SOQLParser.RULE_offset_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 336;
        this.match(SOQLParser.OFFSET);
        this.state = 337;
        this.match(SOQLParser.UNSIGNED_INTEGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_for_clause;
    return this;
}

For_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_clauseContext.prototype.constructor = For_clauseContext;

For_clauseContext.prototype.FOR = function() {
    return this.getToken(SOQLParser.FOR, 0);
};

For_clauseContext.prototype.for_value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(For_valueContext);
    } else {
        return this.getTypedRuleContext(For_valueContext,i);
    }
};

For_clauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.COMMA);
    } else {
        return this.getToken(SOQLParser.COMMA, i);
    }
};


For_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterFor_clause(this);
	}
};

For_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitFor_clause(this);
	}
};




SOQLParser.For_clauseContext = For_clauseContext;

SOQLParser.prototype.for_clause = function() {

    var localctx = new For_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SOQLParser.RULE_for_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 339;
        this.match(SOQLParser.FOR);
        this.state = 340;
        this.for_value();
        this.state = 343;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        if(la_===1) {
            this.state = 341;
            this.match(SOQLParser.COMMA);
            this.state = 342;
            this.for_value();

        }
        this.state = 347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.COMMA) {
            this.state = 345;
            this.match(SOQLParser.COMMA);
            this.state = 346;
            this.for_value();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_update_clause;
    return this;
}

Update_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_clauseContext.prototype.constructor = Update_clauseContext;

Update_clauseContext.prototype.UPDATE = function() {
    return this.getToken(SOQLParser.UPDATE, 0);
};

Update_clauseContext.prototype.update_value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Update_valueContext);
    } else {
        return this.getTypedRuleContext(Update_valueContext,i);
    }
};

Update_clauseContext.prototype.COMMA = function() {
    return this.getToken(SOQLParser.COMMA, 0);
};

Update_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterUpdate_clause(this);
	}
};

Update_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitUpdate_clause(this);
	}
};




SOQLParser.Update_clauseContext = Update_clauseContext;

SOQLParser.prototype.update_clause = function() {

    var localctx = new Update_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SOQLParser.RULE_update_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 349;
        this.match(SOQLParser.UPDATE);
        this.state = 350;
        this.update_value();
        this.state = 353;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.COMMA) {
            this.state = 351;
            this.match(SOQLParser.COMMA);
            this.state = 352;
            this.update_value();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Soql_subqueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_soql_subquery;
    return this;
}

Soql_subqueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Soql_subqueryContext.prototype.constructor = Soql_subqueryContext;

Soql_subqueryContext.prototype.LPAREN = function() {
    return this.getToken(SOQLParser.LPAREN, 0);
};

Soql_subqueryContext.prototype.subquery_select_clause = function() {
    return this.getTypedRuleContext(Subquery_select_clauseContext,0);
};

Soql_subqueryContext.prototype.from_clause = function() {
    return this.getTypedRuleContext(From_clauseContext,0);
};

Soql_subqueryContext.prototype.RPAREN = function() {
    return this.getToken(SOQLParser.RPAREN, 0);
};

Soql_subqueryContext.prototype.using_clause = function() {
    return this.getTypedRuleContext(Using_clauseContext,0);
};

Soql_subqueryContext.prototype.where_clause = function() {
    return this.getTypedRuleContext(Where_clauseContext,0);
};

Soql_subqueryContext.prototype.with_clause = function() {
    return this.getTypedRuleContext(With_clauseContext,0);
};

Soql_subqueryContext.prototype.orderby_clause = function() {
    return this.getTypedRuleContext(Orderby_clauseContext,0);
};

Soql_subqueryContext.prototype.limit_clause = function() {
    return this.getTypedRuleContext(Limit_clauseContext,0);
};

Soql_subqueryContext.prototype.offset_clause = function() {
    return this.getTypedRuleContext(Offset_clauseContext,0);
};

Soql_subqueryContext.prototype.for_clause = function() {
    return this.getTypedRuleContext(For_clauseContext,0);
};

Soql_subqueryContext.prototype.update_clause = function() {
    return this.getTypedRuleContext(Update_clauseContext,0);
};

Soql_subqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterSoql_subquery(this);
	}
};

Soql_subqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitSoql_subquery(this);
	}
};




SOQLParser.Soql_subqueryContext = Soql_subqueryContext;

SOQLParser.prototype.soql_subquery = function() {

    var localctx = new Soql_subqueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SOQLParser.RULE_soql_subquery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 355;
        this.match(SOQLParser.LPAREN);
        this.state = 356;
        this.subquery_select_clause();
        this.state = 357;
        this.from_clause();
        this.state = 359;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.USING) {
            this.state = 358;
            this.using_clause();
        }

        this.state = 362;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.WHERE) {
            this.state = 361;
            this.where_clause();
        }

        this.state = 365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.WITH) {
            this.state = 364;
            this.with_clause();
        }

        this.state = 368;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.ORDER) {
            this.state = 367;
            this.orderby_clause();
        }

        this.state = 371;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.LIMIT) {
            this.state = 370;
            this.limit_clause();
        }

        this.state = 374;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.OFFSET) {
            this.state = 373;
            this.offset_clause();
        }

        this.state = 377;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.FOR) {
            this.state = 376;
            this.for_clause();
        }

        this.state = 380;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.UPDATE) {
            this.state = 379;
            this.update_clause();
        }

        this.state = 382;
        this.match(SOQLParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subquery_select_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_subquery_select_clause;
    return this;
}

Subquery_select_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subquery_select_clauseContext.prototype.constructor = Subquery_select_clauseContext;

Subquery_select_clauseContext.prototype.SELECT = function() {
    return this.getToken(SOQLParser.SELECT, 0);
};

Subquery_select_clauseContext.prototype.subquery_select_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Subquery_select_specContext);
    } else {
        return this.getTypedRuleContext(Subquery_select_specContext,i);
    }
};

Subquery_select_clauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.COMMA);
    } else {
        return this.getToken(SOQLParser.COMMA, i);
    }
};


Subquery_select_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterSubquery_select_clause(this);
	}
};

Subquery_select_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitSubquery_select_clause(this);
	}
};




SOQLParser.Subquery_select_clauseContext = Subquery_select_clauseContext;

SOQLParser.prototype.subquery_select_clause = function() {

    var localctx = new Subquery_select_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SOQLParser.RULE_subquery_select_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 384;
        this.match(SOQLParser.SELECT);
        this.state = 385;
        this.subquery_select_spec();
        this.state = 390;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SOQLParser.COMMA) {
            this.state = 386;
            this.match(SOQLParser.COMMA);
            this.state = 387;
            this.subquery_select_spec();
            this.state = 392;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Select_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_select_spec;
    return this;
}

Select_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Select_specContext.prototype.constructor = Select_specContext;

Select_specContext.prototype.field_spec = function() {
    return this.getTypedRuleContext(Field_specContext,0);
};

Select_specContext.prototype.function_call_spec = function() {
    return this.getTypedRuleContext(Function_call_specContext,0);
};

Select_specContext.prototype.soql_subquery = function() {
    return this.getTypedRuleContext(Soql_subqueryContext,0);
};

Select_specContext.prototype.typeof_spec = function() {
    return this.getTypedRuleContext(Typeof_specContext,0);
};

Select_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterSelect_spec(this);
	}
};

Select_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitSelect_spec(this);
	}
};




SOQLParser.Select_specContext = Select_specContext;

SOQLParser.prototype.select_spec = function() {

    var localctx = new Select_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SOQLParser.RULE_select_spec);
    try {
        this.state = 397;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 393;
            this.field_spec();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 394;
            this.function_call_spec();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 395;
            this.soql_subquery();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 396;
            this.typeof_spec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subquery_select_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_subquery_select_spec;
    return this;
}

Subquery_select_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subquery_select_specContext.prototype.constructor = Subquery_select_specContext;

Subquery_select_specContext.prototype.field_spec = function() {
    return this.getTypedRuleContext(Field_specContext,0);
};

Subquery_select_specContext.prototype.function_call_spec = function() {
    return this.getTypedRuleContext(Function_call_specContext,0);
};

Subquery_select_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterSubquery_select_spec(this);
	}
};

Subquery_select_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitSubquery_select_spec(this);
	}
};




SOQLParser.Subquery_select_specContext = Subquery_select_specContext;

SOQLParser.prototype.subquery_select_spec = function() {

    var localctx = new Subquery_select_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SOQLParser.RULE_subquery_select_spec);
    try {
        this.state = 401;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 399;
            this.field_spec();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 400;
            this.function_call_spec();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_field_spec;
    return this;
}

Field_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_specContext.prototype.constructor = Field_specContext;

Field_specContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

Field_specContext.prototype.alias = function() {
    return this.getTypedRuleContext(AliasContext,0);
};

Field_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterField_spec(this);
	}
};

Field_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitField_spec(this);
	}
};




SOQLParser.Field_specContext = Field_specContext;

SOQLParser.prototype.field_spec = function() {

    var localctx = new Field_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SOQLParser.RULE_field_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 403;
        this.field();
        this.state = 405;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.AS || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (SOQLParser.ABOVE - 34)) | (1 << (SOQLParser.ABOVE_OR_BELOW - 34)) | (1 << (SOQLParser.AT - 34)) | (1 << (SOQLParser.BELOW - 34)) | (1 << (SOQLParser.CATEGORY - 34)) | (1 << (SOQLParser.DATA - 34)) | (1 << (SOQLParser.END - 34)) | (1 << (SOQLParser.OFFSET - 34)) | (1 << (SOQLParser.ORDER - 34)) | (1 << (SOQLParser.REFERENCE - 34)) | (1 << (SOQLParser.SCOPE - 34)) | (1 << (SOQLParser.TRACKING - 34)) | (1 << (SOQLParser.THEN - 34)) | (1 << (SOQLParser.TYPEOF - 34)) | (1 << (SOQLParser.VIEW - 34)) | (1 << (SOQLParser.VIEWSTAT - 34)) | (1 << (SOQLParser.WHEN - 34)) | (1 << (SOQLParser.CALENDAR_MONTH - 34)) | (1 << (SOQLParser.CALENDAR_QUARTER - 34)) | (1 << (SOQLParser.CALENDAR_YEAR - 34)) | (1 << (SOQLParser.DAY_IN_MONTH - 34)) | (1 << (SOQLParser.DAY_IN_WEEK - 34)) | (1 << (SOQLParser.DAY_IN_YEAR - 34)) | (1 << (SOQLParser.DAY_ONLY - 34)) | (1 << (SOQLParser.FISCAL_MONTH - 34)) | (1 << (SOQLParser.FISCAL_QUARTER - 34)) | (1 << (SOQLParser.FISCAL_YEAR - 34)) | (1 << (SOQLParser.HOUR_IN_DAY - 34)) | (1 << (SOQLParser.WEEK_IN_MONTH - 34)) | (1 << (SOQLParser.WEEK_IN_YEAR - 34)) | (1 << (SOQLParser.AVG - 34)) | (1 << (SOQLParser.COUNT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (SOQLParser.COUNT_DISTINCT - 66)) | (1 << (SOQLParser.MIN - 66)) | (1 << (SOQLParser.MAX - 66)) | (1 << (SOQLParser.SUM - 66)) | (1 << (SOQLParser.DISTANCE - 66)) | (1 << (SOQLParser.GEOLOCATION - 66)) | (1 << (SOQLParser.FORMAT - 66)) | (1 << (SOQLParser.TOLABEL - 66)) | (1 << (SOQLParser.CONVERT_TIME_ZONE - 66)) | (1 << (SOQLParser.CONVERT_CURRENCY - 66)) | (1 << (SOQLParser.GROUPING - 66)) | (1 << (SOQLParser.YESTERDAY - 66)) | (1 << (SOQLParser.TODAY - 66)) | (1 << (SOQLParser.TOMORROW - 66)) | (1 << (SOQLParser.LAST_WEEK - 66)) | (1 << (SOQLParser.THIS_WEEK - 66)) | (1 << (SOQLParser.NEXT_WEEK - 66)) | (1 << (SOQLParser.LAST_MONTH - 66)) | (1 << (SOQLParser.THIS_MONTH - 66)) | (1 << (SOQLParser.NEXT_MONTH - 66)) | (1 << (SOQLParser.LAST_90_DAYS - 66)) | (1 << (SOQLParser.NEXT_90_DAYS - 66)) | (1 << (SOQLParser.THIS_QUARTER - 66)) | (1 << (SOQLParser.LAST_QUARTER - 66)) | (1 << (SOQLParser.NEXT_QUARTER - 66)) | (1 << (SOQLParser.THIS_YEAR - 66)) | (1 << (SOQLParser.LAST_YEAR - 66)) | (1 << (SOQLParser.NEXT_YEAR - 66)) | (1 << (SOQLParser.THIS_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.LAST_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.NEXT_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.THIS_FISCAL_YEAR - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (SOQLParser.LAST_FISCAL_YEAR - 98)) | (1 << (SOQLParser.NEXT_FISCAL_YEAR - 98)) | (1 << (SOQLParser.NEXT_N_DAYS - 98)) | (1 << (SOQLParser.LAST_N_DAYS - 98)) | (1 << (SOQLParser.N_DAYS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_WEEKS - 98)) | (1 << (SOQLParser.LAST_N_WEEKS - 98)) | (1 << (SOQLParser.N_WEEKS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_MONTHS - 98)) | (1 << (SOQLParser.LAST_N_MONTHS - 98)) | (1 << (SOQLParser.N_MONTHS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_QUARTERS - 98)) | (1 << (SOQLParser.LAST_N_QUARTERS - 98)) | (1 << (SOQLParser.N_QUARTERS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_YEARS - 98)) | (1 << (SOQLParser.LAST_N_YEARS - 98)) | (1 << (SOQLParser.N_YEARS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_FISCAL_QUARTERS - 98)) | (1 << (SOQLParser.LAST_N_FISCAL_QUARTERS - 98)) | (1 << (SOQLParser.N_FISCAL_QUARTERS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_FISCAL_YEARS - 98)) | (1 << (SOQLParser.LAST_N_FISCAL_YEARS - 98)) | (1 << (SOQLParser.N_FISCAL_YEARS_AGO - 98)))) !== 0) || _la===SOQLParser.ID) {
            this.state = 404;
            this.alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_call_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_function_call_spec;
    return this;
}

Function_call_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_call_specContext.prototype.constructor = Function_call_specContext;

Function_call_specContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

Function_call_specContext.prototype.alias = function() {
    return this.getTypedRuleContext(AliasContext,0);
};

Function_call_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterFunction_call_spec(this);
	}
};

Function_call_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitFunction_call_spec(this);
	}
};




SOQLParser.Function_call_specContext = Function_call_specContext;

SOQLParser.prototype.function_call_spec = function() {

    var localctx = new Function_call_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SOQLParser.RULE_function_call_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 407;
        this.function_call();
        this.state = 409;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.AS || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (SOQLParser.ABOVE - 34)) | (1 << (SOQLParser.ABOVE_OR_BELOW - 34)) | (1 << (SOQLParser.AT - 34)) | (1 << (SOQLParser.BELOW - 34)) | (1 << (SOQLParser.CATEGORY - 34)) | (1 << (SOQLParser.DATA - 34)) | (1 << (SOQLParser.END - 34)) | (1 << (SOQLParser.OFFSET - 34)) | (1 << (SOQLParser.ORDER - 34)) | (1 << (SOQLParser.REFERENCE - 34)) | (1 << (SOQLParser.SCOPE - 34)) | (1 << (SOQLParser.TRACKING - 34)) | (1 << (SOQLParser.THEN - 34)) | (1 << (SOQLParser.TYPEOF - 34)) | (1 << (SOQLParser.VIEW - 34)) | (1 << (SOQLParser.VIEWSTAT - 34)) | (1 << (SOQLParser.WHEN - 34)) | (1 << (SOQLParser.CALENDAR_MONTH - 34)) | (1 << (SOQLParser.CALENDAR_QUARTER - 34)) | (1 << (SOQLParser.CALENDAR_YEAR - 34)) | (1 << (SOQLParser.DAY_IN_MONTH - 34)) | (1 << (SOQLParser.DAY_IN_WEEK - 34)) | (1 << (SOQLParser.DAY_IN_YEAR - 34)) | (1 << (SOQLParser.DAY_ONLY - 34)) | (1 << (SOQLParser.FISCAL_MONTH - 34)) | (1 << (SOQLParser.FISCAL_QUARTER - 34)) | (1 << (SOQLParser.FISCAL_YEAR - 34)) | (1 << (SOQLParser.HOUR_IN_DAY - 34)) | (1 << (SOQLParser.WEEK_IN_MONTH - 34)) | (1 << (SOQLParser.WEEK_IN_YEAR - 34)) | (1 << (SOQLParser.AVG - 34)) | (1 << (SOQLParser.COUNT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (SOQLParser.COUNT_DISTINCT - 66)) | (1 << (SOQLParser.MIN - 66)) | (1 << (SOQLParser.MAX - 66)) | (1 << (SOQLParser.SUM - 66)) | (1 << (SOQLParser.DISTANCE - 66)) | (1 << (SOQLParser.GEOLOCATION - 66)) | (1 << (SOQLParser.FORMAT - 66)) | (1 << (SOQLParser.TOLABEL - 66)) | (1 << (SOQLParser.CONVERT_TIME_ZONE - 66)) | (1 << (SOQLParser.CONVERT_CURRENCY - 66)) | (1 << (SOQLParser.GROUPING - 66)) | (1 << (SOQLParser.YESTERDAY - 66)) | (1 << (SOQLParser.TODAY - 66)) | (1 << (SOQLParser.TOMORROW - 66)) | (1 << (SOQLParser.LAST_WEEK - 66)) | (1 << (SOQLParser.THIS_WEEK - 66)) | (1 << (SOQLParser.NEXT_WEEK - 66)) | (1 << (SOQLParser.LAST_MONTH - 66)) | (1 << (SOQLParser.THIS_MONTH - 66)) | (1 << (SOQLParser.NEXT_MONTH - 66)) | (1 << (SOQLParser.LAST_90_DAYS - 66)) | (1 << (SOQLParser.NEXT_90_DAYS - 66)) | (1 << (SOQLParser.THIS_QUARTER - 66)) | (1 << (SOQLParser.LAST_QUARTER - 66)) | (1 << (SOQLParser.NEXT_QUARTER - 66)) | (1 << (SOQLParser.THIS_YEAR - 66)) | (1 << (SOQLParser.LAST_YEAR - 66)) | (1 << (SOQLParser.NEXT_YEAR - 66)) | (1 << (SOQLParser.THIS_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.LAST_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.NEXT_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.THIS_FISCAL_YEAR - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (SOQLParser.LAST_FISCAL_YEAR - 98)) | (1 << (SOQLParser.NEXT_FISCAL_YEAR - 98)) | (1 << (SOQLParser.NEXT_N_DAYS - 98)) | (1 << (SOQLParser.LAST_N_DAYS - 98)) | (1 << (SOQLParser.N_DAYS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_WEEKS - 98)) | (1 << (SOQLParser.LAST_N_WEEKS - 98)) | (1 << (SOQLParser.N_WEEKS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_MONTHS - 98)) | (1 << (SOQLParser.LAST_N_MONTHS - 98)) | (1 << (SOQLParser.N_MONTHS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_QUARTERS - 98)) | (1 << (SOQLParser.LAST_N_QUARTERS - 98)) | (1 << (SOQLParser.N_QUARTERS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_YEARS - 98)) | (1 << (SOQLParser.LAST_N_YEARS - 98)) | (1 << (SOQLParser.N_YEARS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_FISCAL_QUARTERS - 98)) | (1 << (SOQLParser.LAST_N_FISCAL_QUARTERS - 98)) | (1 << (SOQLParser.N_FISCAL_QUARTERS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_FISCAL_YEARS - 98)) | (1 << (SOQLParser.LAST_N_FISCAL_YEARS - 98)) | (1 << (SOQLParser.N_FISCAL_YEARS_AGO - 98)))) !== 0) || _la===SOQLParser.ID) {
            this.state = 408;
            this.alias();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_field;
    return this;
}

FieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldContext.prototype.constructor = FieldContext;

FieldContext.prototype.field_name = function() {
    return this.getTypedRuleContext(Field_nameContext,0);
};

FieldContext.prototype.object_prefix = function() {
    return this.getTypedRuleContext(Object_prefixContext,0);
};

FieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterField(this);
	}
};

FieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitField(this);
	}
};




SOQLParser.FieldContext = FieldContext;

SOQLParser.prototype.field = function() {

    var localctx = new FieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SOQLParser.RULE_field);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 412;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        if(la_===1) {
            this.state = 411;
            this.object_prefix();

        }
        this.state = 414;
        this.field_name();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_callContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_function_call;
    return this;
}

Function_callContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_callContext.prototype.constructor = Function_callContext;

Function_callContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Function_callContext.prototype.LPAREN = function() {
    return this.getToken(SOQLParser.LPAREN, 0);
};

Function_callContext.prototype.RPAREN = function() {
    return this.getToken(SOQLParser.RPAREN, 0);
};

Function_callContext.prototype.function_parameter_list = function() {
    return this.getTypedRuleContext(Function_parameter_listContext,0);
};

Function_callContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterFunction_call(this);
	}
};

Function_callContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitFunction_call(this);
	}
};




SOQLParser.Function_callContext = Function_callContext;

SOQLParser.prototype.function_call = function() {

    var localctx = new Function_callContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SOQLParser.RULE_function_call);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 416;
        this.function_name();
        this.state = 417;
        this.match(SOQLParser.LPAREN);
        this.state = 419;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SOQLParser.STRING_VALUE) | (1 << SOQLParser.FALSE) | (1 << SOQLParser.GROUP) | (1 << SOQLParser.NULL) | (1 << SOQLParser.TRUE))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (SOQLParser.ABOVE - 34)) | (1 << (SOQLParser.ABOVE_OR_BELOW - 34)) | (1 << (SOQLParser.AT - 34)) | (1 << (SOQLParser.BELOW - 34)) | (1 << (SOQLParser.CATEGORY - 34)) | (1 << (SOQLParser.DATA - 34)) | (1 << (SOQLParser.END - 34)) | (1 << (SOQLParser.OFFSET - 34)) | (1 << (SOQLParser.ORDER - 34)) | (1 << (SOQLParser.REFERENCE - 34)) | (1 << (SOQLParser.SCOPE - 34)) | (1 << (SOQLParser.TRACKING - 34)) | (1 << (SOQLParser.THEN - 34)) | (1 << (SOQLParser.TYPEOF - 34)) | (1 << (SOQLParser.VIEW - 34)) | (1 << (SOQLParser.VIEWSTAT - 34)) | (1 << (SOQLParser.WHEN - 34)) | (1 << (SOQLParser.CALENDAR_MONTH - 34)) | (1 << (SOQLParser.CALENDAR_QUARTER - 34)) | (1 << (SOQLParser.CALENDAR_YEAR - 34)) | (1 << (SOQLParser.DAY_IN_MONTH - 34)) | (1 << (SOQLParser.DAY_IN_WEEK - 34)) | (1 << (SOQLParser.DAY_IN_YEAR - 34)) | (1 << (SOQLParser.DAY_ONLY - 34)) | (1 << (SOQLParser.FISCAL_MONTH - 34)) | (1 << (SOQLParser.FISCAL_QUARTER - 34)) | (1 << (SOQLParser.FISCAL_YEAR - 34)) | (1 << (SOQLParser.HOUR_IN_DAY - 34)) | (1 << (SOQLParser.WEEK_IN_MONTH - 34)) | (1 << (SOQLParser.WEEK_IN_YEAR - 34)) | (1 << (SOQLParser.AVG - 34)) | (1 << (SOQLParser.COUNT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (SOQLParser.COUNT_DISTINCT - 66)) | (1 << (SOQLParser.MIN - 66)) | (1 << (SOQLParser.MAX - 66)) | (1 << (SOQLParser.SUM - 66)) | (1 << (SOQLParser.DISTANCE - 66)) | (1 << (SOQLParser.GEOLOCATION - 66)) | (1 << (SOQLParser.FORMAT - 66)) | (1 << (SOQLParser.TOLABEL - 66)) | (1 << (SOQLParser.CONVERT_TIME_ZONE - 66)) | (1 << (SOQLParser.CONVERT_CURRENCY - 66)) | (1 << (SOQLParser.GROUPING - 66)) | (1 << (SOQLParser.YESTERDAY - 66)) | (1 << (SOQLParser.TODAY - 66)) | (1 << (SOQLParser.TOMORROW - 66)) | (1 << (SOQLParser.LAST_WEEK - 66)) | (1 << (SOQLParser.THIS_WEEK - 66)) | (1 << (SOQLParser.NEXT_WEEK - 66)) | (1 << (SOQLParser.LAST_MONTH - 66)) | (1 << (SOQLParser.THIS_MONTH - 66)) | (1 << (SOQLParser.NEXT_MONTH - 66)) | (1 << (SOQLParser.LAST_90_DAYS - 66)) | (1 << (SOQLParser.NEXT_90_DAYS - 66)) | (1 << (SOQLParser.THIS_QUARTER - 66)) | (1 << (SOQLParser.LAST_QUARTER - 66)) | (1 << (SOQLParser.NEXT_QUARTER - 66)) | (1 << (SOQLParser.THIS_YEAR - 66)) | (1 << (SOQLParser.LAST_YEAR - 66)) | (1 << (SOQLParser.NEXT_YEAR - 66)) | (1 << (SOQLParser.THIS_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.LAST_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.NEXT_FISCAL_QUARTER - 66)) | (1 << (SOQLParser.THIS_FISCAL_YEAR - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (SOQLParser.LAST_FISCAL_YEAR - 98)) | (1 << (SOQLParser.NEXT_FISCAL_YEAR - 98)) | (1 << (SOQLParser.NEXT_N_DAYS - 98)) | (1 << (SOQLParser.LAST_N_DAYS - 98)) | (1 << (SOQLParser.N_DAYS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_WEEKS - 98)) | (1 << (SOQLParser.LAST_N_WEEKS - 98)) | (1 << (SOQLParser.N_WEEKS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_MONTHS - 98)) | (1 << (SOQLParser.LAST_N_MONTHS - 98)) | (1 << (SOQLParser.N_MONTHS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_QUARTERS - 98)) | (1 << (SOQLParser.LAST_N_QUARTERS - 98)) | (1 << (SOQLParser.N_QUARTERS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_YEARS - 98)) | (1 << (SOQLParser.LAST_N_YEARS - 98)) | (1 << (SOQLParser.N_YEARS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_FISCAL_QUARTERS - 98)) | (1 << (SOQLParser.LAST_N_FISCAL_QUARTERS - 98)) | (1 << (SOQLParser.N_FISCAL_QUARTERS_AGO - 98)) | (1 << (SOQLParser.NEXT_N_FISCAL_YEARS - 98)) | (1 << (SOQLParser.LAST_N_FISCAL_YEARS - 98)) | (1 << (SOQLParser.N_FISCAL_YEARS_AGO - 98)))) !== 0) || ((((_la - 136)) & ~0x1f) == 0 && ((1 << (_la - 136)) & ((1 << (SOQLParser.ID - 136)) | (1 << (SOQLParser.DATE - 136)) | (1 << (SOQLParser.DATETIME - 136)) | (1 << (SOQLParser.UNSIGNED_INTEGER - 136)) | (1 << (SOQLParser.REAL_NUMBER - 136)) | (1 << (SOQLParser.SIGNED_INTEGER - 136)))) !== 0)) {
            this.state = 418;
            this.function_parameter_list();
        }

        this.state = 421;
        this.match(SOQLParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_parameter_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_function_parameter_list;
    return this;
}

Function_parameter_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_parameter_listContext.prototype.constructor = Function_parameter_listContext;

Function_parameter_listContext.prototype.function_parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Function_parameterContext);
    } else {
        return this.getTypedRuleContext(Function_parameterContext,i);
    }
};

Function_parameter_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.COMMA);
    } else {
        return this.getToken(SOQLParser.COMMA, i);
    }
};


Function_parameter_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterFunction_parameter_list(this);
	}
};

Function_parameter_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitFunction_parameter_list(this);
	}
};




SOQLParser.Function_parameter_listContext = Function_parameter_listContext;

SOQLParser.prototype.function_parameter_list = function() {

    var localctx = new Function_parameter_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SOQLParser.RULE_function_parameter_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 423;
        this.function_parameter();
        this.state = 428;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SOQLParser.COMMA) {
            this.state = 424;
            this.match(SOQLParser.COMMA);
            this.state = 425;
            this.function_parameter();
            this.state = 430;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Function_parameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_function_parameter;
    return this;
}

Function_parameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Function_parameterContext.prototype.constructor = Function_parameterContext;

Function_parameterContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

Function_parameterContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

Function_parameterContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

Function_parameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterFunction_parameter(this);
	}
};

Function_parameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitFunction_parameter(this);
	}
};




SOQLParser.Function_parameterContext = Function_parameterContext;

SOQLParser.prototype.function_parameter = function() {

    var localctx = new Function_parameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SOQLParser.RULE_function_parameter);
    try {
        this.state = 434;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 431;
            this.field();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 432;
            this.literal();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 433;
            this.function_call();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Typeof_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_typeof_spec;
    return this;
}

Typeof_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typeof_specContext.prototype.constructor = Typeof_specContext;

Typeof_specContext.prototype.TYPEOF = function() {
    return this.getToken(SOQLParser.TYPEOF, 0);
};

Typeof_specContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

Typeof_specContext.prototype.typeof_when_then_clause_list = function() {
    return this.getTypedRuleContext(Typeof_when_then_clause_listContext,0);
};

Typeof_specContext.prototype.END = function() {
    return this.getToken(SOQLParser.END, 0);
};

Typeof_specContext.prototype.typeof_else_clause = function() {
    return this.getTypedRuleContext(Typeof_else_clauseContext,0);
};

Typeof_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterTypeof_spec(this);
	}
};

Typeof_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitTypeof_spec(this);
	}
};




SOQLParser.Typeof_specContext = Typeof_specContext;

SOQLParser.prototype.typeof_spec = function() {

    var localctx = new Typeof_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SOQLParser.RULE_typeof_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 436;
        this.match(SOQLParser.TYPEOF);
        this.state = 437;
        this.field();
        this.state = 438;
        this.typeof_when_then_clause_list();
        this.state = 440;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.ELSE) {
            this.state = 439;
            this.typeof_else_clause();
        }

        this.state = 442;
        this.match(SOQLParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Typeof_when_then_clause_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_typeof_when_then_clause_list;
    return this;
}

Typeof_when_then_clause_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typeof_when_then_clause_listContext.prototype.constructor = Typeof_when_then_clause_listContext;

Typeof_when_then_clause_listContext.prototype.typeof_when_then_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Typeof_when_then_clauseContext);
    } else {
        return this.getTypedRuleContext(Typeof_when_then_clauseContext,i);
    }
};

Typeof_when_then_clause_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterTypeof_when_then_clause_list(this);
	}
};

Typeof_when_then_clause_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitTypeof_when_then_clause_list(this);
	}
};




SOQLParser.Typeof_when_then_clause_listContext = Typeof_when_then_clause_listContext;

SOQLParser.prototype.typeof_when_then_clause_list = function() {

    var localctx = new Typeof_when_then_clause_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SOQLParser.RULE_typeof_when_then_clause_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 445; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 444;
            this.typeof_when_then_clause();
            this.state = 447; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SOQLParser.WHEN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Typeof_when_then_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_typeof_when_then_clause;
    return this;
}

Typeof_when_then_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typeof_when_then_clauseContext.prototype.constructor = Typeof_when_then_clauseContext;

Typeof_when_then_clauseContext.prototype.WHEN = function() {
    return this.getToken(SOQLParser.WHEN, 0);
};

Typeof_when_then_clauseContext.prototype.object_name = function() {
    return this.getTypedRuleContext(Object_nameContext,0);
};

Typeof_when_then_clauseContext.prototype.typeof_then_clause = function() {
    return this.getTypedRuleContext(Typeof_then_clauseContext,0);
};

Typeof_when_then_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterTypeof_when_then_clause(this);
	}
};

Typeof_when_then_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitTypeof_when_then_clause(this);
	}
};




SOQLParser.Typeof_when_then_clauseContext = Typeof_when_then_clauseContext;

SOQLParser.prototype.typeof_when_then_clause = function() {

    var localctx = new Typeof_when_then_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SOQLParser.RULE_typeof_when_then_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 449;
        this.match(SOQLParser.WHEN);
        this.state = 450;
        this.object_name();
        this.state = 451;
        this.typeof_then_clause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Typeof_then_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_typeof_then_clause;
    return this;
}

Typeof_then_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typeof_then_clauseContext.prototype.constructor = Typeof_then_clauseContext;

Typeof_then_clauseContext.prototype.THEN = function() {
    return this.getToken(SOQLParser.THEN, 0);
};

Typeof_then_clauseContext.prototype.field_list = function() {
    return this.getTypedRuleContext(Field_listContext,0);
};

Typeof_then_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterTypeof_then_clause(this);
	}
};

Typeof_then_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitTypeof_then_clause(this);
	}
};




SOQLParser.Typeof_then_clauseContext = Typeof_then_clauseContext;

SOQLParser.prototype.typeof_then_clause = function() {

    var localctx = new Typeof_then_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SOQLParser.RULE_typeof_then_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 453;
        this.match(SOQLParser.THEN);
        this.state = 454;
        this.field_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Typeof_else_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_typeof_else_clause;
    return this;
}

Typeof_else_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Typeof_else_clauseContext.prototype.constructor = Typeof_else_clauseContext;

Typeof_else_clauseContext.prototype.ELSE = function() {
    return this.getToken(SOQLParser.ELSE, 0);
};

Typeof_else_clauseContext.prototype.field_list = function() {
    return this.getTypedRuleContext(Field_listContext,0);
};

Typeof_else_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterTypeof_else_clause(this);
	}
};

Typeof_else_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitTypeof_else_clause(this);
	}
};




SOQLParser.Typeof_else_clauseContext = Typeof_else_clauseContext;

SOQLParser.prototype.typeof_else_clause = function() {

    var localctx = new Typeof_else_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SOQLParser.RULE_typeof_else_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 456;
        this.match(SOQLParser.ELSE);
        this.state = 457;
        this.field_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_field_list;
    return this;
}

Field_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_listContext.prototype.constructor = Field_listContext;

Field_listContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

Field_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.COMMA);
    } else {
        return this.getToken(SOQLParser.COMMA, i);
    }
};


Field_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterField_list(this);
	}
};

Field_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitField_list(this);
	}
};




SOQLParser.Field_listContext = Field_listContext;

SOQLParser.prototype.field_list = function() {

    var localctx = new Field_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SOQLParser.RULE_field_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 459;
        this.field();
        this.state = 464;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SOQLParser.COMMA) {
            this.state = 460;
            this.match(SOQLParser.COMMA);
            this.state = 461;
            this.field();
            this.state = 466;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_object_spec;
    return this;
}

Object_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_specContext.prototype.constructor = Object_specContext;

Object_specContext.prototype.object_name = function() {
    return this.getTypedRuleContext(Object_nameContext,0);
};

Object_specContext.prototype.object_prefix = function() {
    return this.getTypedRuleContext(Object_prefixContext,0);
};

Object_specContext.prototype.alias = function() {
    return this.getTypedRuleContext(AliasContext,0);
};

Object_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterObject_spec(this);
	}
};

Object_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitObject_spec(this);
	}
};




SOQLParser.Object_specContext = Object_specContext;

SOQLParser.prototype.object_spec = function() {

    var localctx = new Object_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SOQLParser.RULE_object_spec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 468;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        if(la_===1) {
            this.state = 467;
            this.object_prefix();

        }
        this.state = 470;
        this.object_name();
        this.state = 472;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        if(la_===1) {
            this.state = 471;
            this.alias();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Object_prefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_object_prefix;
    return this;
}

Object_prefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Object_prefixContext.prototype.constructor = Object_prefixContext;

Object_prefixContext.prototype.object_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Object_nameContext);
    } else {
        return this.getTypedRuleContext(Object_nameContext,i);
    }
};

Object_prefixContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.DOT);
    } else {
        return this.getToken(SOQLParser.DOT, i);
    }
};


Object_prefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterObject_prefix(this);
	}
};

Object_prefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitObject_prefix(this);
	}
};




SOQLParser.Object_prefixContext = Object_prefixContext;

SOQLParser.prototype.object_prefix = function() {

    var localctx = new Object_prefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SOQLParser.RULE_object_prefix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 477; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 474;
        		this.object_name();
        		this.state = 475;
        		this.match(SOQLParser.DOT);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 479; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,44, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comparison_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_comparison_operator;
    return this;
}

Comparison_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comparison_operatorContext.prototype.constructor = Comparison_operatorContext;

Comparison_operatorContext.prototype.EQ = function() {
    return this.getToken(SOQLParser.EQ, 0);
};

Comparison_operatorContext.prototype.NOT_EQ = function() {
    return this.getToken(SOQLParser.NOT_EQ, 0);
};

Comparison_operatorContext.prototype.LET = function() {
    return this.getToken(SOQLParser.LET, 0);
};

Comparison_operatorContext.prototype.GET = function() {
    return this.getToken(SOQLParser.GET, 0);
};

Comparison_operatorContext.prototype.GTH = function() {
    return this.getToken(SOQLParser.GTH, 0);
};

Comparison_operatorContext.prototype.LTH = function() {
    return this.getToken(SOQLParser.LTH, 0);
};

Comparison_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterComparison_operator(this);
	}
};

Comparison_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitComparison_operator(this);
	}
};




SOQLParser.Comparison_operatorContext = Comparison_operatorContext;

SOQLParser.prototype.comparison_operator = function() {

    var localctx = new Comparison_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SOQLParser.RULE_comparison_operator);
    try {
        this.state = 491;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 481;
            this.match(SOQLParser.EQ);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 482;
            this.match(SOQLParser.NOT_EQ);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 483;
            this.match(SOQLParser.LET);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 484;
            this.match(SOQLParser.GET);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 485;
            this.match(SOQLParser.GTH);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 486;
            this.match(SOQLParser.LTH);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 487;
            this.match(SOQLParser.GTH);
            this.state = 488;
            this.match(SOQLParser.EQ);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 489;
            this.match(SOQLParser.LTH);
            this.state = 490;
            this.match(SOQLParser.EQ);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_operatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_set_operator;
    return this;
}

Set_operatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_operatorContext.prototype.constructor = Set_operatorContext;

Set_operatorContext.prototype.IN = function() {
    return this.getToken(SOQLParser.IN, 0);
};

Set_operatorContext.prototype.NOT = function() {
    return this.getToken(SOQLParser.NOT, 0);
};

Set_operatorContext.prototype.INCLUDES = function() {
    return this.getToken(SOQLParser.INCLUDES, 0);
};

Set_operatorContext.prototype.EXCLUDES = function() {
    return this.getToken(SOQLParser.EXCLUDES, 0);
};

Set_operatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterSet_operator(this);
	}
};

Set_operatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitSet_operator(this);
	}
};




SOQLParser.Set_operatorContext = Set_operatorContext;

SOQLParser.prototype.set_operator = function() {

    var localctx = new Set_operatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SOQLParser.RULE_set_operator);
    try {
        this.state = 498;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SOQLParser.IN:
            this.enterOuterAlt(localctx, 1);
            this.state = 493;
            this.match(SOQLParser.IN);
            break;
        case SOQLParser.NOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 494;
            this.match(SOQLParser.NOT);
            this.state = 495;
            this.match(SOQLParser.IN);
            break;
        case SOQLParser.INCLUDES:
            this.enterOuterAlt(localctx, 3);
            this.state = 496;
            this.match(SOQLParser.INCLUDES);
            break;
        case SOQLParser.EXCLUDES:
            this.enterOuterAlt(localctx, 4);
            this.state = 497;
            this.match(SOQLParser.EXCLUDES);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_condition;
    return this;
}

ConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionContext.prototype.constructor = ConditionContext;

ConditionContext.prototype.condition1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Condition1Context);
    } else {
        return this.getTypedRuleContext(Condition1Context,i);
    }
};

ConditionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.OR);
    } else {
        return this.getToken(SOQLParser.OR, i);
    }
};


ConditionContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.AND);
    } else {
        return this.getToken(SOQLParser.AND, i);
    }
};


ConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterCondition(this);
	}
};

ConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitCondition(this);
	}
};




SOQLParser.ConditionContext = ConditionContext;

SOQLParser.prototype.condition = function() {

    var localctx = new ConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SOQLParser.RULE_condition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        this.condition1();
        this.state = 505;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SOQLParser.AND || _la===SOQLParser.OR) {
            this.state = 501;
            _la = this._input.LA(1);
            if(!(_la===SOQLParser.AND || _la===SOQLParser.OR)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 502;
            this.condition1();
            this.state = 507;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Condition1Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_condition1;
    return this;
}

Condition1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Condition1Context.prototype.constructor = Condition1Context;

Condition1Context.prototype.simple_condition = function() {
    return this.getTypedRuleContext(Simple_conditionContext,0);
};

Condition1Context.prototype.parenthesis = function() {
    return this.getTypedRuleContext(ParenthesisContext,0);
};

Condition1Context.prototype.NOT = function() {
    return this.getToken(SOQLParser.NOT, 0);
};

Condition1Context.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterCondition1(this);
	}
};

Condition1Context.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitCondition1(this);
	}
};




SOQLParser.Condition1Context = Condition1Context;

SOQLParser.prototype.condition1 = function() {

    var localctx = new Condition1Context(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SOQLParser.RULE_condition1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 509;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.NOT) {
            this.state = 508;
            this.match(SOQLParser.NOT);
        }

        this.state = 513;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SOQLParser.GROUP:
        case SOQLParser.ABOVE:
        case SOQLParser.ABOVE_OR_BELOW:
        case SOQLParser.AT:
        case SOQLParser.BELOW:
        case SOQLParser.CATEGORY:
        case SOQLParser.DATA:
        case SOQLParser.END:
        case SOQLParser.OFFSET:
        case SOQLParser.ORDER:
        case SOQLParser.REFERENCE:
        case SOQLParser.SCOPE:
        case SOQLParser.TRACKING:
        case SOQLParser.THEN:
        case SOQLParser.TYPEOF:
        case SOQLParser.VIEW:
        case SOQLParser.VIEWSTAT:
        case SOQLParser.WHEN:
        case SOQLParser.CALENDAR_MONTH:
        case SOQLParser.CALENDAR_QUARTER:
        case SOQLParser.CALENDAR_YEAR:
        case SOQLParser.DAY_IN_MONTH:
        case SOQLParser.DAY_IN_WEEK:
        case SOQLParser.DAY_IN_YEAR:
        case SOQLParser.DAY_ONLY:
        case SOQLParser.FISCAL_MONTH:
        case SOQLParser.FISCAL_QUARTER:
        case SOQLParser.FISCAL_YEAR:
        case SOQLParser.HOUR_IN_DAY:
        case SOQLParser.WEEK_IN_MONTH:
        case SOQLParser.WEEK_IN_YEAR:
        case SOQLParser.AVG:
        case SOQLParser.COUNT:
        case SOQLParser.COUNT_DISTINCT:
        case SOQLParser.MIN:
        case SOQLParser.MAX:
        case SOQLParser.SUM:
        case SOQLParser.DISTANCE:
        case SOQLParser.GEOLOCATION:
        case SOQLParser.FORMAT:
        case SOQLParser.TOLABEL:
        case SOQLParser.CONVERT_TIME_ZONE:
        case SOQLParser.CONVERT_CURRENCY:
        case SOQLParser.GROUPING:
        case SOQLParser.YESTERDAY:
        case SOQLParser.TODAY:
        case SOQLParser.TOMORROW:
        case SOQLParser.LAST_WEEK:
        case SOQLParser.THIS_WEEK:
        case SOQLParser.NEXT_WEEK:
        case SOQLParser.LAST_MONTH:
        case SOQLParser.THIS_MONTH:
        case SOQLParser.NEXT_MONTH:
        case SOQLParser.LAST_90_DAYS:
        case SOQLParser.NEXT_90_DAYS:
        case SOQLParser.THIS_QUARTER:
        case SOQLParser.LAST_QUARTER:
        case SOQLParser.NEXT_QUARTER:
        case SOQLParser.THIS_YEAR:
        case SOQLParser.LAST_YEAR:
        case SOQLParser.NEXT_YEAR:
        case SOQLParser.THIS_FISCAL_QUARTER:
        case SOQLParser.LAST_FISCAL_QUARTER:
        case SOQLParser.NEXT_FISCAL_QUARTER:
        case SOQLParser.THIS_FISCAL_YEAR:
        case SOQLParser.LAST_FISCAL_YEAR:
        case SOQLParser.NEXT_FISCAL_YEAR:
        case SOQLParser.NEXT_N_DAYS:
        case SOQLParser.LAST_N_DAYS:
        case SOQLParser.N_DAYS_AGO:
        case SOQLParser.NEXT_N_WEEKS:
        case SOQLParser.LAST_N_WEEKS:
        case SOQLParser.N_WEEKS_AGO:
        case SOQLParser.NEXT_N_MONTHS:
        case SOQLParser.LAST_N_MONTHS:
        case SOQLParser.N_MONTHS_AGO:
        case SOQLParser.NEXT_N_QUARTERS:
        case SOQLParser.LAST_N_QUARTERS:
        case SOQLParser.N_QUARTERS_AGO:
        case SOQLParser.NEXT_N_YEARS:
        case SOQLParser.LAST_N_YEARS:
        case SOQLParser.N_YEARS_AGO:
        case SOQLParser.NEXT_N_FISCAL_QUARTERS:
        case SOQLParser.LAST_N_FISCAL_QUARTERS:
        case SOQLParser.N_FISCAL_QUARTERS_AGO:
        case SOQLParser.NEXT_N_FISCAL_YEARS:
        case SOQLParser.LAST_N_FISCAL_YEARS:
        case SOQLParser.N_FISCAL_YEARS_AGO:
        case SOQLParser.ID:
            this.state = 511;
            this.simple_condition();
            break;
        case SOQLParser.LPAREN:
            this.state = 512;
            this.parenthesis();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParenthesisContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_parenthesis;
    return this;
}

ParenthesisContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParenthesisContext.prototype.constructor = ParenthesisContext;

ParenthesisContext.prototype.LPAREN = function() {
    return this.getToken(SOQLParser.LPAREN, 0);
};

ParenthesisContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

ParenthesisContext.prototype.RPAREN = function() {
    return this.getToken(SOQLParser.RPAREN, 0);
};

ParenthesisContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterParenthesis(this);
	}
};

ParenthesisContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitParenthesis(this);
	}
};




SOQLParser.ParenthesisContext = ParenthesisContext;

SOQLParser.prototype.parenthesis = function() {

    var localctx = new ParenthesisContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SOQLParser.RULE_parenthesis);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 515;
        this.match(SOQLParser.LPAREN);
        this.state = 516;
        this.condition();
        this.state = 517;
        this.match(SOQLParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_simple_condition;
    return this;
}

Simple_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_conditionContext.prototype.constructor = Simple_conditionContext;

Simple_conditionContext.prototype.field_based_condition = function() {
    return this.getTypedRuleContext(Field_based_conditionContext,0);
};

Simple_conditionContext.prototype.set_based_condition = function() {
    return this.getTypedRuleContext(Set_based_conditionContext,0);
};

Simple_conditionContext.prototype.like_based_condition = function() {
    return this.getTypedRuleContext(Like_based_conditionContext,0);
};

Simple_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterSimple_condition(this);
	}
};

Simple_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitSimple_condition(this);
	}
};




SOQLParser.Simple_conditionContext = Simple_conditionContext;

SOQLParser.prototype.simple_condition = function() {

    var localctx = new Simple_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SOQLParser.RULE_simple_condition);
    try {
        this.state = 522;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 519;
            this.field_based_condition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 520;
            this.set_based_condition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 521;
            this.like_based_condition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Field_based_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_field_based_condition;
    return this;
}

Field_based_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_based_conditionContext.prototype.constructor = Field_based_conditionContext;

Field_based_conditionContext.prototype.condition_field = function() {
    return this.getTypedRuleContext(Condition_fieldContext,0);
};

Field_based_conditionContext.prototype.comparison_operator = function() {
    return this.getTypedRuleContext(Comparison_operatorContext,0);
};

Field_based_conditionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

Field_based_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterField_based_condition(this);
	}
};

Field_based_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitField_based_condition(this);
	}
};




SOQLParser.Field_based_conditionContext = Field_based_conditionContext;

SOQLParser.prototype.field_based_condition = function() {

    var localctx = new Field_based_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SOQLParser.RULE_field_based_condition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 524;
        this.condition_field();
        this.state = 525;
        this.comparison_operator();
        this.state = 526;
        this.literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_based_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_set_based_condition;
    return this;
}

Set_based_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_based_conditionContext.prototype.constructor = Set_based_conditionContext;

Set_based_conditionContext.prototype.condition_field = function() {
    return this.getTypedRuleContext(Condition_fieldContext,0);
};

Set_based_conditionContext.prototype.set_operator = function() {
    return this.getTypedRuleContext(Set_operatorContext,0);
};

Set_based_conditionContext.prototype.soql_subquery = function() {
    return this.getTypedRuleContext(Soql_subqueryContext,0);
};

Set_based_conditionContext.prototype.set_values = function() {
    return this.getTypedRuleContext(Set_valuesContext,0);
};

Set_based_conditionContext.prototype.set_values_variable = function() {
    return this.getTypedRuleContext(Set_values_variableContext,0);
};

Set_based_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterSet_based_condition(this);
	}
};

Set_based_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitSet_based_condition(this);
	}
};




SOQLParser.Set_based_conditionContext = Set_based_conditionContext;

SOQLParser.prototype.set_based_condition = function() {

    var localctx = new Set_based_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SOQLParser.RULE_set_based_condition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 528;
        this.condition_field();
        this.state = 529;
        this.set_operator();
        this.state = 533;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        switch(la_) {
        case 1:
            this.state = 530;
            this.soql_subquery();
            break;

        case 2:
            this.state = 531;
            this.set_values();
            break;

        case 3:
            this.state = 532;
            this.set_values_variable();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Like_based_conditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_like_based_condition;
    return this;
}

Like_based_conditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Like_based_conditionContext.prototype.constructor = Like_based_conditionContext;

Like_based_conditionContext.prototype.condition_field = function() {
    return this.getTypedRuleContext(Condition_fieldContext,0);
};

Like_based_conditionContext.prototype.LIKE = function() {
    return this.getToken(SOQLParser.LIKE, 0);
};

Like_based_conditionContext.prototype.STRING_VALUE = function() {
    return this.getToken(SOQLParser.STRING_VALUE, 0);
};

Like_based_conditionContext.prototype.LIKE_STRING_VALUE = function() {
    return this.getToken(SOQLParser.LIKE_STRING_VALUE, 0);
};

Like_based_conditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterLike_based_condition(this);
	}
};

Like_based_conditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitLike_based_condition(this);
	}
};




SOQLParser.Like_based_conditionContext = Like_based_conditionContext;

SOQLParser.prototype.like_based_condition = function() {

    var localctx = new Like_based_conditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SOQLParser.RULE_like_based_condition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 535;
        this.condition_field();
        this.state = 536;
        this.match(SOQLParser.LIKE);
        this.state = 537;
        _la = this._input.LA(1);
        if(!(_la===SOQLParser.STRING_VALUE || _la===SOQLParser.LIKE_STRING_VALUE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Condition_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_condition_field;
    return this;
}

Condition_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Condition_fieldContext.prototype.constructor = Condition_fieldContext;

Condition_fieldContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

Condition_fieldContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

Condition_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterCondition_field(this);
	}
};

Condition_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitCondition_field(this);
	}
};




SOQLParser.Condition_fieldContext = Condition_fieldContext;

SOQLParser.prototype.condition_field = function() {

    var localctx = new Condition_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SOQLParser.RULE_condition_field);
    try {
        this.state = 541;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 539;
            this.field();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 540;
            this.function_call();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_valuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_set_values;
    return this;
}

Set_valuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_valuesContext.prototype.constructor = Set_valuesContext;

Set_valuesContext.prototype.LPAREN = function() {
    return this.getToken(SOQLParser.LPAREN, 0);
};

Set_valuesContext.prototype.set_value_list = function() {
    return this.getTypedRuleContext(Set_value_listContext,0);
};

Set_valuesContext.prototype.RPAREN = function() {
    return this.getToken(SOQLParser.RPAREN, 0);
};

Set_valuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterSet_values(this);
	}
};

Set_valuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitSet_values(this);
	}
};




SOQLParser.Set_valuesContext = Set_valuesContext;

SOQLParser.prototype.set_values = function() {

    var localctx = new Set_valuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SOQLParser.RULE_set_values);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        this.match(SOQLParser.LPAREN);
        this.state = 544;
        this.set_value_list();
        this.state = 545;
        this.match(SOQLParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_value_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_set_value_list;
    return this;
}

Set_value_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_value_listContext.prototype.constructor = Set_value_listContext;

Set_value_listContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

Set_value_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.COMMA);
    } else {
        return this.getToken(SOQLParser.COMMA, i);
    }
};


Set_value_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterSet_value_list(this);
	}
};

Set_value_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitSet_value_list(this);
	}
};




SOQLParser.Set_value_listContext = Set_value_listContext;

SOQLParser.prototype.set_value_list = function() {

    var localctx = new Set_value_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SOQLParser.RULE_set_value_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 547;
        this.literal();
        this.state = 552;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SOQLParser.COMMA) {
            this.state = 548;
            this.match(SOQLParser.COMMA);
            this.state = 549;
            this.literal();
            this.state = 554;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_values_complexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_set_values_complex;
    return this;
}

Set_values_complexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_values_complexContext.prototype.constructor = Set_values_complexContext;

Set_values_complexContext.prototype.name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameContext);
    } else {
        return this.getTypedRuleContext(NameContext,i);
    }
};

Set_values_complexContext.prototype.function_name = function() {
    return this.getTypedRuleContext(Function_nameContext,0);
};

Set_values_complexContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.DOT);
    } else {
        return this.getToken(SOQLParser.DOT, i);
    }
};


Set_values_complexContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterSet_values_complex(this);
	}
};

Set_values_complexContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitSet_values_complex(this);
	}
};




SOQLParser.Set_values_complexContext = Set_values_complexContext;

SOQLParser.prototype.set_values_complex = function() {

    var localctx = new Set_values_complexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SOQLParser.RULE_set_values_complex);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 558; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 555;
        		this.name();
        		this.state = 556;
        		this.match(SOQLParser.DOT);
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 560; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,54, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 564;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        switch(la_) {
        case 1:
            this.state = 562;
            this.name();
            break;

        case 2:
            this.state = 563;
            this.function_name();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Set_values_variableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_set_values_variable;
    return this;
}

Set_values_variableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Set_values_variableContext.prototype.constructor = Set_values_variableContext;

Set_values_variableContext.prototype.COLON = function() {
    return this.getToken(SOQLParser.COLON, 0);
};

Set_values_variableContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Set_values_variableContext.prototype.set_values_complex = function() {
    return this.getTypedRuleContext(Set_values_complexContext,0);
};

Set_values_variableContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterSet_values_variable(this);
	}
};

Set_values_variableContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitSet_values_variable(this);
	}
};




SOQLParser.Set_values_variableContext = Set_values_variableContext;

SOQLParser.prototype.set_values_variable = function() {

    var localctx = new Set_values_variableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SOQLParser.RULE_set_values_variable);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 566;
        this.match(SOQLParser.COLON);
        this.state = 569;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            this.state = 567;
            this.name();
            break;

        case 2:
            this.state = 568;
            this.set_values_complex();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_with_clause;
    return this;
}

With_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_clauseContext.prototype.constructor = With_clauseContext;

With_clauseContext.prototype.WITH = function() {
    return this.getToken(SOQLParser.WITH, 0);
};

With_clauseContext.prototype.with_plain_clause = function() {
    return this.getTypedRuleContext(With_plain_clauseContext,0);
};

With_clauseContext.prototype.with_data_category_clause = function() {
    return this.getTypedRuleContext(With_data_category_clauseContext,0);
};

With_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterWith_clause(this);
	}
};

With_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitWith_clause(this);
	}
};




SOQLParser.With_clauseContext = With_clauseContext;

SOQLParser.prototype.with_clause = function() {

    var localctx = new With_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SOQLParser.RULE_with_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 571;
        this.match(SOQLParser.WITH);
        this.state = 574;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            this.state = 572;
            this.with_plain_clause();
            break;

        case 2:
            this.state = 573;
            this.with_data_category_clause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_plain_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_with_plain_clause;
    return this;
}

With_plain_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_plain_clauseContext.prototype.constructor = With_plain_clauseContext;

With_plain_clauseContext.prototype.field_based_condition = function() {
    return this.getTypedRuleContext(Field_based_conditionContext,0);
};

With_plain_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterWith_plain_clause(this);
	}
};

With_plain_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitWith_plain_clause(this);
	}
};




SOQLParser.With_plain_clauseContext = With_plain_clauseContext;

SOQLParser.prototype.with_plain_clause = function() {

    var localctx = new With_plain_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SOQLParser.RULE_with_plain_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 576;
        this.field_based_condition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_data_category_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_with_data_category_clause;
    return this;
}

With_data_category_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_data_category_clauseContext.prototype.constructor = With_data_category_clauseContext;

With_data_category_clauseContext.prototype.DATA = function() {
    return this.getToken(SOQLParser.DATA, 0);
};

With_data_category_clauseContext.prototype.CATEGORY = function() {
    return this.getToken(SOQLParser.CATEGORY, 0);
};

With_data_category_clauseContext.prototype.data_category_spec_list = function() {
    return this.getTypedRuleContext(Data_category_spec_listContext,0);
};

With_data_category_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterWith_data_category_clause(this);
	}
};

With_data_category_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitWith_data_category_clause(this);
	}
};




SOQLParser.With_data_category_clauseContext = With_data_category_clauseContext;

SOQLParser.prototype.with_data_category_clause = function() {

    var localctx = new With_data_category_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SOQLParser.RULE_with_data_category_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 578;
        this.match(SOQLParser.DATA);
        this.state = 579;
        this.match(SOQLParser.CATEGORY);
        this.state = 580;
        this.data_category_spec_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_category_spec_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_data_category_spec_list;
    return this;
}

Data_category_spec_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_category_spec_listContext.prototype.constructor = Data_category_spec_listContext;

Data_category_spec_listContext.prototype.data_category_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Data_category_specContext);
    } else {
        return this.getTypedRuleContext(Data_category_specContext,i);
    }
};

Data_category_spec_listContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.AND);
    } else {
        return this.getToken(SOQLParser.AND, i);
    }
};


Data_category_spec_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterData_category_spec_list(this);
	}
};

Data_category_spec_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitData_category_spec_list(this);
	}
};




SOQLParser.Data_category_spec_listContext = Data_category_spec_listContext;

SOQLParser.prototype.data_category_spec_list = function() {

    var localctx = new Data_category_spec_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SOQLParser.RULE_data_category_spec_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 582;
        this.data_category_spec();
        this.state = 587;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SOQLParser.AND) {
            this.state = 583;
            this.match(SOQLParser.AND);
            this.state = 584;
            this.data_category_spec();
            this.state = 589;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_category_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_data_category_spec;
    return this;
}

Data_category_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_category_specContext.prototype.constructor = Data_category_specContext;

Data_category_specContext.prototype.data_category_group_name = function() {
    return this.getTypedRuleContext(Data_category_group_nameContext,0);
};

Data_category_specContext.prototype.data_category_selector = function() {
    return this.getTypedRuleContext(Data_category_selectorContext,0);
};

Data_category_specContext.prototype.data_category_parameter_list = function() {
    return this.getTypedRuleContext(Data_category_parameter_listContext,0);
};

Data_category_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterData_category_spec(this);
	}
};

Data_category_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitData_category_spec(this);
	}
};




SOQLParser.Data_category_specContext = Data_category_specContext;

SOQLParser.prototype.data_category_spec = function() {

    var localctx = new Data_category_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SOQLParser.RULE_data_category_spec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 590;
        this.data_category_group_name();
        this.state = 591;
        this.data_category_selector();
        this.state = 592;
        this.data_category_parameter_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_category_parameter_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_data_category_parameter_list;
    return this;
}

Data_category_parameter_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_category_parameter_listContext.prototype.constructor = Data_category_parameter_listContext;

Data_category_parameter_listContext.prototype.data_category_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Data_category_nameContext);
    } else {
        return this.getTypedRuleContext(Data_category_nameContext,i);
    }
};

Data_category_parameter_listContext.prototype.LPAREN = function() {
    return this.getToken(SOQLParser.LPAREN, 0);
};

Data_category_parameter_listContext.prototype.RPAREN = function() {
    return this.getToken(SOQLParser.RPAREN, 0);
};

Data_category_parameter_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.COMMA);
    } else {
        return this.getToken(SOQLParser.COMMA, i);
    }
};


Data_category_parameter_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterData_category_parameter_list(this);
	}
};

Data_category_parameter_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitData_category_parameter_list(this);
	}
};




SOQLParser.Data_category_parameter_listContext = Data_category_parameter_listContext;

SOQLParser.prototype.data_category_parameter_list = function() {

    var localctx = new Data_category_parameter_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SOQLParser.RULE_data_category_parameter_list);
    var _la = 0; // Token type
    try {
        this.state = 606;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SOQLParser.GROUP:
        case SOQLParser.ABOVE:
        case SOQLParser.ABOVE_OR_BELOW:
        case SOQLParser.AT:
        case SOQLParser.BELOW:
        case SOQLParser.CATEGORY:
        case SOQLParser.DATA:
        case SOQLParser.END:
        case SOQLParser.OFFSET:
        case SOQLParser.ORDER:
        case SOQLParser.REFERENCE:
        case SOQLParser.SCOPE:
        case SOQLParser.TRACKING:
        case SOQLParser.THEN:
        case SOQLParser.TYPEOF:
        case SOQLParser.VIEW:
        case SOQLParser.VIEWSTAT:
        case SOQLParser.WHEN:
        case SOQLParser.CALENDAR_MONTH:
        case SOQLParser.CALENDAR_QUARTER:
        case SOQLParser.CALENDAR_YEAR:
        case SOQLParser.DAY_IN_MONTH:
        case SOQLParser.DAY_IN_WEEK:
        case SOQLParser.DAY_IN_YEAR:
        case SOQLParser.DAY_ONLY:
        case SOQLParser.FISCAL_MONTH:
        case SOQLParser.FISCAL_QUARTER:
        case SOQLParser.FISCAL_YEAR:
        case SOQLParser.HOUR_IN_DAY:
        case SOQLParser.WEEK_IN_MONTH:
        case SOQLParser.WEEK_IN_YEAR:
        case SOQLParser.AVG:
        case SOQLParser.COUNT:
        case SOQLParser.COUNT_DISTINCT:
        case SOQLParser.MIN:
        case SOQLParser.MAX:
        case SOQLParser.SUM:
        case SOQLParser.DISTANCE:
        case SOQLParser.GEOLOCATION:
        case SOQLParser.FORMAT:
        case SOQLParser.TOLABEL:
        case SOQLParser.CONVERT_TIME_ZONE:
        case SOQLParser.CONVERT_CURRENCY:
        case SOQLParser.GROUPING:
        case SOQLParser.YESTERDAY:
        case SOQLParser.TODAY:
        case SOQLParser.TOMORROW:
        case SOQLParser.LAST_WEEK:
        case SOQLParser.THIS_WEEK:
        case SOQLParser.NEXT_WEEK:
        case SOQLParser.LAST_MONTH:
        case SOQLParser.THIS_MONTH:
        case SOQLParser.NEXT_MONTH:
        case SOQLParser.LAST_90_DAYS:
        case SOQLParser.NEXT_90_DAYS:
        case SOQLParser.THIS_QUARTER:
        case SOQLParser.LAST_QUARTER:
        case SOQLParser.NEXT_QUARTER:
        case SOQLParser.THIS_YEAR:
        case SOQLParser.LAST_YEAR:
        case SOQLParser.NEXT_YEAR:
        case SOQLParser.THIS_FISCAL_QUARTER:
        case SOQLParser.LAST_FISCAL_QUARTER:
        case SOQLParser.NEXT_FISCAL_QUARTER:
        case SOQLParser.THIS_FISCAL_YEAR:
        case SOQLParser.LAST_FISCAL_YEAR:
        case SOQLParser.NEXT_FISCAL_YEAR:
        case SOQLParser.NEXT_N_DAYS:
        case SOQLParser.LAST_N_DAYS:
        case SOQLParser.N_DAYS_AGO:
        case SOQLParser.NEXT_N_WEEKS:
        case SOQLParser.LAST_N_WEEKS:
        case SOQLParser.N_WEEKS_AGO:
        case SOQLParser.NEXT_N_MONTHS:
        case SOQLParser.LAST_N_MONTHS:
        case SOQLParser.N_MONTHS_AGO:
        case SOQLParser.NEXT_N_QUARTERS:
        case SOQLParser.LAST_N_QUARTERS:
        case SOQLParser.N_QUARTERS_AGO:
        case SOQLParser.NEXT_N_YEARS:
        case SOQLParser.LAST_N_YEARS:
        case SOQLParser.N_YEARS_AGO:
        case SOQLParser.NEXT_N_FISCAL_QUARTERS:
        case SOQLParser.LAST_N_FISCAL_QUARTERS:
        case SOQLParser.N_FISCAL_QUARTERS_AGO:
        case SOQLParser.NEXT_N_FISCAL_YEARS:
        case SOQLParser.LAST_N_FISCAL_YEARS:
        case SOQLParser.N_FISCAL_YEARS_AGO:
        case SOQLParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 594;
            this.data_category_name();
            break;
        case SOQLParser.LPAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 595;
            this.match(SOQLParser.LPAREN);
            this.state = 596;
            this.data_category_name();
            this.state = 601;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SOQLParser.COMMA) {
                this.state = 597;
                this.match(SOQLParser.COMMA);
                this.state = 598;
                this.data_category_name();
                this.state = 603;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 604;
            this.match(SOQLParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Data_category_selectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_data_category_selector;
    return this;
}

Data_category_selectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Data_category_selectorContext.prototype.constructor = Data_category_selectorContext;

Data_category_selectorContext.prototype.AT = function() {
    return this.getToken(SOQLParser.AT, 0);
};

Data_category_selectorContext.prototype.ABOVE = function() {
    return this.getToken(SOQLParser.ABOVE, 0);
};

Data_category_selectorContext.prototype.ABOVE_OR_BELOW = function() {
    return this.getToken(SOQLParser.ABOVE_OR_BELOW, 0);
};

Data_category_selectorContext.prototype.BELOW = function() {
    return this.getToken(SOQLParser.BELOW, 0);
};

Data_category_selectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterData_category_selector(this);
	}
};

Data_category_selectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitData_category_selector(this);
	}
};




SOQLParser.Data_category_selectorContext = Data_category_selectorContext;

SOQLParser.prototype.data_category_selector = function() {

    var localctx = new Data_category_selectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SOQLParser.RULE_data_category_selector);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 608;
        _la = this._input.LA(1);
        if(!(((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (SOQLParser.ABOVE - 34)) | (1 << (SOQLParser.ABOVE_OR_BELOW - 34)) | (1 << (SOQLParser.AT - 34)) | (1 << (SOQLParser.BELOW - 34)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_by_plain_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_group_by_plain_clause;
    return this;
}

Group_by_plain_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_by_plain_clauseContext.prototype.constructor = Group_by_plain_clauseContext;

Group_by_plain_clauseContext.prototype.group_by_list = function() {
    return this.getTypedRuleContext(Group_by_listContext,0);
};

Group_by_plain_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterGroup_by_plain_clause(this);
	}
};

Group_by_plain_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitGroup_by_plain_clause(this);
	}
};




SOQLParser.Group_by_plain_clauseContext = Group_by_plain_clauseContext;

SOQLParser.prototype.group_by_plain_clause = function() {

    var localctx = new Group_by_plain_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SOQLParser.RULE_group_by_plain_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 610;
        this.group_by_list();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_by_rollup_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_group_by_rollup_clause;
    return this;
}

Group_by_rollup_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_by_rollup_clauseContext.prototype.constructor = Group_by_rollup_clauseContext;

Group_by_rollup_clauseContext.prototype.ROLLUP = function() {
    return this.getToken(SOQLParser.ROLLUP, 0);
};

Group_by_rollup_clauseContext.prototype.LPAREN = function() {
    return this.getToken(SOQLParser.LPAREN, 0);
};

Group_by_rollup_clauseContext.prototype.group_by_list = function() {
    return this.getTypedRuleContext(Group_by_listContext,0);
};

Group_by_rollup_clauseContext.prototype.RPAREN = function() {
    return this.getToken(SOQLParser.RPAREN, 0);
};

Group_by_rollup_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterGroup_by_rollup_clause(this);
	}
};

Group_by_rollup_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitGroup_by_rollup_clause(this);
	}
};




SOQLParser.Group_by_rollup_clauseContext = Group_by_rollup_clauseContext;

SOQLParser.prototype.group_by_rollup_clause = function() {

    var localctx = new Group_by_rollup_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SOQLParser.RULE_group_by_rollup_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 612;
        this.match(SOQLParser.ROLLUP);
        this.state = 613;
        this.match(SOQLParser.LPAREN);
        this.state = 614;
        this.group_by_list();
        this.state = 615;
        this.match(SOQLParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_by_cube_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_group_by_cube_clause;
    return this;
}

Group_by_cube_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_by_cube_clauseContext.prototype.constructor = Group_by_cube_clauseContext;

Group_by_cube_clauseContext.prototype.CUBE = function() {
    return this.getToken(SOQLParser.CUBE, 0);
};

Group_by_cube_clauseContext.prototype.LPAREN = function() {
    return this.getToken(SOQLParser.LPAREN, 0);
};

Group_by_cube_clauseContext.prototype.group_by_list = function() {
    return this.getTypedRuleContext(Group_by_listContext,0);
};

Group_by_cube_clauseContext.prototype.RPAREN = function() {
    return this.getToken(SOQLParser.RPAREN, 0);
};

Group_by_cube_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterGroup_by_cube_clause(this);
	}
};

Group_by_cube_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitGroup_by_cube_clause(this);
	}
};




SOQLParser.Group_by_cube_clauseContext = Group_by_cube_clauseContext;

SOQLParser.prototype.group_by_cube_clause = function() {

    var localctx = new Group_by_cube_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SOQLParser.RULE_group_by_cube_clause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 617;
        this.match(SOQLParser.CUBE);
        this.state = 618;
        this.match(SOQLParser.LPAREN);
        this.state = 619;
        this.group_by_list();
        this.state = 620;
        this.match(SOQLParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_by_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_group_by_list;
    return this;
}

Group_by_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_by_listContext.prototype.constructor = Group_by_listContext;

Group_by_listContext.prototype.group_by_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Group_by_specContext);
    } else {
        return this.getTypedRuleContext(Group_by_specContext,i);
    }
};

Group_by_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.COMMA);
    } else {
        return this.getToken(SOQLParser.COMMA, i);
    }
};


Group_by_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterGroup_by_list(this);
	}
};

Group_by_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitGroup_by_list(this);
	}
};




SOQLParser.Group_by_listContext = Group_by_listContext;

SOQLParser.prototype.group_by_list = function() {

    var localctx = new Group_by_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SOQLParser.RULE_group_by_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 622;
        this.group_by_spec();
        this.state = 627;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SOQLParser.COMMA) {
            this.state = 623;
            this.match(SOQLParser.COMMA);
            this.state = 624;
            this.group_by_spec();
            this.state = 629;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Group_by_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_group_by_spec;
    return this;
}

Group_by_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Group_by_specContext.prototype.constructor = Group_by_specContext;

Group_by_specContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

Group_by_specContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

Group_by_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterGroup_by_spec(this);
	}
};

Group_by_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitGroup_by_spec(this);
	}
};




SOQLParser.Group_by_specContext = Group_by_specContext;

SOQLParser.prototype.group_by_spec = function() {

    var localctx = new Group_by_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SOQLParser.RULE_group_by_spec);
    try {
        this.state = 632;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 630;
            this.field();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 631;
            this.function_call();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_order_by_list;
    return this;
}

Order_by_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_listContext.prototype.constructor = Order_by_listContext;

Order_by_listContext.prototype.order_by_spec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Order_by_specContext);
    } else {
        return this.getTypedRuleContext(Order_by_specContext,i);
    }
};

Order_by_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SOQLParser.COMMA);
    } else {
        return this.getToken(SOQLParser.COMMA, i);
    }
};


Order_by_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterOrder_by_list(this);
	}
};

Order_by_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitOrder_by_list(this);
	}
};




SOQLParser.Order_by_listContext = Order_by_listContext;

SOQLParser.prototype.order_by_list = function() {

    var localctx = new Order_by_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SOQLParser.RULE_order_by_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 634;
        this.order_by_spec();
        this.state = 639;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SOQLParser.COMMA) {
            this.state = 635;
            this.match(SOQLParser.COMMA);
            this.state = 636;
            this.order_by_spec();
            this.state = 641;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_specContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_order_by_spec;
    return this;
}

Order_by_specContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_specContext.prototype.constructor = Order_by_specContext;

Order_by_specContext.prototype.order_by_field = function() {
    return this.getTypedRuleContext(Order_by_fieldContext,0);
};

Order_by_specContext.prototype.order_by_direction_clause = function() {
    return this.getTypedRuleContext(Order_by_direction_clauseContext,0);
};

Order_by_specContext.prototype.order_by_nulls_clause = function() {
    return this.getTypedRuleContext(Order_by_nulls_clauseContext,0);
};

Order_by_specContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterOrder_by_spec(this);
	}
};

Order_by_specContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitOrder_by_spec(this);
	}
};




SOQLParser.Order_by_specContext = Order_by_specContext;

SOQLParser.prototype.order_by_spec = function() {

    var localctx = new Order_by_specContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, SOQLParser.RULE_order_by_spec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 642;
        this.order_by_field();
        this.state = 644;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.ASC || _la===SOQLParser.DESC) {
            this.state = 643;
            this.order_by_direction_clause();
        }

        this.state = 647;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SOQLParser.NULLS) {
            this.state = 646;
            this.order_by_nulls_clause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_direction_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_order_by_direction_clause;
    return this;
}

Order_by_direction_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_direction_clauseContext.prototype.constructor = Order_by_direction_clauseContext;

Order_by_direction_clauseContext.prototype.ASC = function() {
    return this.getToken(SOQLParser.ASC, 0);
};

Order_by_direction_clauseContext.prototype.DESC = function() {
    return this.getToken(SOQLParser.DESC, 0);
};

Order_by_direction_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterOrder_by_direction_clause(this);
	}
};

Order_by_direction_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitOrder_by_direction_clause(this);
	}
};




SOQLParser.Order_by_direction_clauseContext = Order_by_direction_clauseContext;

SOQLParser.prototype.order_by_direction_clause = function() {

    var localctx = new Order_by_direction_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, SOQLParser.RULE_order_by_direction_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 649;
        _la = this._input.LA(1);
        if(!(_la===SOQLParser.ASC || _la===SOQLParser.DESC)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_nulls_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_order_by_nulls_clause;
    return this;
}

Order_by_nulls_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_nulls_clauseContext.prototype.constructor = Order_by_nulls_clauseContext;

Order_by_nulls_clauseContext.prototype.NULLS = function() {
    return this.getToken(SOQLParser.NULLS, 0);
};

Order_by_nulls_clauseContext.prototype.FIRST = function() {
    return this.getToken(SOQLParser.FIRST, 0);
};

Order_by_nulls_clauseContext.prototype.LAST = function() {
    return this.getToken(SOQLParser.LAST, 0);
};

Order_by_nulls_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterOrder_by_nulls_clause(this);
	}
};

Order_by_nulls_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitOrder_by_nulls_clause(this);
	}
};




SOQLParser.Order_by_nulls_clauseContext = Order_by_nulls_clauseContext;

SOQLParser.prototype.order_by_nulls_clause = function() {

    var localctx = new Order_by_nulls_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, SOQLParser.RULE_order_by_nulls_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 651;
        this.match(SOQLParser.NULLS);
        this.state = 652;
        _la = this._input.LA(1);
        if(!(_la===SOQLParser.FIRST || _la===SOQLParser.LAST)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Order_by_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_order_by_field;
    return this;
}

Order_by_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Order_by_fieldContext.prototype.constructor = Order_by_fieldContext;

Order_by_fieldContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

Order_by_fieldContext.prototype.function_call = function() {
    return this.getTypedRuleContext(Function_callContext,0);
};

Order_by_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterOrder_by_field(this);
	}
};

Order_by_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitOrder_by_field(this);
	}
};




SOQLParser.Order_by_fieldContext = Order_by_fieldContext;

SOQLParser.prototype.order_by_field = function() {

    var localctx = new Order_by_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, SOQLParser.RULE_order_by_field);
    try {
        this.state = 656;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 654;
            this.field();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 655;
            this.function_call();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_for_value;
    return this;
}

For_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_valueContext.prototype.constructor = For_valueContext;

For_valueContext.prototype.REFERENCE = function() {
    return this.getToken(SOQLParser.REFERENCE, 0);
};

For_valueContext.prototype.VIEW = function() {
    return this.getToken(SOQLParser.VIEW, 0);
};

For_valueContext.prototype.UPDATE = function() {
    return this.getToken(SOQLParser.UPDATE, 0);
};

For_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterFor_value(this);
	}
};

For_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitFor_value(this);
	}
};




SOQLParser.For_valueContext = For_valueContext;

SOQLParser.prototype.for_value = function() {

    var localctx = new For_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, SOQLParser.RULE_for_value);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 658;
        _la = this._input.LA(1);
        if(!(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SOQLParser.UPDATE - 33)) | (1 << (SOQLParser.REFERENCE - 33)) | (1 << (SOQLParser.VIEW - 33)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Update_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SOQLParser.RULE_update_value;
    return this;
}

Update_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Update_valueContext.prototype.constructor = Update_valueContext;

Update_valueContext.prototype.TRACKING = function() {
    return this.getToken(SOQLParser.TRACKING, 0);
};

Update_valueContext.prototype.VIEWSTAT = function() {
    return this.getToken(SOQLParser.VIEWSTAT, 0);
};

Update_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.enterUpdate_value(this);
	}
};

Update_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SOQLListener ) {
        listener.exitUpdate_value(this);
	}
};




SOQLParser.Update_valueContext = Update_valueContext;

SOQLParser.prototype.update_value = function() {

    var localctx = new Update_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, SOQLParser.RULE_update_value);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 660;
        _la = this._input.LA(1);
        if(!(_la===SOQLParser.TRACKING || _la===SOQLParser.VIEWSTAT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.SOQLParser = SOQLParser;
