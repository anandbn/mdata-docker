// Generated from Apexcode.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ApexcodeListener = require('./ApexcodeListener').ApexcodeListener;
var grammarFileName = "Apexcode.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003{\u05a7\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004",
    "k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004q\tq\u0004",
    "r\tr\u0004s\ts\u0004t\tt\u0003\u0002\u0005\u0002\u00ea\n\u0002\u0003",
    "\u0002\u0007\u0002\u00ed\n\u0002\f\u0002\u000e\u0002\u00f0\u000b\u0002",
    "\u0003\u0002\u0007\u0002\u00f3\n\u0002\f\u0002\u000e\u0002\u00f6\u000b",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u00fc",
    "\n\u0002\u0003\u0003\u0007\u0003\u00ff\n\u0003\f\u0003\u000e\u0003\u0102",
    "\u000b\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004",
    "\u0003\u0004\u0005\u0004\u010a\n\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0005\u0004\u010f\n\u0004\u0003\u0004\u0003\u0004\u0003\u0005",
    "\u0007\u0005\u0114\n\u0005\f\u0005\u000e\u0005\u0117\u000b\u0005\u0003",
    "\u0005\u0003\u0005\u0007\u0005\u011b\n\u0005\f\u0005\u000e\u0005\u011e",
    "\u000b\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0122\n\u0005\f\u0005",
    "\u000e\u0005\u0125\u000b\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0129",
    "\n\u0005\f\u0005\u000e\u0005\u012c\u000b\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u0130\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0005",
    "\u0007\u013b\n\u0007\u0003\b\u0003\b\u0003\b\u0005\b\u0140\n\b\u0003",
    "\t\u0003\t\u0003\t\u0003\n\u0003\n\u0005\n\u0147\n\n\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0005\u000b\u014c\n\u000b\u0003\u000b\u0003\u000b",
    "\u0005\u000b\u0150\n\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0154",
    "\n\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0007",
    "\f\u015c\n\f\f\f\u000e\f\u015f\u000b\f\u0003\f\u0003\f\u0003\r\u0003",
    "\r\u0003\r\u0005\r\u0166\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0007",
    "\u000e\u016b\n\u000e\f\u000e\u000e\u000e\u016e\u000b\u000e\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0174\n\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u0178\n\u000f\u0003\u000f\u0005\u000f",
    "\u017b\n\u000f\u0003\u000f\u0005\u000f\u017e\n\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u0185\n\u0010",
    "\f\u0010\u000e\u0010\u0188\u000b\u0010\u0003\u0011\u0007\u0011\u018b",
    "\n\u0011\f\u0011\u000e\u0011\u018e\u000b\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u0192\n\u0011\u0003\u0011\u0005\u0011\u0195\n\u0011\u0003",
    "\u0012\u0003\u0012\u0007\u0012\u0199\n\u0012\f\u0012\u000e\u0012\u019c",
    "\u000b\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u01a1\n",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u01a5\n\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u01ac\n",
    "\u0014\f\u0014\u000e\u0014\u01af\u000b\u0014\u0003\u0015\u0003\u0015",
    "\u0007\u0015\u01b3\n\u0015\f\u0015\u000e\u0015\u01b6\u000b\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0007\u0016\u01bc\n\u0016",
    "\f\u0016\u000e\u0016\u01bf\u000b\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0017\u0003\u0017\u0005\u0017\u01c5\n\u0017\u0003\u0017\u0003\u0017",
    "\u0007\u0017\u01c9\n\u0017\f\u0017\u000e\u0017\u01cc\u000b\u0017\u0003",
    "\u0017\u0005\u0017\u01cf\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0005\u0018\u01db\n\u0018\u0003\u0019\u0005\u0019\u01de",
    "\n\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u01e2\n\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019\u01e8\n\u0019\f\u0019",
    "\u000e\u0019\u01eb\u000b\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u01ef",
    "\n\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u01f3\n\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u01fc\n\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0005\u001f\u020e\n\u001f\u0003\u001f\u0003\u001f\u0003 \u0007",
    " \u0213\n \f \u000e \u0216\u000b \u0003 \u0003 \u0005 \u021a\n \u0003",
    "!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005!\u0223\n!\u0003\"",
    "\u0003\"\u0003\"\u0003\"\u0007\"\u0229\n\"\f\"\u000e\"\u022c\u000b\"",
    "\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0007#\u0233\n#\f#\u000e#\u0236",
    "\u000b#\u0003#\u0003#\u0003#\u0003$\u0003$\u0005$\u023d\n$\u0003$\u0003",
    "$\u0003$\u0003$\u0007$\u0243\n$\f$\u000e$\u0246\u000b$\u0003$\u0003",
    "$\u0005$\u024a\n$\u0003$\u0003$\u0003%\u0003%\u0003%\u0003&\u0003&\u0003",
    "&\u0007&\u0254\n&\f&\u000e&\u0257\u000b&\u0003\'\u0003\'\u0003\'\u0005",
    "\'\u025c\n\'\u0003(\u0003(\u0003(\u0007(\u0261\n(\f(\u000e(\u0264\u000b",
    "(\u0003)\u0003)\u0005)\u0268\n)\u0003*\u0003*\u0003*\u0003*\u0007*\u026e",
    "\n*\f*\u000e*\u0271\u000b*\u0003*\u0005*\u0274\n*\u0005*\u0276\n*\u0003",
    "*\u0003*\u0003+\u0003+\u0003,\u0003,\u0003,\u0007,\u027f\n,\f,\u000e",
    ",\u0282\u000b,\u0003-\u0003-\u0005-\u0286\n-\u0003-\u0003-\u0003-\u0005",
    "-\u028b\n-\u0007-\u028d\n-\f-\u000e-\u0290\u000b-\u0003-\u0003-\u0005",
    "-\u0294\n-\u0003.\u0003.\u0003.\u0003.\u0007.\u029a\n.\f.\u000e.\u029d",
    "\u000b.\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0005/\u02a5\n/\u0005",
    "/\u02a7\n/\u00030\u00030\u00030\u00070\u02ac\n0\f0\u000e0\u02af\u000b",
    "0\u00031\u00031\u00051\u02b3\n1\u00031\u00031\u00032\u00032\u00032\u0007",
    "2\u02ba\n2\f2\u000e2\u02bd\u000b2\u00032\u00032\u00052\u02c1\n2\u0003",
    "2\u00052\u02c4\n2\u00033\u00073\u02c7\n3\f3\u000e3\u02ca\u000b3\u0003",
    "3\u00033\u00033\u00034\u00074\u02d0\n4\f4\u000e4\u02d3\u000b4\u0003",
    "4\u00034\u00034\u00034\u00035\u00035\u00036\u00036\u00037\u00037\u0003",
    "7\u00037\u00038\u00038\u00078\u02e3\n8\f8\u000e8\u02e6\u000b8\u0003",
    "9\u00039\u00039\u00079\u02eb\n9\f9\u000e9\u02ee\u000b9\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u02f7\n:\u0003;\u0003;\u0003",
    ";\u0003;\u0003;\u0003;\u0003;\u0005;\u0300\n;\u0003;\u0003;\u0003;\u0005",
    ";\u0305\n;\u0003<\u0003<\u0003<\u0003<\u0007<\u030b\n<\f<\u000e<\u030e",
    "\u000b<\u0003<\u0003<\u0003=\u0003=\u0005=\u0314\n=\u0003>\u0003>\u0003",
    ">\u0003?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u0321",
    "\n@\u0003@\u0005@\u0324\n@\u0003A\u0003A\u0003B\u0003B\u0003B\u0007",
    "B\u032b\nB\fB\u000eB\u032e\u000bB\u0003C\u0003C\u0003C\u0003C\u0003",
    "D\u0003D\u0003D\u0005D\u0337\nD\u0003E\u0003E\u0003E\u0003E\u0007E\u033d",
    "\nE\fE\u000eE\u0340\u000bE\u0005E\u0342\nE\u0003E\u0005E\u0345\nE\u0003",
    "E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003F\u0003G\u0003G\u0007G\u0350",
    "\nG\fG\u000eG\u0353\u000bG\u0003G\u0003G\u0003H\u0007H\u0358\nH\fH\u000e",
    "H\u035b\u000bH\u0003H\u0003H\u0005H\u035f\nH\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0005I\u0367\nI\u0003I\u0003I\u0005I\u036b\nI\u0003",
    "I\u0003I\u0005I\u036f\nI\u0003I\u0003I\u0005I\u0373\nI\u0005I\u0375",
    "\nI\u0003J\u0003J\u0005J\u0379\nJ\u0003K\u0003K\u0003K\u0003K\u0005",
    "K\u037f\nK\u0003L\u0003L\u0003M\u0003M\u0003M\u0003N\u0003N\u0007N\u0388",
    "\nN\fN\u000eN\u038b\u000bN\u0003N\u0003N\u0003O\u0003O\u0003O\u0005",
    "O\u0392\nO\u0003P\u0003P\u0003P\u0003Q\u0007Q\u0398\nQ\fQ\u000eQ\u039b",
    "\u000bQ\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0005R\u03a6\nR\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0006R\u03bb\nR\rR\u000eR\u03bc\u0003R\u0005R\u03c0\nR\u0003",
    "R\u0005R\u03c3\nR\u0003R\u0003R\u0003R\u0003R\u0007R\u03c9\nR\fR\u000e",
    "R\u03cc\u000bR\u0003R\u0005R\u03cf\nR\u0003R\u0003R\u0005R\u03d3\nR",
    "\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u03dc\nR\u0003",
    "R\u0003R\u0003R\u0005R\u03e1\nR\u0003R\u0003R\u0003R\u0003R\u0003R\u0003",
    "R\u0003R\u0003R\u0003R\u0005R\u03ec\nR\u0003S\u0007S\u03ef\nS\fS\u000e",
    "S\u03f2\u000bS\u0003S\u0003S\u0005S\u03f6\nS\u0003T\u0003T\u0003T\u0005",
    "T\u03fb\nT\u0003U\u0003U\u0003U\u0005U\u0400\nU\u0003V\u0003V\u0003",
    "V\u0007V\u0405\nV\fV\u000eV\u0408\u000bV\u0003V\u0003V\u0003V\u0003",
    "V\u0003V\u0003W\u0003W\u0003W\u0007W\u0412\nW\fW\u000eW\u0415\u000b",
    "W\u0003X\u0003X\u0003X\u0003Y\u0003Y\u0003Y\u0005Y\u041d\nY\u0003Y\u0003",
    "Y\u0003Z\u0003Z\u0003Z\u0007Z\u0424\nZ\fZ\u000eZ\u0427\u000bZ\u0003",
    "[\u0007[\u042a\n[\f[\u000e[\u042d\u000b[\u0003[\u0003[\u0003[\u0003",
    "[\u0003[\u0003\\\u0003\\\u0005\\\u0436\n\\\u0003\\\u0003\\\u0005\\\u043a",
    "\n\\\u0003\\\u0003\\\u0005\\\u043e\n\\\u0005\\\u0440\n\\\u0003]\u0003",
    "]\u0005]\u0444\n]\u0003^\u0007^\u0447\n^\f^\u000e^\u044a\u000b^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0003_\u0003_\u0003`\u0003`\u0003`\u0003",
    "a\u0003a\u0003a\u0005a\u0459\na\u0003a\u0003a\u0003a\u0003b\u0003b\u0003",
    "b\u0003b\u0003c\u0003c\u0003c\u0007c\u0465\nc\fc\u000ec\u0468\u000b",
    "c\u0003d\u0003d\u0005d\u046c\nd\u0003e\u0003e\u0003e\u0003e\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0005e\u047b\ne\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0005e\u048b\ne\u0003e\u0003e\u0003e\u0003e\u0003",
    "e\u0005e\u0492\ne\u0003e\u0003e\u0003e\u0005e\u0497\ne\u0003e\u0003",
    "e\u0003e\u0003e\u0005e\u049d\ne\u0003e\u0003e\u0003e\u0003e\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0005e\u04c0\ne\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0005e\u04c8\ne\u0003e\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0005e\u04d5",
    "\ne\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0005e\u04e7\ne\u0003e\u0003",
    "e\u0003e\u0003e\u0003e\u0003e\u0007e\u04ef\ne\fe\u000ee\u04f2\u000b",
    "e\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0005",
    "f\u0507\nf\u0003f\u0003f\u0005f\u050b\nf\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0005g\u0516\ng\u0005g\u0518\n",
    "g\u0003h\u0003h\u0005h\u051c\nh\u0003h\u0003h\u0003h\u0005h\u0521\n",
    "h\u0007h\u0523\nh\fh\u000eh\u0526\u000bh\u0003h\u0003h\u0005h\u052a",
    "\nh\u0003i\u0003i\u0005i\u052e\ni\u0003i\u0003i\u0003j\u0003j\u0003",
    "j\u0003j\u0007j\u0536\nj\fj\u000ej\u0539\u000bj\u0003j\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0007j\u0542\nj\fj\u000ej\u0545\u000b",
    "j\u0003j\u0003j\u0007j\u0549\nj\fj\u000ej\u054c\u000bj\u0005j\u054e",
    "\nj\u0003k\u0003k\u0003k\u0005k\u0553\nk\u0003k\u0003k\u0003k\u0005",
    "k\u0558\nk\u0003k\u0003k\u0003k\u0005k\u055d\nk\u0003k\u0003k\u0003",
    "k\u0005k\u0562\nk\u0007k\u0564\nk\fk\u000ek\u0567\u000bk\u0005k\u0569",
    "\nk\u0003k\u0003k\u0003l\u0003l\u0003l\u0005l\u0570\nl\u0003l\u0003",
    "l\u0003l\u0005l\u0575\nl\u0007l\u0577\nl\fl\u000el\u057a\u000bl\u0003",
    "l\u0003l\u0003m\u0003m\u0005m\u0580\nm\u0003n\u0003n\u0003n\u0003o\u0003",
    "o\u0003o\u0003o\u0003p\u0003p\u0003p\u0005p\u058c\np\u0003q\u0003q\u0003",
    "q\u0005q\u0591\nq\u0003r\u0003r\u0003r\u0003r\u0005r\u0597\nr\u0005",
    "r\u0599\nr\u0003s\u0003s\u0003s\u0003s\u0005s\u059f\ns\u0003t\u0003",
    "t\u0005t\u05a3\nt\u0003t\u0003t\u0003t\u0002\u0003\u00c8u\u0002\u0004",
    "\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
    "\"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
    "\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc",
    "\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4",
    "\u00e6\u0002\u000e\u0003\u0002\u0007\t\u0005\u0002\u0005\u0005\n\u0012",
    ";;\u0003\u0002\u0013\u0014\u0004\u0002\u0017\u0017\u001d\u001d\u0003",
    "\u0002<@\u0003\u0002_b\u0003\u0002UV\u0004\u0002cdhh\u0003\u0002ab\u0005",
    "\u000212YY\\\\\u0004\u0002RRis\u0003\u0002_`\u0002\u0630\u0002\u00fb",
    "\u0003\u0002\u0002\u0002\u0004\u0100\u0003\u0002\u0002\u0002\u0006\u0107",
    "\u0003\u0002\u0002\u0002\b\u012f\u0003\u0002\u0002\u0002\n\u0131\u0003",
    "\u0002\u0002\u0002\f\u013a\u0003\u0002\u0002\u0002\u000e\u013f\u0003",
    "\u0002\u0002\u0002\u0010\u0141\u0003\u0002\u0002\u0002\u0012\u0146\u0003",
    "\u0002\u0002\u0002\u0014\u0148\u0003\u0002\u0002\u0002\u0016\u0157\u0003",
    "\u0002\u0002\u0002\u0018\u0162\u0003\u0002\u0002\u0002\u001a\u0167\u0003",
    "\u0002\u0002\u0002\u001c\u016f\u0003\u0002\u0002\u0002\u001e\u0181\u0003",
    "\u0002\u0002\u0002 \u018c\u0003\u0002\u0002\u0002\"\u0196\u0003\u0002",
    "\u0002\u0002$\u019d\u0003\u0002\u0002\u0002&\u01a8\u0003\u0002\u0002",
    "\u0002(\u01b0\u0003\u0002\u0002\u0002*\u01b9\u0003\u0002\u0002\u0002",
    ",\u01ce\u0003\u0002\u0002\u0002.\u01da\u0003\u0002\u0002\u00020\u01dd",
    "\u0003\u0002\u0002\u00022\u01f4\u0003\u0002\u0002\u00024\u01f7\u0003",
    "\u0002\u0002\u00026\u01ff\u0003\u0002\u0002\u00028\u0202\u0003\u0002",
    "\u0002\u0002:\u0206\u0003\u0002\u0002\u0002<\u020a\u0003\u0002\u0002",
    "\u0002>\u0219\u0003\u0002\u0002\u0002@\u0222\u0003\u0002\u0002\u0002",
    "B\u0224\u0003\u0002\u0002\u0002D\u022f\u0003\u0002\u0002\u0002F\u023c",
    "\u0003\u0002\u0002\u0002H\u024d\u0003\u0002\u0002\u0002J\u0250\u0003",
    "\u0002\u0002\u0002L\u0258\u0003\u0002\u0002\u0002N\u025d\u0003\u0002",
    "\u0002\u0002P\u0267\u0003\u0002\u0002\u0002R\u0269\u0003\u0002\u0002",
    "\u0002T\u0279\u0003\u0002\u0002\u0002V\u027b\u0003\u0002\u0002\u0002",
    "X\u0293\u0003\u0002\u0002\u0002Z\u0295\u0003\u0002\u0002\u0002\\\u02a6",
    "\u0003\u0002\u0002\u0002^\u02a8\u0003\u0002\u0002\u0002`\u02b0\u0003",
    "\u0002\u0002\u0002b\u02c3\u0003\u0002\u0002\u0002d\u02c8\u0003\u0002",
    "\u0002\u0002f\u02d1\u0003\u0002\u0002\u0002h\u02d8\u0003\u0002\u0002",
    "\u0002j\u02da\u0003\u0002\u0002\u0002l\u02dc\u0003\u0002\u0002\u0002",
    "n\u02e4\u0003\u0002\u0002\u0002p\u02e7\u0003\u0002\u0002\u0002r\u02f6",
    "\u0003\u0002\u0002\u0002t\u0304\u0003\u0002\u0002\u0002v\u0306\u0003",
    "\u0002\u0002\u0002x\u0313\u0003\u0002\u0002\u0002z\u0315\u0003\u0002",
    "\u0002\u0002|\u0318\u0003\u0002\u0002\u0002~\u031b\u0003\u0002\u0002",
    "\u0002\u0080\u0325\u0003\u0002\u0002\u0002\u0082\u0327\u0003\u0002\u0002",
    "\u0002\u0084\u032f\u0003\u0002\u0002\u0002\u0086\u0336\u0003\u0002\u0002",
    "\u0002\u0088\u0338\u0003\u0002\u0002\u0002\u008a\u0348\u0003\u0002\u0002",
    "\u0002\u008c\u034d\u0003\u0002\u0002\u0002\u008e\u035e\u0003\u0002\u0002",
    "\u0002\u0090\u0374\u0003\u0002\u0002\u0002\u0092\u0378\u0003\u0002\u0002",
    "\u0002\u0094\u037a\u0003\u0002\u0002\u0002\u0096\u0380\u0003\u0002\u0002",
    "\u0002\u0098\u0382\u0003\u0002\u0002\u0002\u009a\u0385\u0003\u0002\u0002",
    "\u0002\u009c\u0391\u0003\u0002\u0002\u0002\u009e\u0393\u0003\u0002\u0002",
    "\u0002\u00a0\u0399\u0003\u0002\u0002\u0002\u00a2\u03eb\u0003\u0002\u0002",
    "\u0002\u00a4\u03f0\u0003\u0002\u0002\u0002\u00a6\u03f7\u0003\u0002\u0002",
    "\u0002\u00a8\u03fc\u0003\u0002\u0002\u0002\u00aa\u0401\u0003\u0002\u0002",
    "\u0002\u00ac\u040e\u0003\u0002\u0002\u0002\u00ae\u0416\u0003\u0002\u0002",
    "\u0002\u00b0\u0419\u0003\u0002\u0002\u0002\u00b2\u0420\u0003\u0002\u0002",
    "\u0002\u00b4\u042b\u0003\u0002\u0002\u0002\u00b6\u043f\u0003\u0002\u0002",
    "\u0002\u00b8\u0443\u0003\u0002\u0002\u0002\u00ba\u0448\u0003\u0002\u0002",
    "\u0002\u00bc\u0450\u0003\u0002\u0002\u0002\u00be\u0452\u0003\u0002\u0002",
    "\u0002\u00c0\u0455\u0003\u0002\u0002\u0002\u00c2\u045d\u0003\u0002\u0002",
    "\u0002\u00c4\u0461\u0003\u0002\u0002\u0002\u00c6\u046b\u0003\u0002\u0002",
    "\u0002\u00c8\u047a\u0003\u0002\u0002\u0002\u00ca\u050a\u0003\u0002\u0002",
    "\u0002\u00cc\u0517\u0003\u0002\u0002\u0002\u00ce\u0529\u0003\u0002\u0002",
    "\u0002\u00d0\u052b\u0003\u0002\u0002\u0002\u00d2\u0531\u0003\u0002\u0002",
    "\u0002\u00d4\u054f\u0003\u0002\u0002\u0002\u00d6\u056c\u0003\u0002\u0002",
    "\u0002\u00d8\u057d\u0003\u0002\u0002\u0002\u00da\u0581\u0003\u0002\u0002",
    "\u0002\u00dc\u0584\u0003\u0002\u0002\u0002\u00de\u058b\u0003\u0002\u0002",
    "\u0002\u00e0\u0590\u0003\u0002\u0002\u0002\u00e2\u0598\u0003\u0002\u0002",
    "\u0002\u00e4\u059e\u0003\u0002\u0002\u0002\u00e6\u05a0\u0003\u0002\u0002",
    "\u0002\u00e8\u00ea\u0005\u0004\u0003\u0002\u00e9\u00e8\u0003\u0002\u0002",
    "\u0002\u00e9\u00ea\u0003\u0002\u0002\u0002\u00ea\u00ee\u0003\u0002\u0002",
    "\u0002\u00eb\u00ed\u0005\u0006\u0004\u0002\u00ec\u00eb\u0003\u0002\u0002",
    "\u0002\u00ed\u00f0\u0003\u0002\u0002\u0002\u00ee\u00ec\u0003\u0002\u0002",
    "\u0002\u00ee\u00ef\u0003\u0002\u0002\u0002\u00ef\u00f4\u0003\u0002\u0002",
    "\u0002\u00f0\u00ee\u0003\u0002\u0002\u0002\u00f1\u00f3\u0005\b\u0005",
    "\u0002\u00f2\u00f1\u0003\u0002\u0002\u0002\u00f3\u00f6\u0003\u0002\u0002",
    "\u0002\u00f4\u00f2\u0003\u0002\u0002\u0002\u00f4\u00f5\u0003\u0002\u0002",
    "\u0002\u00f5\u00f7\u0003\u0002\u0002\u0002\u00f6\u00f4\u0003\u0002\u0002",
    "\u0002\u00f7\u00fc\u0007\u0002\u0002\u0003\u00f8\u00f9\u0005\n\u0006",
    "\u0002\u00f9\u00fa\u0007\u0002\u0002\u0003\u00fa\u00fc\u0003\u0002\u0002",
    "\u0002\u00fb\u00e9\u0003\u0002\u0002\u0002\u00fb\u00f8\u0003\u0002\u0002",
    "\u0002\u00fc\u0003\u0003\u0002\u0002\u0002\u00fd\u00ff\u0005~@\u0002",
    "\u00fe\u00fd\u0003\u0002\u0002\u0002\u00ff\u0102\u0003\u0002\u0002\u0002",
    "\u0100\u00fe\u0003\u0002\u0002\u0002\u0100\u0101\u0003\u0002\u0002\u0002",
    "\u0101\u0103\u0003\u0002\u0002\u0002\u0102\u0100\u0003\u0002\u0002\u0002",
    "\u0103\u0104\u0007\u0003\u0002\u0002\u0104\u0105\u0005p9\u0002\u0105",
    "\u0106\u0007O\u0002\u0002\u0106\u0005\u0003\u0002\u0002\u0002\u0107",
    "\u0109\u0007\u0004\u0002\u0002\u0108\u010a\u0007\u0005\u0002\u0002\u0109",
    "\u0108\u0003\u0002\u0002\u0002\u0109\u010a\u0003\u0002\u0002\u0002\u010a",
    "\u010b\u0003\u0002\u0002\u0002\u010b\u010e\u0005p9\u0002\u010c\u010d",
    "\u0007Q\u0002\u0002\u010d\u010f\u0007c\u0002\u0002\u010e\u010c\u0003",
    "\u0002\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002\u010f\u0110\u0003",
    "\u0002\u0002\u0002\u0110\u0111\u0007O\u0002\u0002\u0111\u0007\u0003",
    "\u0002\u0002\u0002\u0112\u0114\u0005\u000e\b\u0002\u0113\u0112\u0003",
    "\u0002\u0002\u0002\u0114\u0117\u0003\u0002\u0002\u0002\u0115\u0113\u0003",
    "\u0002\u0002\u0002\u0115\u0116\u0003\u0002\u0002\u0002\u0116\u0118\u0003",
    "\u0002\u0002\u0002\u0117\u0115\u0003\u0002\u0002\u0002\u0118\u0130\u0005",
    "\u0014\u000b\u0002\u0119\u011b\u0005\u000e\b\u0002\u011a\u0119\u0003",
    "\u0002\u0002\u0002\u011b\u011e\u0003\u0002\u0002\u0002\u011c\u011a\u0003",
    "\u0002\u0002\u0002\u011c\u011d\u0003\u0002\u0002\u0002\u011d\u011f\u0003",
    "\u0002\u0002\u0002\u011e\u011c\u0003\u0002\u0002\u0002\u011f\u0130\u0005",
    "\u001c\u000f\u0002\u0120\u0122\u0005\u000e\b\u0002\u0121\u0120\u0003",
    "\u0002\u0002\u0002\u0122\u0125\u0003\u0002\u0002\u0002\u0123\u0121\u0003",
    "\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002\u0002\u0124\u0126\u0003",
    "\u0002\u0002\u0002\u0125\u0123\u0003\u0002\u0002\u0002\u0126\u0130\u0005",
    "$\u0013\u0002\u0127\u0129\u0005\u000e\b\u0002\u0128\u0127\u0003\u0002",
    "\u0002\u0002\u0129\u012c\u0003\u0002\u0002\u0002\u012a\u0128\u0003\u0002",
    "\u0002\u0002\u012a\u012b\u0003\u0002\u0002\u0002\u012b\u012d\u0003\u0002",
    "\u0002\u0002\u012c\u012a\u0003\u0002\u0002\u0002\u012d\u0130\u0005\u008a",
    "F\u0002\u012e\u0130\u0007O\u0002\u0002\u012f\u0115\u0003\u0002\u0002",
    "\u0002\u012f\u011c\u0003\u0002\u0002\u0002\u012f\u0123\u0003\u0002\u0002",
    "\u0002\u012f\u012a\u0003\u0002\u0002\u0002\u012f\u012e\u0003\u0002\u0002",
    "\u0002\u0130\t\u0003\u0002\u0002\u0002\u0131\u0132\u0007B\u0002\u0002",
    "\u0132\u0133\u0007t\u0002\u0002\u0133\u0134\u0007\u0006\u0002\u0002",
    "\u0134\u0135\u0007t\u0002\u0002\u0135\u0136\u0005v<\u0002\u0136\u0137",
    "\u0005l7\u0002\u0137\u000b\u0003\u0002\u0002\u0002\u0138\u013b\u0005",
    "\u000e\b\u0002\u0139\u013b\t\u0002\u0002\u0002\u013a\u0138\u0003\u0002",
    "\u0002\u0002\u013a\u0139\u0003\u0002\u0002\u0002\u013b\r\u0003\u0002",
    "\u0002\u0002\u013c\u0140\u0005~@\u0002\u013d\u0140\t\u0003\u0002\u0002",
    "\u013e\u0140\u0005\u0010\t\u0002\u013f\u013c\u0003\u0002\u0002\u0002",
    "\u013f\u013d\u0003\u0002\u0002\u0002\u013f\u013e\u0003\u0002\u0002\u0002",
    "\u0140\u000f\u0003\u0002\u0002\u0002\u0141\u0142\t\u0004\u0002\u0002",
    "\u0142\u0143\u0007\u0015\u0002\u0002\u0143\u0011\u0003\u0002\u0002\u0002",
    "\u0144\u0147\u0007\u000e\u0002\u0002\u0145\u0147\u0005~@\u0002\u0146",
    "\u0144\u0003\u0002\u0002\u0002\u0146\u0145\u0003\u0002\u0002\u0002\u0147",
    "\u0013\u0003\u0002\u0002\u0002\u0148\u0149\u0007\u0016\u0002\u0002\u0149",
    "\u014b\u0007t\u0002\u0002\u014a\u014c\u0005\u0016\f\u0002\u014b\u014a",
    "\u0003\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002\u014c\u014f",
    "\u0003\u0002\u0002\u0002\u014d\u014e\u0007\u0017\u0002\u0002\u014e\u0150",
    "\u0005V,\u0002\u014f\u014d\u0003\u0002\u0002\u0002\u014f\u0150\u0003",
    "\u0002\u0002\u0002\u0150\u0153\u0003\u0002\u0002\u0002\u0151\u0152\u0007",
    "\u0018\u0002\u0002\u0152\u0154\u0005&\u0014\u0002\u0153\u0151\u0003",
    "\u0002\u0002\u0002\u0153\u0154\u0003\u0002\u0002\u0002\u0154\u0155\u0003",
    "\u0002\u0002\u0002\u0155\u0156\u0005(\u0015\u0002\u0156\u0015\u0003",
    "\u0002\u0002\u0002\u0157\u0158\u0007T\u0002\u0002\u0158\u015d\u0005",
    "\u0018\r\u0002\u0159\u015a\u0007P\u0002\u0002\u015a\u015c\u0005\u0018",
    "\r\u0002\u015b\u0159\u0003\u0002\u0002\u0002\u015c\u015f\u0003\u0002",
    "\u0002\u0002\u015d\u015b\u0003\u0002\u0002\u0002\u015d\u015e\u0003\u0002",
    "\u0002\u0002\u015e\u0160\u0003\u0002\u0002\u0002\u015f\u015d\u0003\u0002",
    "\u0002\u0002\u0160\u0161\u0007S\u0002\u0002\u0161\u0017\u0003\u0002",
    "\u0002\u0002\u0162\u0165\u0007t\u0002\u0002\u0163\u0164\u0007\u0017",
    "\u0002\u0002\u0164\u0166\u0005\u001a\u000e\u0002\u0165\u0163\u0003\u0002",
    "\u0002\u0002\u0165\u0166\u0003\u0002\u0002\u0002\u0166\u0019\u0003\u0002",
    "\u0002\u0002\u0167\u016c\u0005V,\u0002\u0168\u0169\u0007e\u0002\u0002",
    "\u0169\u016b\u0005V,\u0002\u016a\u0168\u0003\u0002\u0002\u0002\u016b",
    "\u016e\u0003\u0002\u0002\u0002\u016c\u016a\u0003\u0002\u0002\u0002\u016c",
    "\u016d\u0003\u0002\u0002\u0002\u016d\u001b\u0003\u0002\u0002\u0002\u016e",
    "\u016c\u0003\u0002\u0002\u0002\u016f\u0170\u00076\u0002\u0002\u0170",
    "\u0173\u0007t\u0002\u0002\u0171\u0172\u0007\u0018\u0002\u0002\u0172",
    "\u0174\u0005&\u0014\u0002\u0173\u0171\u0003\u0002\u0002\u0002\u0173",
    "\u0174\u0003\u0002\u0002\u0002\u0174\u0175\u0003\u0002\u0002\u0002\u0175",
    "\u0177\u0007K\u0002\u0002\u0176\u0178\u0005\u001e\u0010\u0002\u0177",
    "\u0176\u0003\u0002\u0002\u0002\u0177\u0178\u0003\u0002\u0002\u0002\u0178",
    "\u017a\u0003\u0002\u0002\u0002\u0179\u017b\u0007P\u0002\u0002\u017a",
    "\u0179\u0003\u0002\u0002\u0002\u017a\u017b\u0003\u0002\u0002\u0002\u017b",
    "\u017d\u0003\u0002\u0002\u0002\u017c\u017e\u0005\"\u0012\u0002\u017d",
    "\u017c\u0003\u0002\u0002\u0002\u017d\u017e\u0003\u0002\u0002\u0002\u017e",
    "\u017f\u0003\u0002\u0002\u0002\u017f\u0180\u0007L\u0002\u0002\u0180",
    "\u001d\u0003\u0002\u0002\u0002\u0181\u0186\u0005 \u0011\u0002\u0182",
    "\u0183\u0007P\u0002\u0002\u0183\u0185\u0005 \u0011\u0002\u0184\u0182",
    "\u0003\u0002\u0002\u0002\u0185\u0188\u0003\u0002\u0002\u0002\u0186\u0184",
    "\u0003\u0002\u0002\u0002\u0186\u0187\u0003\u0002\u0002\u0002\u0187\u001f",
    "\u0003\u0002\u0002\u0002\u0188\u0186\u0003\u0002\u0002\u0002\u0189\u018b",
    "\u0005~@\u0002\u018a\u0189\u0003\u0002\u0002\u0002\u018b\u018e\u0003",
    "\u0002\u0002\u0002\u018c\u018a\u0003\u0002\u0002\u0002\u018c\u018d\u0003",
    "\u0002\u0002\u0002\u018d\u018f\u0003\u0002\u0002\u0002\u018e\u018c\u0003",
    "\u0002\u0002\u0002\u018f\u0191\u0007t\u0002\u0002\u0190\u0192\u0005",
    "\u00e6t\u0002\u0191\u0190\u0003\u0002\u0002\u0002\u0191\u0192\u0003",
    "\u0002\u0002\u0002\u0192\u0194\u0003\u0002\u0002\u0002\u0193\u0195\u0005",
    "(\u0015\u0002\u0194\u0193\u0003\u0002\u0002\u0002\u0194\u0195\u0003",
    "\u0002\u0002\u0002\u0195!\u0003\u0002\u0002\u0002\u0196\u019a\u0007",
    "O\u0002\u0002\u0197\u0199\u0005,\u0017\u0002\u0198\u0197\u0003\u0002",
    "\u0002\u0002\u0199\u019c\u0003\u0002\u0002\u0002\u019a\u0198\u0003\u0002",
    "\u0002\u0002\u019a\u019b\u0003\u0002\u0002\u0002\u019b#\u0003\u0002",
    "\u0002\u0002\u019c\u019a\u0003\u0002\u0002\u0002\u019d\u019e\u0007\u0019",
    "\u0002\u0002\u019e\u01a0\u0007t\u0002\u0002\u019f\u01a1\u0005\u0016",
    "\f\u0002\u01a0\u019f\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003\u0002",
    "\u0002\u0002\u01a1\u01a4\u0003\u0002\u0002\u0002\u01a2\u01a3\u0007\u0017",
    "\u0002\u0002\u01a3\u01a5\u0005&\u0014\u0002\u01a4\u01a2\u0003\u0002",
    "\u0002\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01a6\u0003\u0002",
    "\u0002\u0002\u01a6\u01a7\u0005*\u0016\u0002\u01a7%\u0003\u0002\u0002",
    "\u0002\u01a8\u01ad\u0005V,\u0002\u01a9\u01aa\u0007P\u0002\u0002\u01aa",
    "\u01ac\u0005V,\u0002\u01ab\u01a9\u0003\u0002\u0002\u0002\u01ac\u01af",
    "\u0003\u0002\u0002\u0002\u01ad\u01ab\u0003\u0002\u0002\u0002\u01ad\u01ae",
    "\u0003\u0002\u0002\u0002\u01ae\'\u0003\u0002\u0002\u0002\u01af\u01ad",
    "\u0003\u0002\u0002\u0002\u01b0\u01b4\u0007K\u0002\u0002\u01b1\u01b3",
    "\u0005,\u0017\u0002\u01b2\u01b1\u0003\u0002\u0002\u0002\u01b3\u01b6",
    "\u0003\u0002\u0002\u0002\u01b4\u01b2\u0003\u0002\u0002\u0002\u01b4\u01b5",
    "\u0003\u0002\u0002\u0002\u01b5\u01b7\u0003\u0002\u0002\u0002\u01b6\u01b4",
    "\u0003\u0002\u0002\u0002\u01b7\u01b8\u0007L\u0002\u0002\u01b8)\u0003",
    "\u0002\u0002\u0002\u01b9\u01bd\u0007K\u0002\u0002\u01ba\u01bc\u0005",
    "> \u0002\u01bb\u01ba\u0003\u0002\u0002\u0002\u01bc\u01bf\u0003\u0002",
    "\u0002\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002\u01bd\u01be\u0003\u0002",
    "\u0002\u0002\u01be\u01c0\u0003\u0002\u0002\u0002\u01bf\u01bd\u0003\u0002",
    "\u0002\u0002\u01c0\u01c1\u0007L\u0002\u0002\u01c1+\u0003\u0002\u0002",
    "\u0002\u01c2\u01cf\u0007O\u0002\u0002\u01c3\u01c5\u0007\u0005\u0002",
    "\u0002\u01c4\u01c3\u0003\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002\u0002",
    "\u0002\u01c5\u01c6\u0003\u0002\u0002\u0002\u01c6\u01cf\u0005\u009aN",
    "\u0002\u01c7\u01c9\u0005\f\u0007\u0002\u01c8\u01c7\u0003\u0002\u0002",
    "\u0002\u01c9\u01cc\u0003\u0002\u0002\u0002\u01ca\u01c8\u0003\u0002\u0002",
    "\u0002\u01ca\u01cb\u0003\u0002\u0002\u0002\u01cb\u01cd\u0003\u0002\u0002",
    "\u0002\u01cc\u01ca\u0003\u0002\u0002\u0002\u01cd\u01cf\u0005.\u0018",
    "\u0002\u01ce\u01c2\u0003\u0002\u0002\u0002\u01ce\u01c4\u0003\u0002\u0002",
    "\u0002\u01ce\u01ca\u0003\u0002\u0002\u0002\u01cf-\u0003\u0002\u0002",
    "\u0002\u01d0\u01db\u00050\u0019\u0002\u01d1\u01db\u00052\u001a\u0002",
    "\u01d2\u01db\u00058\u001d\u0002\u01d3\u01db\u00054\u001b\u0002\u01d4",
    "\u01db\u00056\u001c\u0002\u01d5\u01db\u0005$\u0013\u0002\u01d6\u01db",
    "\u0005\u008aF\u0002\u01d7\u01db\u0005\u0014\u000b\u0002\u01d8\u01db",
    "\u0005\u001c\u000f\u0002\u01d9\u01db\u0005:\u001e\u0002\u01da\u01d0",
    "\u0003\u0002\u0002\u0002\u01da\u01d1\u0003\u0002\u0002\u0002\u01da\u01d2",
    "\u0003\u0002\u0002\u0002\u01da\u01d3\u0003\u0002\u0002\u0002\u01da\u01d4",
    "\u0003\u0002\u0002\u0002\u01da\u01d5\u0003\u0002\u0002\u0002\u01da\u01d6",
    "\u0003\u0002\u0002\u0002\u01da\u01d7\u0003\u0002\u0002\u0002\u01da\u01d8",
    "\u0003\u0002\u0002\u0002\u01da\u01d9\u0003\u0002\u0002\u0002\u01db/",
    "\u0003\u0002\u0002\u0002\u01dc\u01de\u0007\u0011\u0002\u0002\u01dd\u01dc",
    "\u0003\u0002\u0002\u0002\u01dd\u01de\u0003\u0002\u0002\u0002\u01de\u01e1",
    "\u0003\u0002\u0002\u0002\u01df\u01e2\u0005V,\u0002\u01e0\u01e2\u0007",
    "\u001a\u0002\u0002\u01e1\u01df\u0003\u0002\u0002\u0002\u01e1\u01e0\u0003",
    "\u0002\u0002\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002\u01e3\u01e4\u0007",
    "t\u0002\u0002\u01e4\u01e9\u0005`1\u0002\u01e5\u01e6\u0007M\u0002\u0002",
    "\u01e6\u01e8\u0007N\u0002\u0002\u01e7\u01e5\u0003\u0002\u0002\u0002",
    "\u01e8\u01eb\u0003\u0002\u0002\u0002\u01e9\u01e7\u0003\u0002\u0002\u0002",
    "\u01e9\u01ea\u0003\u0002\u0002\u0002\u01ea\u01ee\u0003\u0002\u0002\u0002",
    "\u01eb\u01e9\u0003\u0002\u0002\u0002\u01ec\u01ed\u0007\u001b\u0002\u0002",
    "\u01ed\u01ef\u0005^0\u0002\u01ee\u01ec\u0003\u0002\u0002\u0002\u01ee",
    "\u01ef\u0003\u0002\u0002\u0002\u01ef\u01f2\u0003\u0002\u0002\u0002\u01f0",
    "\u01f3\u0005h5\u0002\u01f1\u01f3\u0007O\u0002\u0002\u01f2\u01f0\u0003",
    "\u0002\u0002\u0002\u01f2\u01f1\u0003\u0002\u0002\u0002\u01f31\u0003",
    "\u0002\u0002\u0002\u01f4\u01f5\u0005\u0016\f\u0002\u01f5\u01f6\u0005",
    "0\u0019\u0002\u01f63\u0003\u0002\u0002\u0002\u01f7\u01f8\u0007t\u0002",
    "\u0002\u01f8\u01fb\u0005`1\u0002\u01f9\u01fa\u0007\u001b\u0002\u0002",
    "\u01fa\u01fc\u0005^0\u0002\u01fb\u01f9\u0003\u0002\u0002\u0002\u01fb",
    "\u01fc\u0003\u0002\u0002\u0002\u01fc\u01fd\u0003\u0002\u0002\u0002\u01fd",
    "\u01fe\u0005j6\u0002\u01fe5\u0003\u0002\u0002\u0002\u01ff\u0200\u0005",
    "\u0016\f\u0002\u0200\u0201\u00054\u001b\u0002\u02017\u0003\u0002\u0002",
    "\u0002\u0202\u0203\u0005V,\u0002\u0203\u0204\u0005J&\u0002\u0204\u0205",
    "\u0007O\u0002\u0002\u02059\u0003\u0002\u0002\u0002\u0206\u0207\u0005",
    "V,\u0002\u0207\u0208\u0005J&\u0002\u0208\u0209\u0005<\u001f\u0002\u0209",
    ";\u0003\u0002\u0002\u0002\u020a\u020b\u0007K\u0002\u0002\u020b\u020d",
    "\u0005\u00a4S\u0002\u020c\u020e\u0005\u00a4S\u0002\u020d\u020c\u0003",
    "\u0002\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u020f\u0003",
    "\u0002\u0002\u0002\u020f\u0210\u0007L\u0002\u0002\u0210=\u0003\u0002",
    "\u0002\u0002\u0211\u0213\u0005\f\u0007\u0002\u0212\u0211\u0003\u0002",
    "\u0002\u0002\u0213\u0216\u0003\u0002\u0002\u0002\u0214\u0212\u0003\u0002",
    "\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u0215\u0217\u0003\u0002",
    "\u0002\u0002\u0216\u0214\u0003\u0002\u0002\u0002\u0217\u021a\u0005@",
    "!\u0002\u0218\u021a\u0007O\u0002\u0002\u0219\u0214\u0003\u0002\u0002",
    "\u0002\u0219\u0218\u0003\u0002\u0002\u0002\u021a?\u0003\u0002\u0002",
    "\u0002\u021b\u0223\u0005B\"\u0002\u021c\u0223\u0005F$\u0002\u021d\u0223",
    "\u0005H%\u0002\u021e\u0223\u0005$\u0013\u0002\u021f\u0223\u0005\u008a",
    "F\u0002\u0220\u0223\u0005\u0014\u000b\u0002\u0221\u0223\u0005\u001c",
    "\u000f\u0002\u0222\u021b\u0003\u0002\u0002\u0002\u0222\u021c\u0003\u0002",
    "\u0002\u0002\u0222\u021d\u0003\u0002\u0002\u0002\u0222\u021e\u0003\u0002",
    "\u0002\u0002\u0222\u021f\u0003\u0002\u0002\u0002\u0222\u0220\u0003\u0002",
    "\u0002\u0002\u0222\u0221\u0003\u0002\u0002\u0002\u0223A\u0003\u0002",
    "\u0002\u0002\u0224\u0225\u0005V,\u0002\u0225\u022a\u0005D#\u0002\u0226",
    "\u0227\u0007P\u0002\u0002\u0227\u0229\u0005D#\u0002\u0228\u0226\u0003",
    "\u0002\u0002\u0002\u0229\u022c\u0003\u0002\u0002\u0002\u022a\u0228\u0003",
    "\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u022d\u0003",
    "\u0002\u0002\u0002\u022c\u022a\u0003\u0002\u0002\u0002\u022d\u022e\u0007",
    "O\u0002\u0002\u022eC\u0003\u0002\u0002\u0002\u022f\u0234\u0007t\u0002",
    "\u0002\u0230\u0231\u0007M\u0002\u0002\u0231\u0233\u0007N\u0002\u0002",
    "\u0232\u0230\u0003\u0002\u0002\u0002\u0233\u0236\u0003\u0002\u0002\u0002",
    "\u0234\u0232\u0003\u0002\u0002\u0002\u0234\u0235\u0003\u0002\u0002\u0002",
    "\u0235\u0237\u0003\u0002\u0002\u0002\u0236\u0234\u0003\u0002\u0002\u0002",
    "\u0237\u0238\u0007R\u0002\u0002\u0238\u0239\u0005P)\u0002\u0239E\u0003",
    "\u0002\u0002\u0002\u023a\u023d\u0005V,\u0002\u023b\u023d\u0007\u001a",
    "\u0002\u0002\u023c\u023a\u0003\u0002\u0002\u0002\u023c\u023b\u0003\u0002",
    "\u0002\u0002\u023d\u023e\u0003\u0002\u0002\u0002\u023e\u023f\u0007t",
    "\u0002\u0002\u023f\u0244\u0005`1\u0002\u0240\u0241\u0007M\u0002\u0002",
    "\u0241\u0243\u0007N\u0002\u0002\u0242\u0240\u0003\u0002\u0002\u0002",
    "\u0243\u0246\u0003\u0002\u0002\u0002\u0244\u0242\u0003\u0002\u0002\u0002",
    "\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0249\u0003\u0002\u0002\u0002",
    "\u0246\u0244\u0003\u0002\u0002\u0002\u0247\u0248\u0007\u001b\u0002\u0002",
    "\u0248\u024a\u0005^0\u0002\u0249\u0247\u0003\u0002\u0002\u0002\u0249",
    "\u024a\u0003\u0002\u0002\u0002\u024a\u024b\u0003\u0002\u0002\u0002\u024b",
    "\u024c\u0007O\u0002\u0002\u024cG\u0003\u0002\u0002\u0002\u024d\u024e",
    "\u0005\u0016\f\u0002\u024e\u024f\u0005F$\u0002\u024fI\u0003\u0002\u0002",
    "\u0002\u0250\u0255\u0005L\'\u0002\u0251\u0252\u0007P\u0002\u0002\u0252",
    "\u0254\u0005L\'\u0002\u0253\u0251\u0003\u0002\u0002\u0002\u0254\u0257",
    "\u0003\u0002\u0002\u0002\u0255\u0253\u0003\u0002\u0002\u0002\u0255\u0256",
    "\u0003\u0002\u0002\u0002\u0256K\u0003\u0002\u0002\u0002\u0257\u0255",
    "\u0003\u0002\u0002\u0002\u0258\u025b\u0005N(\u0002\u0259\u025a\u0007",
    "R\u0002\u0002\u025a\u025c\u0005P)\u0002\u025b\u0259\u0003\u0002\u0002",
    "\u0002\u025b\u025c\u0003\u0002\u0002\u0002\u025cM\u0003\u0002\u0002",
    "\u0002\u025d\u0262\u0007t\u0002\u0002\u025e\u025f\u0007M\u0002\u0002",
    "\u025f\u0261\u0007N\u0002\u0002\u0260\u025e\u0003\u0002\u0002\u0002",
    "\u0261\u0264\u0003\u0002\u0002\u0002\u0262\u0260\u0003\u0002\u0002\u0002",
    "\u0262\u0263\u0003\u0002\u0002\u0002\u0263O\u0003\u0002\u0002\u0002",
    "\u0264\u0262\u0003\u0002\u0002\u0002\u0265\u0268\u0005R*\u0002\u0266",
    "\u0268\u0005\u00c8e\u0002\u0267\u0265\u0003\u0002\u0002\u0002\u0267",
    "\u0266\u0003\u0002\u0002\u0002\u0268Q\u0003\u0002\u0002\u0002\u0269",
    "\u0275\u0007K\u0002\u0002\u026a\u026f\u0005P)\u0002\u026b\u026c\u0007",
    "P\u0002\u0002\u026c\u026e\u0005P)\u0002\u026d\u026b\u0003\u0002\u0002",
    "\u0002\u026e\u0271\u0003\u0002\u0002\u0002\u026f\u026d\u0003\u0002\u0002",
    "\u0002\u026f\u0270\u0003\u0002\u0002\u0002\u0270\u0273\u0003\u0002\u0002",
    "\u0002\u0271\u026f\u0003\u0002\u0002\u0002\u0272\u0274\u0007P\u0002",
    "\u0002\u0273\u0272\u0003\u0002\u0002\u0002\u0273\u0274\u0003\u0002\u0002",
    "\u0002\u0274\u0276\u0003\u0002\u0002\u0002\u0275\u026a\u0003\u0002\u0002",
    "\u0002\u0275\u0276\u0003\u0002\u0002\u0002\u0276\u0277\u0003\u0002\u0002",
    "\u0002\u0277\u0278\u0007L\u0002\u0002\u0278S\u0003\u0002\u0002\u0002",
    "\u0279\u027a\u0007t\u0002\u0002\u027aU\u0003\u0002\u0002\u0002\u027b",
    "\u0280\u0005X-\u0002\u027c\u027d\u0007M\u0002\u0002\u027d\u027f\u0007",
    "N\u0002\u0002\u027e\u027c\u0003\u0002\u0002\u0002\u027f\u0282\u0003",
    "\u0002\u0002\u0002\u0280\u027e\u0003\u0002\u0002\u0002\u0280\u0281\u0003",
    "\u0002\u0002\u0002\u0281W\u0003\u0002\u0002\u0002\u0282\u0280\u0003",
    "\u0002\u0002\u0002\u0283\u0285\u0007t\u0002\u0002\u0284\u0286\u0005",
    "Z.\u0002\u0285\u0284\u0003\u0002\u0002\u0002\u0285\u0286\u0003\u0002",
    "\u0002\u0002\u0286\u028e\u0003\u0002\u0002\u0002\u0287\u0288\u0007Q",
    "\u0002\u0002\u0288\u028a\u0007t\u0002\u0002\u0289\u028b\u0005Z.\u0002",
    "\u028a\u0289\u0003\u0002\u0002\u0002\u028a\u028b\u0003\u0002\u0002\u0002",
    "\u028b\u028d\u0003\u0002\u0002\u0002\u028c\u0287\u0003\u0002\u0002\u0002",
    "\u028d\u0290\u0003\u0002\u0002\u0002\u028e\u028c\u0003\u0002\u0002\u0002",
    "\u028e\u028f\u0003\u0002\u0002\u0002\u028f\u0294\u0003\u0002\u0002\u0002",
    "\u0290\u028e\u0003\u0002\u0002\u0002\u0291\u0292\u0007\u001c\u0002\u0002",
    "\u0292\u0294\u0005Z.\u0002\u0293\u0283\u0003\u0002\u0002\u0002\u0293",
    "\u0291\u0003\u0002\u0002\u0002\u0294Y\u0003\u0002\u0002\u0002\u0295",
    "\u0296\u0007T\u0002\u0002\u0296\u029b\u0005\\/\u0002\u0297\u0298\u0007",
    "P\u0002\u0002\u0298\u029a\u0005\\/\u0002\u0299\u0297\u0003\u0002\u0002",
    "\u0002\u029a\u029d\u0003\u0002\u0002\u0002\u029b\u0299\u0003\u0002\u0002",
    "\u0002\u029b\u029c\u0003\u0002\u0002\u0002\u029c\u029e\u0003\u0002\u0002",
    "\u0002\u029d\u029b\u0003\u0002\u0002\u0002\u029e\u029f\u0007S\u0002",
    "\u0002\u029f[\u0003\u0002\u0002\u0002\u02a0\u02a7\u0005V,\u0002\u02a1",
    "\u02a4\u0007W\u0002\u0002\u02a2\u02a3\t\u0005\u0002\u0002\u02a3\u02a5",
    "\u0005V,\u0002\u02a4\u02a2\u0003\u0002\u0002\u0002\u02a4\u02a5\u0003",
    "\u0002\u0002\u0002\u02a5\u02a7\u0003\u0002\u0002\u0002\u02a6\u02a0\u0003",
    "\u0002\u0002\u0002\u02a6\u02a1\u0003\u0002\u0002\u0002\u02a7]\u0003",
    "\u0002\u0002\u0002\u02a8\u02ad\u0005p9\u0002\u02a9\u02aa\u0007P\u0002",
    "\u0002\u02aa\u02ac\u0005p9\u0002\u02ab\u02a9\u0003\u0002\u0002\u0002",
    "\u02ac\u02af\u0003\u0002\u0002\u0002\u02ad\u02ab\u0003\u0002\u0002\u0002",
    "\u02ad\u02ae\u0003\u0002\u0002\u0002\u02ae_\u0003\u0002\u0002\u0002",
    "\u02af\u02ad\u0003\u0002\u0002\u0002\u02b0\u02b2\u0007I\u0002\u0002",
    "\u02b1\u02b3\u0005b2\u0002\u02b2\u02b1\u0003\u0002\u0002\u0002\u02b2",
    "\u02b3\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002\u0002\u02b4",
    "\u02b5\u0007J\u0002\u0002\u02b5a\u0003\u0002\u0002\u0002\u02b6\u02bb",
    "\u0005d3\u0002\u02b7\u02b8\u0007P\u0002\u0002\u02b8\u02ba\u0005d3\u0002",
    "\u02b9\u02b7\u0003\u0002\u0002\u0002\u02ba\u02bd\u0003\u0002\u0002\u0002",
    "\u02bb\u02b9\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003\u0002\u0002\u0002",
    "\u02bc\u02c0\u0003\u0002\u0002\u0002\u02bd\u02bb\u0003\u0002\u0002\u0002",
    "\u02be\u02bf\u0007P\u0002\u0002\u02bf\u02c1\u0005f4\u0002\u02c0\u02be",
    "\u0003\u0002\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002\u02c1\u02c4",
    "\u0003\u0002\u0002\u0002\u02c2\u02c4\u0005f4\u0002\u02c3\u02b6\u0003",
    "\u0002\u0002\u0002\u02c3\u02c2\u0003\u0002\u0002\u0002\u02c4c\u0003",
    "\u0002\u0002\u0002\u02c5\u02c7\u0005\u0012\n\u0002\u02c6\u02c5\u0003",
    "\u0002\u0002\u0002\u02c7\u02ca\u0003\u0002\u0002\u0002\u02c8\u02c6\u0003",
    "\u0002\u0002\u0002\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9\u02cb\u0003",
    "\u0002\u0002\u0002\u02ca\u02c8\u0003\u0002\u0002\u0002\u02cb\u02cc\u0005",
    "V,\u0002\u02cc\u02cd\u0005N(\u0002\u02cde\u0003\u0002\u0002\u0002\u02ce",
    "\u02d0\u0005\u0012\n\u0002\u02cf\u02ce\u0003\u0002\u0002\u0002\u02d0",
    "\u02d3\u0003\u0002\u0002\u0002\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d1",
    "\u02d2\u0003\u0002\u0002\u0002\u02d2\u02d4\u0003\u0002\u0002\u0002\u02d3",
    "\u02d1\u0003\u0002\u0002\u0002\u02d4\u02d5\u0005V,\u0002\u02d5\u02d6",
    "\u0007w\u0002\u0002\u02d6\u02d7\u0005N(\u0002\u02d7g\u0003\u0002\u0002",
    "\u0002\u02d8\u02d9\u0005\u009aN\u0002\u02d9i\u0003\u0002\u0002\u0002",
    "\u02da\u02db\u0005\u009aN\u0002\u02dbk\u0003\u0002\u0002\u0002\u02dc",
    "\u02dd\u0007K\u0002\u0002\u02dd\u02de\u0005n8\u0002\u02de\u02df\u0007",
    "L\u0002\u0002\u02dfm\u0003\u0002\u0002\u0002\u02e0\u02e3\u0005\u009c",
    "O\u0002\u02e1\u02e3\u00050\u0019\u0002\u02e2\u02e0\u0003\u0002\u0002",
    "\u0002\u02e2\u02e1\u0003\u0002\u0002\u0002\u02e3\u02e6\u0003\u0002\u0002",
    "\u0002\u02e4\u02e2\u0003\u0002\u0002\u0002\u02e4\u02e5\u0003\u0002\u0002",
    "\u0002\u02e5o\u0003\u0002\u0002\u0002\u02e6\u02e4\u0003\u0002\u0002",
    "\u0002\u02e7\u02ec\u0007t\u0002\u0002\u02e8\u02e9\u0007Q\u0002\u0002",
    "\u02e9\u02eb\u0007t\u0002\u0002\u02ea\u02e8\u0003\u0002\u0002\u0002",
    "\u02eb\u02ee\u0003\u0002\u0002\u0002\u02ec\u02ea\u0003\u0002\u0002\u0002",
    "\u02ec\u02ed\u0003\u0002\u0002\u0002\u02edq\u0003\u0002\u0002\u0002",
    "\u02ee\u02ec\u0003\u0002\u0002\u0002\u02ef\u02f7\u0007C\u0002\u0002",
    "\u02f0\u02f7\u0007D\u0002\u0002\u02f1\u02f7\u0007F\u0002\u0002\u02f2",
    "\u02f7\u0007G\u0002\u0002\u02f3\u02f7\u0007E\u0002\u0002\u02f4\u02f7",
    "\u0007H\u0002\u0002\u02f5\u02f7\u0005t;\u0002\u02f6\u02ef\u0003\u0002",
    "\u0002\u0002\u02f6\u02f0\u0003\u0002\u0002\u0002\u02f6\u02f1\u0003\u0002",
    "\u0002\u0002\u02f6\u02f2\u0003\u0002\u0002\u0002\u02f6\u02f3\u0003\u0002",
    "\u0002\u0002\u02f6\u02f4\u0003\u0002\u0002\u0002\u02f6\u02f5\u0003\u0002",
    "\u0002\u0002\u02f7s\u0003\u0002\u0002\u0002\u02f8\u02f9\u0007B\u0002",
    "\u0002\u02f9\u02fa\u0007Q\u0002\u0002\u02fa\u02ff\u0007\u001e\u0002",
    "\u0002\u02fb\u02fc\u0007M\u0002\u0002\u02fc\u02fd\u0005\u00c8e\u0002",
    "\u02fd\u02fe\u0007N\u0002\u0002\u02fe\u0300\u0003\u0002\u0002\u0002",
    "\u02ff\u02fb\u0003\u0002\u0002\u0002\u02ff\u0300\u0003\u0002\u0002\u0002",
    "\u0300\u0305\u0003\u0002\u0002\u0002\u0301\u0302\u0007B\u0002\u0002",
    "\u0302\u0303\u0007Q\u0002\u0002\u0303\u0305\u0005\u00c8e\u0002\u0304",
    "\u02f8\u0003\u0002\u0002\u0002\u0304\u0301\u0003\u0002\u0002\u0002\u0305",
    "u\u0003\u0002\u0002\u0002\u0306\u0307\u0007I\u0002\u0002\u0307\u030c",
    "\u0005x=\u0002\u0308\u0309\u0007P\u0002\u0002\u0309\u030b\u0005x=\u0002",
    "\u030a\u0308\u0003\u0002\u0002\u0002\u030b\u030e\u0003\u0002\u0002\u0002",
    "\u030c\u030a\u0003\u0002\u0002\u0002\u030c\u030d\u0003\u0002\u0002\u0002",
    "\u030d\u030f\u0003\u0002\u0002\u0002\u030e\u030c\u0003\u0002\u0002\u0002",
    "\u030f\u0310\u0007J\u0002\u0002\u0310w\u0003\u0002\u0002\u0002\u0311",
    "\u0314\u0005z>\u0002\u0312\u0314\u0005|?\u0002\u0313\u0311\u0003\u0002",
    "\u0002\u0002\u0313\u0312\u0003\u0002\u0002\u0002\u0314y\u0003\u0002",
    "\u0002\u0002\u0315\u0316\u0007\u001f\u0002\u0002\u0316\u0317\u0007t",
    "\u0002\u0002\u0317{\u0003\u0002\u0002\u0002\u0318\u0319\u0007 \u0002",
    "\u0002\u0319\u031a\u0007t\u0002\u0002\u031a}\u0003\u0002\u0002\u0002",
    "\u031b\u031c\u0007v\u0002\u0002\u031c\u0323\u0005\u0080A\u0002\u031d",
    "\u0320\u0007I\u0002\u0002\u031e\u0321\u0005\u0082B\u0002\u031f\u0321",
    "\u0005\u0086D\u0002\u0320\u031e\u0003\u0002\u0002\u0002\u0320\u031f",
    "\u0003\u0002\u0002\u0002\u0320\u0321\u0003\u0002\u0002\u0002\u0321\u0322",
    "\u0003\u0002\u0002\u0002\u0322\u0324\u0007J\u0002\u0002\u0323\u031d",
    "\u0003\u0002\u0002\u0002\u0323\u0324\u0003\u0002\u0002\u0002\u0324\u007f",
    "\u0003\u0002\u0002\u0002\u0325\u0326\u0005p9\u0002\u0326\u0081\u0003",
    "\u0002\u0002\u0002\u0327\u032c\u0005\u0084C\u0002\u0328\u0329\u0007",
    "P\u0002\u0002\u0329\u032b\u0005\u0084C\u0002\u032a\u0328\u0003\u0002",
    "\u0002\u0002\u032b\u032e\u0003\u0002\u0002\u0002\u032c\u032a\u0003\u0002",
    "\u0002\u0002\u032c\u032d\u0003\u0002\u0002\u0002\u032d\u0083\u0003\u0002",
    "\u0002\u0002\u032e\u032c\u0003\u0002\u0002\u0002\u032f\u0330\u0007t",
    "\u0002\u0002\u0330\u0331\u0007R\u0002\u0002\u0331\u0332\u0005\u0086",
    "D\u0002\u0332\u0085\u0003\u0002\u0002\u0002\u0333\u0337\u0005\u00c8",
    "e\u0002\u0334\u0337\u0005~@\u0002\u0335\u0337\u0005\u0088E\u0002\u0336",
    "\u0333\u0003\u0002\u0002\u0002\u0336\u0334\u0003\u0002\u0002\u0002\u0336",
    "\u0335\u0003\u0002\u0002\u0002\u0337\u0087\u0003\u0002\u0002\u0002\u0338",
    "\u0341\u0007K\u0002\u0002\u0339\u033e\u0005\u0086D\u0002\u033a\u033b",
    "\u0007P\u0002\u0002\u033b\u033d\u0005\u0086D\u0002\u033c\u033a\u0003",
    "\u0002\u0002\u0002\u033d\u0340\u0003\u0002\u0002\u0002\u033e\u033c\u0003",
    "\u0002\u0002\u0002\u033e\u033f\u0003\u0002\u0002\u0002\u033f\u0342\u0003",
    "\u0002\u0002\u0002\u0340\u033e\u0003\u0002\u0002\u0002\u0341\u0339\u0003",
    "\u0002\u0002\u0002\u0341\u0342\u0003\u0002\u0002\u0002\u0342\u0344\u0003",
    "\u0002\u0002\u0002\u0343\u0345\u0007P\u0002\u0002\u0344\u0343\u0003",
    "\u0002\u0002\u0002\u0344\u0345\u0003\u0002\u0002\u0002\u0345\u0346\u0003",
    "\u0002\u0002\u0002\u0346\u0347\u0007L\u0002\u0002\u0347\u0089\u0003",
    "\u0002\u0002\u0002\u0348\u0349\u0007v\u0002\u0002\u0349\u034a\u0007",
    "\u0019\u0002\u0002\u034a\u034b\u0007t\u0002\u0002\u034b\u034c\u0005",
    "\u008cG\u0002\u034c\u008b\u0003\u0002\u0002\u0002\u034d\u0351\u0007",
    "K\u0002\u0002\u034e\u0350\u0005\u008eH\u0002\u034f\u034e\u0003\u0002",
    "\u0002\u0002\u0350\u0353\u0003\u0002\u0002\u0002\u0351\u034f\u0003\u0002",
    "\u0002\u0002\u0351\u0352\u0003\u0002\u0002\u0002\u0352\u0354\u0003\u0002",
    "\u0002\u0002\u0353\u0351\u0003\u0002\u0002\u0002\u0354\u0355\u0007L",
    "\u0002\u0002\u0355\u008d\u0003\u0002\u0002\u0002\u0356\u0358\u0005\f",
    "\u0007\u0002\u0357\u0356\u0003\u0002\u0002\u0002\u0358\u035b\u0003\u0002",
    "\u0002\u0002\u0359\u0357\u0003\u0002\u0002\u0002\u0359\u035a\u0003\u0002",
    "\u0002\u0002\u035a\u035c\u0003\u0002\u0002\u0002\u035b\u0359\u0003\u0002",
    "\u0002\u0002\u035c\u035f\u0005\u0090I\u0002\u035d\u035f\u0007O\u0002",
    "\u0002\u035e\u0359\u0003\u0002\u0002\u0002\u035e\u035d\u0003\u0002\u0002",
    "\u0002\u035f\u008f\u0003\u0002\u0002\u0002\u0360\u0361\u0005V,\u0002",
    "\u0361\u0362\u0005\u0092J\u0002\u0362\u0363\u0007O\u0002\u0002\u0363",
    "\u0375\u0003\u0002\u0002\u0002\u0364\u0366\u0005\u0014\u000b\u0002\u0365",
    "\u0367\u0007O\u0002\u0002\u0366\u0365\u0003\u0002\u0002\u0002\u0366",
    "\u0367\u0003\u0002\u0002\u0002\u0367\u0375\u0003\u0002\u0002\u0002\u0368",
    "\u036a\u0005$\u0013\u0002\u0369\u036b\u0007O\u0002\u0002\u036a\u0369",
    "\u0003\u0002\u0002\u0002\u036a\u036b\u0003\u0002\u0002\u0002\u036b\u0375",
    "\u0003\u0002\u0002\u0002\u036c\u036e\u0005\u001c\u000f\u0002\u036d\u036f",
    "\u0007O\u0002\u0002\u036e\u036d\u0003\u0002\u0002\u0002\u036e\u036f",
    "\u0003\u0002\u0002\u0002\u036f\u0375\u0003\u0002\u0002\u0002\u0370\u0372",
    "\u0005\u008aF\u0002\u0371\u0373\u0007O\u0002\u0002\u0372\u0371\u0003",
    "\u0002\u0002\u0002\u0372\u0373\u0003\u0002\u0002\u0002\u0373\u0375\u0003",
    "\u0002\u0002\u0002\u0374\u0360\u0003\u0002\u0002\u0002\u0374\u0364\u0003",
    "\u0002\u0002\u0002\u0374\u0368\u0003\u0002\u0002\u0002\u0374\u036c\u0003",
    "\u0002\u0002\u0002\u0374\u0370\u0003\u0002\u0002\u0002\u0375\u0091\u0003",
    "\u0002\u0002\u0002\u0376\u0379\u0005\u0094K\u0002\u0377\u0379\u0005",
    "\u0096L\u0002\u0378\u0376\u0003\u0002\u0002\u0002\u0378\u0377\u0003",
    "\u0002\u0002\u0002\u0379\u0093\u0003\u0002\u0002\u0002\u037a\u037b\u0007",
    "t\u0002\u0002\u037b\u037c\u0007I\u0002\u0002\u037c\u037e\u0007J\u0002",
    "\u0002\u037d\u037f\u0005\u0098M\u0002\u037e\u037d\u0003\u0002\u0002",
    "\u0002\u037e\u037f\u0003\u0002\u0002\u0002\u037f\u0095\u0003\u0002\u0002",
    "\u0002\u0380\u0381\u0005J&\u0002\u0381\u0097\u0003\u0002\u0002\u0002",
    "\u0382\u0383\u0007!\u0002\u0002\u0383\u0384\u0005\u0086D\u0002\u0384",
    "\u0099\u0003\u0002\u0002\u0002\u0385\u0389\u0007K\u0002\u0002\u0386",
    "\u0388\u0005\u009cO\u0002\u0387\u0386\u0003\u0002\u0002\u0002\u0388",
    "\u038b\u0003\u0002\u0002\u0002\u0389\u0387\u0003\u0002\u0002\u0002\u0389",
    "\u038a\u0003\u0002\u0002\u0002\u038a\u038c\u0003\u0002\u0002\u0002\u038b",
    "\u0389\u0003\u0002\u0002\u0002\u038c\u038d\u0007L\u0002\u0002\u038d",
    "\u009b\u0003\u0002\u0002\u0002\u038e\u0392\u0005\u009eP\u0002\u038f",
    "\u0392\u0005\u00a2R\u0002\u0390\u0392\u0005\b\u0005\u0002\u0391\u038e",
    "\u0003\u0002\u0002\u0002\u0391\u038f\u0003\u0002\u0002\u0002\u0391\u0390",
    "\u0003\u0002\u0002\u0002\u0392\u009d\u0003\u0002\u0002\u0002\u0393\u0394",
    "\u0005\u00a0Q\u0002\u0394\u0395\u0007O\u0002\u0002\u0395\u009f\u0003",
    "\u0002\u0002\u0002\u0396\u0398\u0005\u0012\n\u0002\u0397\u0396\u0003",
    "\u0002\u0002\u0002\u0398\u039b\u0003\u0002\u0002\u0002\u0399\u0397\u0003",
    "\u0002\u0002\u0002\u0399\u039a\u0003\u0002\u0002\u0002\u039a\u039c\u0003",
    "\u0002\u0002\u0002\u039b\u0399\u0003\u0002\u0002\u0002\u039c\u039d\u0005",
    "V,\u0002\u039d\u039e\u0005J&\u0002\u039e\u00a1\u0003\u0002\u0002\u0002",
    "\u039f\u03ec\u0005\u009aN\u0002\u03a0\u03a1\u0007\"\u0002\u0002\u03a1",
    "\u03a2\u0005\u00c2b\u0002\u03a2\u03a5\u0005\u00a2R\u0002\u03a3\u03a4",
    "\u0007#\u0002\u0002\u03a4\u03a6\u0005\u00a2R\u0002\u03a5\u03a3\u0003",
    "\u0002\u0002\u0002\u03a5\u03a6\u0003\u0002\u0002\u0002\u03a6\u03ec\u0003",
    "\u0002\u0002\u0002\u03a7\u03a8\u0007$\u0002\u0002\u03a8\u03a9\u0007",
    "I\u0002\u0002\u03a9\u03aa\u0005\u00b6\\\u0002\u03aa\u03ab\u0007J\u0002",
    "\u0002\u03ab\u03ac\u0005\u00a2R\u0002\u03ac\u03ec\u0003\u0002\u0002",
    "\u0002\u03ad\u03ae\u0007%\u0002\u0002\u03ae\u03af\u0005\u00c2b\u0002",
    "\u03af\u03b0\u0005\u00a2R\u0002\u03b0\u03ec\u0003\u0002\u0002\u0002",
    "\u03b1\u03b2\u0007&\u0002\u0002\u03b2\u03b3\u0005\u00a2R\u0002\u03b3",
    "\u03b4\u0007%\u0002\u0002\u03b4\u03b5\u0005\u00c2b\u0002\u03b5\u03b6",
    "\u0007O\u0002\u0002\u03b6\u03ec\u0003\u0002\u0002\u0002\u03b7\u03b8",
    "\u0007\'\u0002\u0002\u03b8\u03c2\u0005\u009aN\u0002\u03b9\u03bb\u0005",
    "\u00aaV\u0002\u03ba\u03b9\u0003\u0002\u0002\u0002\u03bb\u03bc\u0003",
    "\u0002\u0002\u0002\u03bc\u03ba\u0003\u0002\u0002\u0002\u03bc\u03bd\u0003",
    "\u0002\u0002\u0002\u03bd\u03bf\u0003\u0002\u0002\u0002\u03be\u03c0\u0005",
    "\u00aeX\u0002\u03bf\u03be\u0003\u0002\u0002\u0002\u03bf\u03c0\u0003",
    "\u0002\u0002\u0002\u03c0\u03c3\u0003\u0002\u0002\u0002\u03c1\u03c3\u0005",
    "\u00aeX\u0002\u03c2\u03ba\u0003\u0002\u0002\u0002\u03c2\u03c1\u0003",
    "\u0002\u0002\u0002\u03c3\u03ec\u0003\u0002\u0002\u0002\u03c4\u03c5\u0007",
    "\'\u0002\u0002\u03c5\u03c6\u0005\u00b0Y\u0002\u03c6\u03ca\u0005\u009a",
    "N\u0002\u03c7\u03c9\u0005\u00aaV\u0002\u03c8\u03c7\u0003\u0002\u0002",
    "\u0002\u03c9\u03cc\u0003\u0002\u0002\u0002\u03ca\u03c8\u0003\u0002\u0002",
    "\u0002\u03ca\u03cb\u0003\u0002\u0002\u0002\u03cb\u03ce\u0003\u0002\u0002",
    "\u0002\u03cc\u03ca\u0003\u0002\u0002\u0002\u03cd\u03cf\u0005\u00aeX",
    "\u0002\u03ce\u03cd\u0003\u0002\u0002\u0002\u03ce\u03cf\u0003\u0002\u0002",
    "\u0002\u03cf\u03ec\u0003\u0002\u0002\u0002\u03d0\u03d2\u0007(\u0002",
    "\u0002\u03d1\u03d3\u0005\u00c8e\u0002\u03d2\u03d1\u0003\u0002\u0002",
    "\u0002\u03d2\u03d3\u0003\u0002\u0002\u0002\u03d3\u03d4\u0003\u0002\u0002",
    "\u0002\u03d4\u03ec\u0007O\u0002\u0002\u03d5\u03d6\u0007)\u0002\u0002",
    "\u03d6\u03d7\u0005\u00c8e\u0002\u03d7\u03d8\u0007O\u0002\u0002\u03d8",
    "\u03ec\u0003\u0002\u0002\u0002\u03d9\u03db\u0007*\u0002\u0002\u03da",
    "\u03dc\u0007t\u0002\u0002\u03db\u03da\u0003\u0002\u0002\u0002\u03db",
    "\u03dc\u0003\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd",
    "\u03ec\u0007O\u0002\u0002\u03de\u03e0\u0007+\u0002\u0002\u03df\u03e1",
    "\u0007t\u0002\u0002\u03e0\u03df\u0003\u0002\u0002\u0002\u03e0\u03e1",
    "\u0003\u0002\u0002\u0002\u03e1\u03e2\u0003\u0002\u0002\u0002\u03e2\u03ec",
    "\u0007O\u0002\u0002\u03e3\u03ec\u0007O\u0002\u0002\u03e4\u03e5\u0005",
    "\u00c6d\u0002\u03e5\u03e6\u0007O\u0002\u0002\u03e6\u03ec\u0003\u0002",
    "\u0002\u0002\u03e7\u03ec\u0005\u00c0a\u0002\u03e8\u03e9\u0007t\u0002",
    "\u0002\u03e9\u03ea\u0007X\u0002\u0002\u03ea\u03ec\u0005\u00a2R\u0002",
    "\u03eb\u039f\u0003\u0002\u0002\u0002\u03eb\u03a0\u0003\u0002\u0002\u0002",
    "\u03eb\u03a7\u0003\u0002\u0002\u0002\u03eb\u03ad\u0003\u0002\u0002\u0002",
    "\u03eb\u03b1\u0003\u0002\u0002\u0002\u03eb\u03b7\u0003\u0002\u0002\u0002",
    "\u03eb\u03c4\u0003\u0002\u0002\u0002\u03eb\u03d0\u0003\u0002\u0002\u0002",
    "\u03eb\u03d5\u0003\u0002\u0002\u0002\u03eb\u03d9\u0003\u0002\u0002\u0002",
    "\u03eb\u03de\u0003\u0002\u0002\u0002\u03eb\u03e3\u0003\u0002\u0002\u0002",
    "\u03eb\u03e4\u0003\u0002\u0002\u0002\u03eb\u03e7\u0003\u0002\u0002\u0002",
    "\u03eb\u03e8\u0003\u0002\u0002\u0002\u03ec\u00a3\u0003\u0002\u0002\u0002",
    "\u03ed\u03ef\u0005\f\u0007\u0002\u03ee\u03ed\u0003\u0002\u0002\u0002",
    "\u03ef\u03f2\u0003\u0002\u0002\u0002\u03f0\u03ee\u0003\u0002\u0002\u0002",
    "\u03f0\u03f1\u0003\u0002\u0002\u0002\u03f1\u03f5\u0003\u0002\u0002\u0002",
    "\u03f2\u03f0\u0003\u0002\u0002\u0002\u03f3\u03f6\u0005\u00a6T\u0002",
    "\u03f4\u03f6\u0005\u00a8U\u0002\u03f5\u03f3\u0003\u0002\u0002\u0002",
    "\u03f5\u03f4\u0003\u0002\u0002\u0002\u03f6\u00a5\u0003\u0002\u0002\u0002",
    "\u03f7\u03fa\u0007,\u0002\u0002\u03f8\u03fb\u0007O\u0002\u0002\u03f9",
    "\u03fb\u0005h5\u0002\u03fa\u03f8\u0003\u0002\u0002\u0002\u03fa\u03f9",
    "\u0003\u0002\u0002\u0002\u03fb\u00a7\u0003\u0002\u0002\u0002\u03fc\u03ff",
    "\u0007\u001c\u0002\u0002\u03fd\u0400\u0007O\u0002\u0002\u03fe\u0400",
    "\u0005h5\u0002\u03ff\u03fd\u0003\u0002\u0002\u0002\u03ff\u03fe\u0003",
    "\u0002\u0002\u0002\u0400\u00a9\u0003\u0002\u0002\u0002\u0401\u0402\u0007",
    "-\u0002\u0002\u0402\u0406\u0007I\u0002\u0002\u0403\u0405\u0005\u0012",
    "\n\u0002\u0404\u0403\u0003\u0002\u0002\u0002\u0405\u0408\u0003\u0002",
    "\u0002\u0002\u0406\u0404\u0003\u0002\u0002\u0002\u0406\u0407\u0003\u0002",
    "\u0002\u0002\u0407\u0409\u0003\u0002\u0002\u0002\u0408\u0406\u0003\u0002",
    "\u0002\u0002\u0409\u040a\u0005\u00acW\u0002\u040a\u040b\u0007t\u0002",
    "\u0002\u040b\u040c\u0007J\u0002\u0002\u040c\u040d\u0005\u009aN\u0002",
    "\u040d\u00ab\u0003\u0002\u0002\u0002\u040e\u0413\u0005p9\u0002\u040f",
    "\u0410\u0007f\u0002\u0002\u0410\u0412\u0005p9\u0002\u0411\u040f\u0003",
    "\u0002\u0002\u0002\u0412\u0415\u0003\u0002\u0002\u0002\u0413\u0411\u0003",
    "\u0002\u0002\u0002\u0413\u0414\u0003\u0002\u0002\u0002\u0414\u00ad\u0003",
    "\u0002\u0002\u0002\u0415\u0413\u0003\u0002\u0002\u0002\u0416\u0417\u0007",
    ".\u0002\u0002\u0417\u0418\u0005\u009aN\u0002\u0418\u00af\u0003\u0002",
    "\u0002\u0002\u0419\u041a\u0007I\u0002\u0002\u041a\u041c\u0005\u00b2",
    "Z\u0002\u041b\u041d\u0007O\u0002\u0002\u041c\u041b\u0003\u0002\u0002",
    "\u0002\u041c\u041d\u0003\u0002\u0002\u0002\u041d\u041e\u0003\u0002\u0002",
    "\u0002\u041e\u041f\u0007J\u0002\u0002\u041f\u00b1\u0003\u0002\u0002",
    "\u0002\u0420\u0425\u0005\u00b4[\u0002\u0421\u0422\u0007O\u0002\u0002",
    "\u0422\u0424\u0005\u00b4[\u0002\u0423\u0421\u0003\u0002\u0002\u0002",
    "\u0424\u0427\u0003\u0002\u0002\u0002\u0425\u0423\u0003\u0002\u0002\u0002",
    "\u0425\u0426\u0003\u0002\u0002\u0002\u0426\u00b3\u0003\u0002\u0002\u0002",
    "\u0427\u0425\u0003\u0002\u0002\u0002\u0428\u042a\u0005\u0012\n\u0002",
    "\u0429\u0428\u0003\u0002\u0002\u0002\u042a\u042d\u0003\u0002\u0002\u0002",
    "\u042b\u0429\u0003\u0002\u0002\u0002\u042b\u042c\u0003\u0002\u0002\u0002",
    "\u042c\u042e\u0003\u0002\u0002\u0002\u042d\u042b\u0003\u0002\u0002\u0002",
    "\u042e\u042f\u0005X-\u0002\u042f\u0430\u0005N(\u0002\u0430\u0431\u0007",
    "R\u0002\u0002\u0431\u0432\u0005\u00c8e\u0002\u0432\u00b5\u0003\u0002",
    "\u0002\u0002\u0433\u0440\u0005\u00ba^\u0002\u0434\u0436\u0005\u00b8",
    "]\u0002\u0435\u0434\u0003\u0002\u0002\u0002\u0435\u0436\u0003\u0002",
    "\u0002\u0002\u0436\u0437\u0003\u0002\u0002\u0002\u0437\u0439\u0007O",
    "\u0002\u0002\u0438\u043a\u0005\u00c8e\u0002\u0439\u0438\u0003\u0002",
    "\u0002\u0002\u0439\u043a\u0003\u0002\u0002\u0002\u043a\u043b\u0003\u0002",
    "\u0002\u0002\u043b\u043d\u0007O\u0002\u0002\u043c\u043e\u0005\u00bc",
    "_\u0002\u043d\u043c\u0003\u0002\u0002\u0002\u043d\u043e\u0003\u0002",
    "\u0002\u0002\u043e\u0440\u0003\u0002\u0002\u0002\u043f\u0433\u0003\u0002",
    "\u0002\u0002\u043f\u0435\u0003\u0002\u0002\u0002\u0440\u00b7\u0003\u0002",
    "\u0002\u0002\u0441\u0444\u0005\u00a0Q\u0002\u0442\u0444\u0005\u00c4",
    "c\u0002\u0443\u0441\u0003\u0002\u0002\u0002\u0443\u0442\u0003\u0002",
    "\u0002\u0002\u0444\u00b9\u0003\u0002\u0002\u0002\u0445\u0447\u0005\u0012",
    "\n\u0002\u0446\u0445\u0003\u0002\u0002\u0002\u0447\u044a\u0003\u0002",
    "\u0002\u0002\u0448\u0446\u0003\u0002\u0002\u0002\u0448\u0449\u0003\u0002",
    "\u0002\u0002\u0449\u044b\u0003\u0002\u0002\u0002\u044a\u0448\u0003\u0002",
    "\u0002\u0002\u044b\u044c\u0005V,\u0002\u044c\u044d\u0005N(\u0002\u044d",
    "\u044e\u0007X\u0002\u0002\u044e\u044f\u0005\u00c8e\u0002\u044f\u00bb",
    "\u0003\u0002\u0002\u0002\u0450\u0451\u0005\u00c4c\u0002\u0451\u00bd",
    "\u0003\u0002\u0002\u0002\u0452\u0453\t\u0006\u0002\u0002\u0453\u0454",
    "\u0005\u00c8e\u0002\u0454\u00bf\u0003\u0002\u0002\u0002\u0455\u0456",
    "\u0007A\u0002\u0002\u0456\u0458\u0007I\u0002\u0002\u0457\u0459\u0005",
    "\u00c4c\u0002\u0458\u0457\u0003\u0002\u0002\u0002\u0458\u0459\u0003",
    "\u0002\u0002\u0002\u0459\u045a\u0003\u0002\u0002\u0002\u045a\u045b\u0007",
    "J\u0002\u0002\u045b\u045c\u0005\u009aN\u0002\u045c\u00c1\u0003\u0002",
    "\u0002\u0002\u045d\u045e\u0007I\u0002\u0002\u045e\u045f\u0005\u00c8",
    "e\u0002\u045f\u0460\u0007J\u0002\u0002\u0460\u00c3\u0003\u0002\u0002",
    "\u0002\u0461\u0466\u0005\u00c8e\u0002\u0462\u0463\u0007P\u0002\u0002",
    "\u0463\u0465\u0005\u00c8e\u0002\u0464\u0462\u0003\u0002\u0002\u0002",
    "\u0465\u0468\u0003\u0002\u0002\u0002\u0466\u0464\u0003\u0002\u0002\u0002",
    "\u0466\u0467\u0003\u0002\u0002\u0002\u0467\u00c5\u0003\u0002\u0002\u0002",
    "\u0468\u0466\u0003\u0002\u0002\u0002\u0469\u046c\u0005\u00c8e\u0002",
    "\u046a\u046c\u0005\u00be`\u0002\u046b\u0469\u0003\u0002\u0002\u0002",
    "\u046b\u046a\u0003\u0002\u0002\u0002\u046c\u00c7\u0003\u0002\u0002\u0002",
    "\u046d\u046e\be\u0001\u0002\u046e\u047b\u0005\u00caf\u0002\u046f\u0470",
    "\u0007\u001e\u0002\u0002\u0470\u047b\u0005\u00ccg\u0002\u0471\u0472",
    "\u0007I\u0002\u0002\u0472\u0473\u0005V,\u0002\u0473\u0474\u0007J\u0002",
    "\u0002\u0474\u0475\u0005\u00c8e\u0013\u0475\u047b\u0003\u0002\u0002",
    "\u0002\u0476\u0477\t\u0007\u0002\u0002\u0477\u047b\u0005\u00c8e\u0011",
    "\u0478\u0479\t\b\u0002\u0002\u0479\u047b\u0005\u00c8e\u0010\u047a\u046d",
    "\u0003\u0002\u0002\u0002\u047a\u046f\u0003\u0002\u0002\u0002\u047a\u0471",
    "\u0003\u0002\u0002\u0002\u047a\u0476\u0003\u0002\u0002\u0002\u047a\u0478",
    "\u0003\u0002\u0002\u0002\u047b\u04f0\u0003\u0002\u0002\u0002\u047c\u047d",
    "\f\u000f\u0002\u0002\u047d\u047e\t\t\u0002\u0002\u047e\u04ef\u0005\u00c8",
    "e\u0010\u047f\u0480\f\u000e\u0002\u0002\u0480\u0481\t\n\u0002\u0002",
    "\u0481\u04ef\u0005\u00c8e\u000f\u0482\u048a\f\r\u0002\u0002\u0483\u0484",
    "\u0007T\u0002\u0002\u0484\u048b\u0007T\u0002\u0002\u0485\u0486\u0007",
    "S\u0002\u0002\u0486\u0487\u0007S\u0002\u0002\u0487\u048b\u0007S\u0002",
    "\u0002\u0488\u0489\u0007S\u0002\u0002\u0489\u048b\u0007S\u0002\u0002",
    "\u048a\u0483\u0003\u0002\u0002\u0002\u048a\u0485\u0003\u0002\u0002\u0002",
    "\u048a\u0488\u0003\u0002\u0002\u0002\u048b\u048c\u0003\u0002\u0002\u0002",
    "\u048c\u04ef\u0005\u00c8e\u000e\u048d\u049c\f\f\u0002\u0002\u048e\u049d",
    "\u0007Z\u0002\u0002\u048f\u0491\u0007T\u0002\u0002\u0490\u0492\u0007",
    "x\u0002\u0002\u0491\u0490\u0003\u0002\u0002\u0002\u0491\u0492\u0003",
    "\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002\u0002\u0493\u049d\u0007",
    "R\u0002\u0002\u0494\u0496\u0007S\u0002\u0002\u0495\u0497\u0007x\u0002",
    "\u0002\u0496\u0495\u0003\u0002\u0002\u0002\u0496\u0497\u0003\u0002\u0002",
    "\u0002\u0497\u0498\u0003\u0002\u0002\u0002\u0498\u049d\u0007R\u0002",
    "\u0002\u0499\u049d\u0007[\u0002\u0002\u049a\u049d\u0007S\u0002\u0002",
    "\u049b\u049d\u0007T\u0002\u0002\u049c\u048e\u0003\u0002\u0002\u0002",
    "\u049c\u048f\u0003\u0002\u0002\u0002\u049c\u0494\u0003\u0002\u0002\u0002",
    "\u049c\u0499\u0003\u0002\u0002\u0002\u049c\u049a\u0003\u0002\u0002\u0002",
    "\u049c\u049b\u0003\u0002\u0002\u0002\u049d\u049e\u0003\u0002\u0002\u0002",
    "\u049e\u04ef\u0005\u00c8e\r\u049f\u04a0\f\n\u0002\u0002\u04a0\u04a1",
    "\t\u000b\u0002\u0002\u04a1\u04ef\u0005\u00c8e\u000b\u04a2\u04a3\f\t",
    "\u0002\u0002\u04a3\u04a4\u0007e\u0002\u0002\u04a4\u04ef\u0005\u00c8",
    "e\n\u04a5\u04a6\f\b\u0002\u0002\u04a6\u04a7\u0007g\u0002\u0002\u04a7",
    "\u04ef\u0005\u00c8e\t\u04a8\u04a9\f\u0007\u0002\u0002\u04a9\u04aa\u0007",
    "f\u0002\u0002\u04aa\u04ef\u0005\u00c8e\b\u04ab\u04ac\f\u0006\u0002\u0002",
    "\u04ac\u04ad\u0007]\u0002\u0002\u04ad\u04ef\u0005\u00c8e\u0007\u04ae",
    "\u04af\f\u0005\u0002\u0002\u04af\u04b0\u0007^\u0002\u0002\u04b0\u04ef",
    "\u0005\u00c8e\u0006\u04b1\u04b2\f\u0004\u0002\u0002\u04b2\u04b3\u0007",
    "W\u0002\u0002\u04b3\u04b4\u0005\u00c8e\u0002\u04b4\u04b5\u0007X\u0002",
    "\u0002\u04b5\u04b6\u0005\u00c8e\u0005\u04b6\u04ef\u0003\u0002\u0002",
    "\u0002\u04b7\u04b8\f\u0003\u0002\u0002\u04b8\u04b9\t\f\u0002\u0002\u04b9",
    "\u04ef\u0005\u00c8e\u0003\u04ba\u04bb\f\u001d\u0002\u0002\u04bb\u04bc",
    "\u0007Q\u0002\u0002\u04bc\u04bd\u0007,\u0002\u0002\u04bd\u04bf\u0007",
    "I\u0002\u0002\u04be\u04c0\u0005\u00c4c\u0002\u04bf\u04be\u0003\u0002",
    "\u0002\u0002\u04bf\u04c0\u0003\u0002\u0002\u0002\u04c0\u04c1\u0003\u0002",
    "\u0002\u0002\u04c1\u04ef\u0007J\u0002\u0002\u04c2\u04c3\f\u001c\u0002",
    "\u0002\u04c3\u04c4\u0007Q\u0002\u0002\u04c4\u04c5\u0007\u001c\u0002",
    "\u0002\u04c5\u04c7\u0007I\u0002\u0002\u04c6\u04c8\u0005\u00c4c\u0002",
    "\u04c7\u04c6\u0003\u0002\u0002\u0002\u04c7\u04c8\u0003\u0002\u0002\u0002",
    "\u04c8\u04c9\u0003\u0002\u0002\u0002\u04c9\u04ef\u0007J\u0002\u0002",
    "\u04ca\u04cb\f\u001b\u0002\u0002\u04cb\u04cc\u0007Q\u0002\u0002\u04cc",
    "\u04ef\u0007t\u0002\u0002\u04cd\u04ce\f\u001a\u0002\u0002\u04ce\u04cf",
    "\u0007Q\u0002\u0002\u04cf\u04ef\u0007/\u0002\u0002\u04d0\u04d1\f\u0019",
    "\u0002\u0002\u04d1\u04d2\u0007Q\u0002\u0002\u04d2\u04d4\u0007\u001e",
    "\u0002\u0002\u04d3\u04d5\u0005\u00dco\u0002\u04d4\u04d3\u0003\u0002",
    "\u0002\u0002\u04d4\u04d5\u0003\u0002\u0002\u0002\u04d5\u04d6\u0003\u0002",
    "\u0002\u0002\u04d6\u04ef\u0005\u00d0i\u0002\u04d7\u04d8\f\u0018\u0002",
    "\u0002\u04d8\u04d9\u0007Q\u0002\u0002\u04d9\u04da\u0007\u001d\u0002",
    "\u0002\u04da\u04ef\u0005\u00e2r\u0002\u04db\u04dc\f\u0017\u0002\u0002",
    "\u04dc\u04dd\u0007Q\u0002\u0002\u04dd\u04ef\u0005\u00dan\u0002\u04de",
    "\u04df\f\u0016\u0002\u0002\u04df\u04e0\u0007M\u0002\u0002\u04e0\u04e1",
    "\u0005\u00c8e\u0002\u04e1\u04e2\u0007N\u0002\u0002\u04e2\u04ef\u0003",
    "\u0002\u0002\u0002\u04e3\u04e4\f\u0015\u0002\u0002\u04e4\u04e6\u0007",
    "I\u0002\u0002\u04e5\u04e7\u0005\u00c4c\u0002\u04e6\u04e5\u0003\u0002",
    "\u0002\u0002\u04e6\u04e7\u0003\u0002\u0002\u0002\u04e7\u04e8\u0003\u0002",
    "\u0002\u0002\u04e8\u04ef\u0007J\u0002\u0002\u04e9\u04ea\f\u0012\u0002",
    "\u0002\u04ea\u04ef\t\r\u0002\u0002\u04eb\u04ec\f\u000b\u0002\u0002\u04ec",
    "\u04ed\u00070\u0002\u0002\u04ed\u04ef\u0005V,\u0002\u04ee\u047c\u0003",
    "\u0002\u0002\u0002\u04ee\u047f\u0003\u0002\u0002\u0002\u04ee\u0482\u0003",
    "\u0002\u0002\u0002\u04ee\u048d\u0003\u0002\u0002\u0002\u04ee\u049f\u0003",
    "\u0002\u0002\u0002\u04ee\u04a2\u0003\u0002\u0002\u0002\u04ee\u04a5\u0003",
    "\u0002\u0002\u0002\u04ee\u04a8\u0003\u0002\u0002\u0002\u04ee\u04ab\u0003",
    "\u0002\u0002\u0002\u04ee\u04ae\u0003\u0002\u0002\u0002\u04ee\u04b1\u0003",
    "\u0002\u0002\u0002\u04ee\u04b7\u0003\u0002\u0002\u0002\u04ee\u04ba\u0003",
    "\u0002\u0002\u0002\u04ee\u04c2\u0003\u0002\u0002\u0002\u04ee\u04ca\u0003",
    "\u0002\u0002\u0002\u04ee\u04cd\u0003\u0002\u0002\u0002\u04ee\u04d0\u0003",
    "\u0002\u0002\u0002\u04ee\u04d7\u0003\u0002\u0002\u0002\u04ee\u04db\u0003",
    "\u0002\u0002\u0002\u04ee\u04de\u0003\u0002\u0002\u0002\u04ee\u04e3\u0003",
    "\u0002\u0002\u0002\u04ee\u04e9\u0003\u0002\u0002\u0002\u04ee\u04eb\u0003",
    "\u0002\u0002\u0002\u04ef\u04f2\u0003\u0002\u0002\u0002\u04f0\u04ee\u0003",
    "\u0002\u0002\u0002\u04f0\u04f1\u0003\u0002\u0002\u0002\u04f1\u00c9\u0003",
    "\u0002\u0002\u0002\u04f2\u04f0\u0003\u0002\u0002\u0002\u04f3\u04f4\u0007",
    "I\u0002\u0002\u04f4\u04f5\u0005\u00c8e\u0002\u04f5\u04f6\u0007J\u0002",
    "\u0002\u04f6\u050b\u0003\u0002\u0002\u0002\u04f7\u050b\u0007/\u0002",
    "\u0002\u04f8\u050b\u0007\u001d\u0002\u0002\u04f9\u050b\u0005r:\u0002",
    "\u04fa\u050b\u0007t\u0002\u0002\u04fb\u04fc\u0005V,\u0002\u04fc\u04fd",
    "\u0007Q\u0002\u0002\u04fd\u04fe\u0007\u0016\u0002\u0002\u04fe\u050b",
    "\u0003\u0002\u0002\u0002\u04ff\u0500\u0007\u001a\u0002\u0002\u0500\u0501",
    "\u0007Q\u0002\u0002\u0501\u050b\u0007\u0016\u0002\u0002\u0502\u0506",
    "\u0005\u00dco\u0002\u0503\u0507\u0005\u00e4s\u0002\u0504\u0505\u0007",
    "/\u0002\u0002\u0505\u0507\u0005\u00e6t\u0002\u0506\u0503\u0003\u0002",
    "\u0002\u0002\u0506\u0504\u0003\u0002\u0002\u0002\u0507\u050b\u0003\u0002",
    "\u0002\u0002\u0508\u050b\u00074\u0002\u0002\u0509\u050b\u00075\u0002",
    "\u0002\u050a\u04f3\u0003\u0002\u0002\u0002\u050a\u04f7\u0003\u0002\u0002",
    "\u0002\u050a\u04f8\u0003\u0002\u0002\u0002\u050a\u04f9\u0003\u0002\u0002",
    "\u0002\u050a\u04fa\u0003\u0002\u0002\u0002\u050a\u04fb\u0003\u0002\u0002",
    "\u0002\u050a\u04ff\u0003\u0002\u0002\u0002\u050a\u0502\u0003\u0002\u0002",
    "\u0002\u050a\u0508\u0003\u0002\u0002\u0002\u050a\u0509\u0003\u0002\u0002",
    "\u0002\u050b\u00cb\u0003\u0002\u0002\u0002\u050c\u050d\u0005\u00dco",
    "\u0002\u050d\u050e\u0005\u00ceh\u0002\u050e\u050f\u0005\u00d8m\u0002",
    "\u050f\u0518\u0003\u0002\u0002\u0002\u0510\u0515\u0005\u00ceh\u0002",
    "\u0511\u0516\u0005\u00d2j\u0002\u0512\u0516\u0005\u00d8m\u0002\u0513",
    "\u0516\u0005\u00d4k\u0002\u0514\u0516\u0005\u00d6l\u0002\u0515\u0511",
    "\u0003\u0002\u0002\u0002\u0515\u0512\u0003\u0002\u0002\u0002\u0515\u0513",
    "\u0003\u0002\u0002\u0002\u0515\u0514\u0003\u0002\u0002\u0002\u0516\u0518",
    "\u0003\u0002\u0002\u0002\u0517\u050c\u0003\u0002\u0002\u0002\u0517\u0510",
    "\u0003\u0002\u0002\u0002\u0518\u00cd\u0003\u0002\u0002\u0002\u0519\u051b",
    "\u0007t\u0002\u0002\u051a\u051c\u0005\u00dep\u0002\u051b\u051a\u0003",
    "\u0002\u0002\u0002\u051b\u051c\u0003\u0002\u0002\u0002\u051c\u0524\u0003",
    "\u0002\u0002\u0002\u051d\u051e\u0007Q\u0002\u0002\u051e\u0520\u0007",
    "t\u0002\u0002\u051f\u0521\u0005\u00dep\u0002\u0520\u051f\u0003\u0002",
    "\u0002\u0002\u0520\u0521\u0003\u0002\u0002\u0002\u0521\u0523\u0003\u0002",
    "\u0002\u0002\u0522\u051d\u0003\u0002\u0002\u0002\u0523\u0526\u0003\u0002",
    "\u0002\u0002\u0524\u0522\u0003\u0002\u0002\u0002\u0524\u0525\u0003\u0002",
    "\u0002\u0002\u0525\u052a\u0003\u0002\u0002\u0002\u0526\u0524\u0003\u0002",
    "\u0002\u0002\u0527\u0528\u0007\u001c\u0002\u0002\u0528\u052a\u0005\u00de",
    "p\u0002\u0529\u0519\u0003\u0002\u0002\u0002\u0529\u0527\u0003\u0002",
    "\u0002\u0002\u052a\u00cf\u0003\u0002\u0002\u0002\u052b\u052d\u0007t",
    "\u0002\u0002\u052c\u052e\u0005\u00e0q\u0002\u052d\u052c\u0003\u0002",
    "\u0002\u0002\u052d\u052e\u0003\u0002\u0002\u0002\u052e\u052f\u0003\u0002",
    "\u0002\u0002\u052f\u0530\u0005\u00d8m\u0002\u0530\u00d1\u0003\u0002",
    "\u0002\u0002\u0531\u054d\u0007M\u0002\u0002\u0532\u0537\u0007N\u0002",
    "\u0002\u0533\u0534\u0007M\u0002\u0002\u0534\u0536\u0007N\u0002\u0002",
    "\u0535\u0533\u0003\u0002\u0002\u0002\u0536\u0539\u0003\u0002\u0002\u0002",
    "\u0537\u0535\u0003\u0002\u0002\u0002\u0537\u0538\u0003\u0002\u0002\u0002",
    "\u0538\u053a\u0003\u0002\u0002\u0002\u0539\u0537\u0003\u0002\u0002\u0002",
    "\u053a\u054e\u0005R*\u0002\u053b\u053c\u0005\u00c8e\u0002\u053c\u0543",
    "\u0007N\u0002\u0002\u053d\u053e\u0007M\u0002\u0002\u053e\u053f\u0005",
    "\u00c8e\u0002\u053f\u0540\u0007N\u0002\u0002\u0540\u0542\u0003\u0002",
    "\u0002\u0002\u0541\u053d\u0003\u0002\u0002\u0002\u0542\u0545\u0003\u0002",
    "\u0002\u0002\u0543\u0541\u0003\u0002\u0002\u0002\u0543\u0544\u0003\u0002",
    "\u0002\u0002\u0544\u054a\u0003\u0002\u0002\u0002\u0545\u0543\u0003\u0002",
    "\u0002\u0002\u0546\u0547\u0007M\u0002\u0002\u0547\u0549\u0007N\u0002",
    "\u0002\u0548\u0546\u0003\u0002\u0002\u0002\u0549\u054c\u0003\u0002\u0002",
    "\u0002\u054a\u0548\u0003\u0002\u0002\u0002\u054a\u054b\u0003\u0002\u0002",
    "\u0002\u054b\u054e\u0003\u0002\u0002\u0002\u054c\u054a\u0003\u0002\u0002",
    "\u0002\u054d\u0532\u0003\u0002\u0002\u0002\u054d\u053b\u0003\u0002\u0002",
    "\u0002\u054e\u00d3\u0003\u0002\u0002\u0002\u054f\u0568\u0007K\u0002",
    "\u0002\u0550\u0553\u0005r:\u0002\u0551\u0553\u0005\u00c8e\u0002\u0552",
    "\u0550\u0003\u0002\u0002\u0002\u0552\u0551\u0003\u0002\u0002\u0002\u0553",
    "\u0554\u0003\u0002\u0002\u0002\u0554\u0557\u00073\u0002\u0002\u0555",
    "\u0558\u0005r:\u0002\u0556\u0558\u0005\u00c8e\u0002\u0557\u0555\u0003",
    "\u0002\u0002\u0002\u0557\u0556\u0003\u0002\u0002\u0002\u0558\u0565\u0003",
    "\u0002\u0002\u0002\u0559\u055c\u0007P\u0002\u0002\u055a\u055d\u0005",
    "r:\u0002\u055b\u055d\u0005\u00c8e\u0002\u055c\u055a\u0003\u0002\u0002",
    "\u0002\u055c\u055b\u0003\u0002\u0002\u0002\u055d\u055e\u0003\u0002\u0002",
    "\u0002\u055e\u0561\u00073\u0002\u0002\u055f\u0562\u0005r:\u0002\u0560",
    "\u0562\u0005\u00c8e\u0002\u0561\u055f\u0003\u0002\u0002\u0002\u0561",
    "\u0560\u0003\u0002\u0002\u0002\u0562\u0564\u0003\u0002\u0002\u0002\u0563",
    "\u0559\u0003\u0002\u0002\u0002\u0564\u0567\u0003\u0002\u0002\u0002\u0565",
    "\u0563\u0003\u0002\u0002\u0002\u0565\u0566\u0003\u0002\u0002\u0002\u0566",
    "\u0569\u0003\u0002\u0002\u0002\u0567\u0565\u0003\u0002\u0002\u0002\u0568",
    "\u0552\u0003\u0002\u0002\u0002\u0568\u0569\u0003\u0002\u0002\u0002\u0569",
    "\u056a\u0003\u0002\u0002\u0002\u056a\u056b\u0007L\u0002\u0002\u056b",
    "\u00d5\u0003\u0002\u0002\u0002\u056c\u056f\u0007K\u0002\u0002\u056d",
    "\u0570\u0005r:\u0002\u056e\u0570\u0005\u00c8e\u0002\u056f\u056d\u0003",
    "\u0002\u0002\u0002\u056f\u056e\u0003\u0002\u0002\u0002\u0570\u0578\u0003",
    "\u0002\u0002\u0002\u0571\u0574\u0007P\u0002\u0002\u0572\u0575\u0005",
    "r:\u0002\u0573\u0575\u0005\u00c8e\u0002\u0574\u0572\u0003\u0002\u0002",
    "\u0002\u0574\u0573\u0003\u0002\u0002\u0002\u0575\u0577\u0003\u0002\u0002",
    "\u0002\u0576\u0571\u0003\u0002\u0002\u0002\u0577\u057a\u0003\u0002\u0002",
    "\u0002\u0578\u0576\u0003\u0002\u0002\u0002\u0578\u0579\u0003\u0002\u0002",
    "\u0002\u0579\u057b\u0003\u0002\u0002\u0002\u057a\u0578\u0003\u0002\u0002",
    "\u0002\u057b\u057c\u0007L\u0002\u0002\u057c\u00d7\u0003\u0002\u0002",
    "\u0002\u057d\u057f\u0005\u00e6t\u0002\u057e\u0580\u0005(\u0015\u0002",
    "\u057f\u057e\u0003\u0002\u0002\u0002\u057f\u0580\u0003\u0002\u0002\u0002",
    "\u0580\u00d9\u0003\u0002\u0002\u0002\u0581\u0582\u0005\u00dco\u0002",
    "\u0582\u0583\u0005\u00e4s\u0002\u0583\u00db\u0003\u0002\u0002\u0002",
    "\u0584\u0585\u0007T\u0002\u0002\u0585\u0586\u0005&\u0014\u0002\u0586",
    "\u0587\u0007S\u0002\u0002\u0587\u00dd\u0003\u0002\u0002\u0002\u0588",
    "\u0589\u0007T\u0002\u0002\u0589\u058c\u0007S\u0002\u0002\u058a\u058c",
    "\u0005Z.\u0002\u058b\u0588\u0003\u0002\u0002\u0002\u058b\u058a\u0003",
    "\u0002\u0002\u0002\u058c\u00df\u0003\u0002\u0002\u0002\u058d\u058e\u0007",
    "T\u0002\u0002\u058e\u0591\u0007S\u0002\u0002\u058f\u0591\u0005\u00dc",
    "o\u0002\u0590\u058d\u0003\u0002\u0002\u0002\u0590\u058f\u0003\u0002",
    "\u0002\u0002\u0591\u00e1\u0003\u0002\u0002\u0002\u0592\u0599\u0005\u00e6",
    "t\u0002\u0593\u0594\u0007Q\u0002\u0002\u0594\u0596\u0007t\u0002\u0002",
    "\u0595\u0597\u0005\u00e6t\u0002\u0596\u0595\u0003\u0002\u0002\u0002",
    "\u0596\u0597\u0003\u0002\u0002\u0002\u0597\u0599\u0003\u0002\u0002\u0002",
    "\u0598\u0592\u0003\u0002\u0002\u0002\u0598\u0593\u0003\u0002\u0002\u0002",
    "\u0599\u00e3\u0003\u0002\u0002\u0002\u059a\u059b\u0007\u001d\u0002\u0002",
    "\u059b\u059f\u0005\u00e2r\u0002\u059c\u059d\u0007t\u0002\u0002\u059d",
    "\u059f\u0005\u00e6t\u0002\u059e\u059a\u0003\u0002\u0002\u0002\u059e",
    "\u059c\u0003\u0002\u0002\u0002\u059f\u00e5\u0003\u0002\u0002\u0002\u05a0",
    "\u05a2\u0007I\u0002\u0002\u05a1\u05a3\u0005\u00c4c\u0002\u05a2\u05a1",
    "\u0003\u0002\u0002\u0002\u05a2\u05a3\u0003\u0002\u0002\u0002\u05a3\u05a4",
    "\u0003\u0002\u0002\u0002\u05a4\u05a5\u0007J\u0002\u0002\u05a5\u00e7",
    "\u0003\u0002\u0002\u0002\u00ae\u00e9\u00ee\u00f4\u00fb\u0100\u0109\u010e",
    "\u0115\u011c\u0123\u012a\u012f\u013a\u013f\u0146\u014b\u014f\u0153\u015d",
    "\u0165\u016c\u0173\u0177\u017a\u017d\u0186\u018c\u0191\u0194\u019a\u01a0",
    "\u01a4\u01ad\u01b4\u01bd\u01c4\u01ca\u01ce\u01da\u01dd\u01e1\u01e9\u01ee",
    "\u01f2\u01fb\u020d\u0214\u0219\u0222\u022a\u0234\u023c\u0244\u0249\u0255",
    "\u025b\u0262\u0267\u026f\u0273\u0275\u0280\u0285\u028a\u028e\u0293\u029b",
    "\u02a4\u02a6\u02ad\u02b2\u02bb\u02c0\u02c3\u02c8\u02d1\u02e2\u02e4\u02ec",
    "\u02f6\u02ff\u0304\u030c\u0313\u0320\u0323\u032c\u0336\u033e\u0341\u0344",
    "\u0351\u0359\u035e\u0366\u036a\u036e\u0372\u0374\u0378\u037e\u0389\u0391",
    "\u0399\u03a5\u03bc\u03bf\u03c2\u03ca\u03ce\u03d2\u03db\u03e0\u03eb\u03f0",
    "\u03f5\u03fa\u03ff\u0406\u0413\u041c\u0425\u042b\u0435\u0439\u043d\u043f",
    "\u0443\u0448\u0458\u0466\u046b\u047a\u048a\u0491\u0496\u049c\u04bf\u04c7",
    "\u04d4\u04e6\u04ee\u04f0\u0506\u050a\u0515\u0517\u051b\u0520\u0524\u0529",
    "\u052d\u0537\u0543\u054a\u054d\u0552\u0557\u055c\u0561\u0565\u0568\u056f",
    "\u0574\u0578\u057f\u058b\u0590\u0596\u0598\u059e\u05a2"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'package'", "'import'", "'static'", "'on'", 
                     "'native'", "'synchronized'", "'transient'", "'public'", 
                     "'protected'", "'private'", "'abstract'", "'final'", 
                     "'global'", "'webservice'", "'override'", "'virtual'", 
                     "'with'", "'without'", "'sharing'", "'class'", "'extends'", 
                     "'implements'", "'interface'", "'void'", "'throws'", 
                     "'set'", "'super'", "'new'", "'before'", "'after'", 
                     "'default'", "'if'", "'else'", "'for'", "'while'", 
                     "'do'", "'try'", "'return'", "'throw'", "'break'", 
                     "'continue'", "'get'", "'catch'", "'finally'", "'this'", 
                     "'instanceof'", "'==='", "'<>'", "'=>'", null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
                     "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", 
                     "'?'", "':'", "'=='", "'<='", "'>='", "'!='", "'&&'", 
                     "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", 
                     "'&'", "'|'", "'^'", "'%'", "'+='", "'-='", "'*='", 
                     "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", 
                     "'>>>='", null, null, "'@'", "'...'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, "SoqlLiteral", "SoslLiteral", 
                      "ENUM", "GLOBAL", "WEBSERVICE", "FIND", "SELECT", 
                      "TESTMETHOD", "DB_UPDATE", "DB_UPSERT", "DB_DELETE", 
                      "DB_INSERT", "DB_UNDELETE", "SYSTEM_RUNAS", "TRIGGER", 
                      "IntegerLiteral", "FloatingPointLiteral", "BooleanLiteral", 
                      "CharacterLiteral", "StringLiteral", "NullLiteral", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", "GT", 
                      "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
                      "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", 
                      "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", 
                      "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
                      "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "Identifier", "ObjectType", "AT", "ELLIPSIS", "WS", 
                      "APEXDOC_COMMENT", "COMMENT", "LINE_COMMENT" ];

var ruleNames =  [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                   "typeDeclaration", "triggerDeclaration", "modifier", 
                   "classOrInterfaceModifier", "sharingModifier", "variableModifier", 
                   "classDeclaration", "typeParameters", "typeParameter", 
                   "typeBound", "enumDeclaration", "enumConstants", "enumConstant", 
                   "enumBodyDeclarations", "interfaceDeclaration", "typeList", 
                   "classBody", "interfaceBody", "classBodyDeclaration", 
                   "memberDeclaration", "methodDeclaration", "genericMethodDeclaration", 
                   "constructorDeclaration", "genericConstructorDeclaration", 
                   "fieldDeclaration", "propertyDeclaration", "propertyBodyDeclaration", 
                   "interfaceBodyDeclaration", "interfaceMemberDeclaration", 
                   "constDeclaration", "constantDeclarator", "interfaceMethodDeclaration", 
                   "genericInterfaceMethodDeclaration", "variableDeclarators", 
                   "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                   "arrayInitializer", "enumConstantName", "type", "classOrInterfaceType", 
                   "typeArguments", "typeArgument", "qualifiedNameList", 
                   "formalParameters", "formalParameterList", "formalParameter", 
                   "lastFormalParameter", "methodBody", "constructorBody", 
                   "triggerBody", "triggerBodyDeclaration", "qualifiedName", 
                   "literal", "triggerContextVariable", "triggerScope", 
                   "triggerEvent", "triggerEventBefore", "triggerEventAfter", 
                   "annotation", "annotationName", "elementValuePairs", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "annotationTypeDeclaration", "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "block", "blockStatement", "localVariableDeclarationStatement", 
                   "localVariableDeclaration", "statement", "propertyBlock", 
                   "getter", "setter", "catchClause", "catchType", "finallyBlock", 
                   "resourceSpecification", "resources", "resource", "forControl", 
                   "forInit", "enhancedForControl", "forUpdate", "db_shortcut_expression", 
                   "runas_expression", "parExpression", "expressionList", 
                   "statementExpression", "expression", "primary", "creator", 
                   "createdName", "innerCreator", "arrayCreatorRest", "mapCreatorRest", 
                   "setCreatorRest", "classCreatorRest", "explicitGenericInvocation", 
                   "nonWildcardTypeArguments", "typeArgumentsOrDiamond", 
                   "nonWildcardTypeArgumentsOrDiamond", "superSuffix", "explicitGenericInvocationSuffix", 
                   "arguments" ];

function ApexcodeParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ApexcodeParser.prototype = Object.create(antlr4.Parser.prototype);
ApexcodeParser.prototype.constructor = ApexcodeParser;

Object.defineProperty(ApexcodeParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ApexcodeParser.EOF = antlr4.Token.EOF;
ApexcodeParser.T__0 = 1;
ApexcodeParser.T__1 = 2;
ApexcodeParser.T__2 = 3;
ApexcodeParser.T__3 = 4;
ApexcodeParser.T__4 = 5;
ApexcodeParser.T__5 = 6;
ApexcodeParser.T__6 = 7;
ApexcodeParser.T__7 = 8;
ApexcodeParser.T__8 = 9;
ApexcodeParser.T__9 = 10;
ApexcodeParser.T__10 = 11;
ApexcodeParser.T__11 = 12;
ApexcodeParser.T__12 = 13;
ApexcodeParser.T__13 = 14;
ApexcodeParser.T__14 = 15;
ApexcodeParser.T__15 = 16;
ApexcodeParser.T__16 = 17;
ApexcodeParser.T__17 = 18;
ApexcodeParser.T__18 = 19;
ApexcodeParser.T__19 = 20;
ApexcodeParser.T__20 = 21;
ApexcodeParser.T__21 = 22;
ApexcodeParser.T__22 = 23;
ApexcodeParser.T__23 = 24;
ApexcodeParser.T__24 = 25;
ApexcodeParser.T__25 = 26;
ApexcodeParser.T__26 = 27;
ApexcodeParser.T__27 = 28;
ApexcodeParser.T__28 = 29;
ApexcodeParser.T__29 = 30;
ApexcodeParser.T__30 = 31;
ApexcodeParser.T__31 = 32;
ApexcodeParser.T__32 = 33;
ApexcodeParser.T__33 = 34;
ApexcodeParser.T__34 = 35;
ApexcodeParser.T__35 = 36;
ApexcodeParser.T__36 = 37;
ApexcodeParser.T__37 = 38;
ApexcodeParser.T__38 = 39;
ApexcodeParser.T__39 = 40;
ApexcodeParser.T__40 = 41;
ApexcodeParser.T__41 = 42;
ApexcodeParser.T__42 = 43;
ApexcodeParser.T__43 = 44;
ApexcodeParser.T__44 = 45;
ApexcodeParser.T__45 = 46;
ApexcodeParser.T__46 = 47;
ApexcodeParser.T__47 = 48;
ApexcodeParser.T__48 = 49;
ApexcodeParser.SoqlLiteral = 50;
ApexcodeParser.SoslLiteral = 51;
ApexcodeParser.ENUM = 52;
ApexcodeParser.GLOBAL = 53;
ApexcodeParser.WEBSERVICE = 54;
ApexcodeParser.FIND = 55;
ApexcodeParser.SELECT = 56;
ApexcodeParser.TESTMETHOD = 57;
ApexcodeParser.DB_UPDATE = 58;
ApexcodeParser.DB_UPSERT = 59;
ApexcodeParser.DB_DELETE = 60;
ApexcodeParser.DB_INSERT = 61;
ApexcodeParser.DB_UNDELETE = 62;
ApexcodeParser.SYSTEM_RUNAS = 63;
ApexcodeParser.TRIGGER = 64;
ApexcodeParser.IntegerLiteral = 65;
ApexcodeParser.FloatingPointLiteral = 66;
ApexcodeParser.BooleanLiteral = 67;
ApexcodeParser.CharacterLiteral = 68;
ApexcodeParser.StringLiteral = 69;
ApexcodeParser.NullLiteral = 70;
ApexcodeParser.LPAREN = 71;
ApexcodeParser.RPAREN = 72;
ApexcodeParser.LBRACE = 73;
ApexcodeParser.RBRACE = 74;
ApexcodeParser.LBRACK = 75;
ApexcodeParser.RBRACK = 76;
ApexcodeParser.SEMI = 77;
ApexcodeParser.COMMA = 78;
ApexcodeParser.DOT = 79;
ApexcodeParser.ASSIGN = 80;
ApexcodeParser.GT = 81;
ApexcodeParser.LT = 82;
ApexcodeParser.BANG = 83;
ApexcodeParser.TILDE = 84;
ApexcodeParser.QUESTION = 85;
ApexcodeParser.COLON = 86;
ApexcodeParser.EQUAL = 87;
ApexcodeParser.LE = 88;
ApexcodeParser.GE = 89;
ApexcodeParser.NOTEQUAL = 90;
ApexcodeParser.AND = 91;
ApexcodeParser.OR = 92;
ApexcodeParser.INC = 93;
ApexcodeParser.DEC = 94;
ApexcodeParser.ADD = 95;
ApexcodeParser.SUB = 96;
ApexcodeParser.MUL = 97;
ApexcodeParser.DIV = 98;
ApexcodeParser.BITAND = 99;
ApexcodeParser.BITOR = 100;
ApexcodeParser.CARET = 101;
ApexcodeParser.MOD = 102;
ApexcodeParser.ADD_ASSIGN = 103;
ApexcodeParser.SUB_ASSIGN = 104;
ApexcodeParser.MUL_ASSIGN = 105;
ApexcodeParser.DIV_ASSIGN = 106;
ApexcodeParser.AND_ASSIGN = 107;
ApexcodeParser.OR_ASSIGN = 108;
ApexcodeParser.XOR_ASSIGN = 109;
ApexcodeParser.MOD_ASSIGN = 110;
ApexcodeParser.LSHIFT_ASSIGN = 111;
ApexcodeParser.RSHIFT_ASSIGN = 112;
ApexcodeParser.URSHIFT_ASSIGN = 113;
ApexcodeParser.Identifier = 114;
ApexcodeParser.ObjectType = 115;
ApexcodeParser.AT = 116;
ApexcodeParser.ELLIPSIS = 117;
ApexcodeParser.WS = 118;
ApexcodeParser.APEXDOC_COMMENT = 119;
ApexcodeParser.COMMENT = 120;
ApexcodeParser.LINE_COMMENT = 121;

ApexcodeParser.RULE_compilationUnit = 0;
ApexcodeParser.RULE_packageDeclaration = 1;
ApexcodeParser.RULE_importDeclaration = 2;
ApexcodeParser.RULE_typeDeclaration = 3;
ApexcodeParser.RULE_triggerDeclaration = 4;
ApexcodeParser.RULE_modifier = 5;
ApexcodeParser.RULE_classOrInterfaceModifier = 6;
ApexcodeParser.RULE_sharingModifier = 7;
ApexcodeParser.RULE_variableModifier = 8;
ApexcodeParser.RULE_classDeclaration = 9;
ApexcodeParser.RULE_typeParameters = 10;
ApexcodeParser.RULE_typeParameter = 11;
ApexcodeParser.RULE_typeBound = 12;
ApexcodeParser.RULE_enumDeclaration = 13;
ApexcodeParser.RULE_enumConstants = 14;
ApexcodeParser.RULE_enumConstant = 15;
ApexcodeParser.RULE_enumBodyDeclarations = 16;
ApexcodeParser.RULE_interfaceDeclaration = 17;
ApexcodeParser.RULE_typeList = 18;
ApexcodeParser.RULE_classBody = 19;
ApexcodeParser.RULE_interfaceBody = 20;
ApexcodeParser.RULE_classBodyDeclaration = 21;
ApexcodeParser.RULE_memberDeclaration = 22;
ApexcodeParser.RULE_methodDeclaration = 23;
ApexcodeParser.RULE_genericMethodDeclaration = 24;
ApexcodeParser.RULE_constructorDeclaration = 25;
ApexcodeParser.RULE_genericConstructorDeclaration = 26;
ApexcodeParser.RULE_fieldDeclaration = 27;
ApexcodeParser.RULE_propertyDeclaration = 28;
ApexcodeParser.RULE_propertyBodyDeclaration = 29;
ApexcodeParser.RULE_interfaceBodyDeclaration = 30;
ApexcodeParser.RULE_interfaceMemberDeclaration = 31;
ApexcodeParser.RULE_constDeclaration = 32;
ApexcodeParser.RULE_constantDeclarator = 33;
ApexcodeParser.RULE_interfaceMethodDeclaration = 34;
ApexcodeParser.RULE_genericInterfaceMethodDeclaration = 35;
ApexcodeParser.RULE_variableDeclarators = 36;
ApexcodeParser.RULE_variableDeclarator = 37;
ApexcodeParser.RULE_variableDeclaratorId = 38;
ApexcodeParser.RULE_variableInitializer = 39;
ApexcodeParser.RULE_arrayInitializer = 40;
ApexcodeParser.RULE_enumConstantName = 41;
ApexcodeParser.RULE_type = 42;
ApexcodeParser.RULE_classOrInterfaceType = 43;
ApexcodeParser.RULE_typeArguments = 44;
ApexcodeParser.RULE_typeArgument = 45;
ApexcodeParser.RULE_qualifiedNameList = 46;
ApexcodeParser.RULE_formalParameters = 47;
ApexcodeParser.RULE_formalParameterList = 48;
ApexcodeParser.RULE_formalParameter = 49;
ApexcodeParser.RULE_lastFormalParameter = 50;
ApexcodeParser.RULE_methodBody = 51;
ApexcodeParser.RULE_constructorBody = 52;
ApexcodeParser.RULE_triggerBody = 53;
ApexcodeParser.RULE_triggerBodyDeclaration = 54;
ApexcodeParser.RULE_qualifiedName = 55;
ApexcodeParser.RULE_literal = 56;
ApexcodeParser.RULE_triggerContextVariable = 57;
ApexcodeParser.RULE_triggerScope = 58;
ApexcodeParser.RULE_triggerEvent = 59;
ApexcodeParser.RULE_triggerEventBefore = 60;
ApexcodeParser.RULE_triggerEventAfter = 61;
ApexcodeParser.RULE_annotation = 62;
ApexcodeParser.RULE_annotationName = 63;
ApexcodeParser.RULE_elementValuePairs = 64;
ApexcodeParser.RULE_elementValuePair = 65;
ApexcodeParser.RULE_elementValue = 66;
ApexcodeParser.RULE_elementValueArrayInitializer = 67;
ApexcodeParser.RULE_annotationTypeDeclaration = 68;
ApexcodeParser.RULE_annotationTypeBody = 69;
ApexcodeParser.RULE_annotationTypeElementDeclaration = 70;
ApexcodeParser.RULE_annotationTypeElementRest = 71;
ApexcodeParser.RULE_annotationMethodOrConstantRest = 72;
ApexcodeParser.RULE_annotationMethodRest = 73;
ApexcodeParser.RULE_annotationConstantRest = 74;
ApexcodeParser.RULE_defaultValue = 75;
ApexcodeParser.RULE_block = 76;
ApexcodeParser.RULE_blockStatement = 77;
ApexcodeParser.RULE_localVariableDeclarationStatement = 78;
ApexcodeParser.RULE_localVariableDeclaration = 79;
ApexcodeParser.RULE_statement = 80;
ApexcodeParser.RULE_propertyBlock = 81;
ApexcodeParser.RULE_getter = 82;
ApexcodeParser.RULE_setter = 83;
ApexcodeParser.RULE_catchClause = 84;
ApexcodeParser.RULE_catchType = 85;
ApexcodeParser.RULE_finallyBlock = 86;
ApexcodeParser.RULE_resourceSpecification = 87;
ApexcodeParser.RULE_resources = 88;
ApexcodeParser.RULE_resource = 89;
ApexcodeParser.RULE_forControl = 90;
ApexcodeParser.RULE_forInit = 91;
ApexcodeParser.RULE_enhancedForControl = 92;
ApexcodeParser.RULE_forUpdate = 93;
ApexcodeParser.RULE_db_shortcut_expression = 94;
ApexcodeParser.RULE_runas_expression = 95;
ApexcodeParser.RULE_parExpression = 96;
ApexcodeParser.RULE_expressionList = 97;
ApexcodeParser.RULE_statementExpression = 98;
ApexcodeParser.RULE_expression = 99;
ApexcodeParser.RULE_primary = 100;
ApexcodeParser.RULE_creator = 101;
ApexcodeParser.RULE_createdName = 102;
ApexcodeParser.RULE_innerCreator = 103;
ApexcodeParser.RULE_arrayCreatorRest = 104;
ApexcodeParser.RULE_mapCreatorRest = 105;
ApexcodeParser.RULE_setCreatorRest = 106;
ApexcodeParser.RULE_classCreatorRest = 107;
ApexcodeParser.RULE_explicitGenericInvocation = 108;
ApexcodeParser.RULE_nonWildcardTypeArguments = 109;
ApexcodeParser.RULE_typeArgumentsOrDiamond = 110;
ApexcodeParser.RULE_nonWildcardTypeArgumentsOrDiamond = 111;
ApexcodeParser.RULE_superSuffix = 112;
ApexcodeParser.RULE_explicitGenericInvocationSuffix = 113;
ApexcodeParser.RULE_arguments = 114;

function CompilationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_compilationUnit;
    return this;
}

CompilationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompilationUnitContext.prototype.constructor = CompilationUnitContext;

CompilationUnitContext.prototype.EOF = function() {
    return this.getToken(ApexcodeParser.EOF, 0);
};

CompilationUnitContext.prototype.packageDeclaration = function() {
    return this.getTypedRuleContext(PackageDeclarationContext,0);
};

CompilationUnitContext.prototype.importDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportDeclarationContext);
    } else {
        return this.getTypedRuleContext(ImportDeclarationContext,i);
    }
};

CompilationUnitContext.prototype.typeDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeDeclarationContext);
    } else {
        return this.getTypedRuleContext(TypeDeclarationContext,i);
    }
};

CompilationUnitContext.prototype.triggerDeclaration = function() {
    return this.getTypedRuleContext(TriggerDeclarationContext,0);
};

CompilationUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitCompilationUnit(this);
	}
};




ApexcodeParser.CompilationUnitContext = CompilationUnitContext;

ApexcodeParser.prototype.compilationUnit = function() {

    var localctx = new CompilationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ApexcodeParser.RULE_compilationUnit);
    var _la = 0; // Token type
    try {
        this.state = 249;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.EOF:
        case ApexcodeParser.T__0:
        case ApexcodeParser.T__1:
        case ApexcodeParser.T__2:
        case ApexcodeParser.T__7:
        case ApexcodeParser.T__8:
        case ApexcodeParser.T__9:
        case ApexcodeParser.T__10:
        case ApexcodeParser.T__11:
        case ApexcodeParser.T__12:
        case ApexcodeParser.T__13:
        case ApexcodeParser.T__14:
        case ApexcodeParser.T__15:
        case ApexcodeParser.T__16:
        case ApexcodeParser.T__17:
        case ApexcodeParser.T__19:
        case ApexcodeParser.T__22:
        case ApexcodeParser.ENUM:
        case ApexcodeParser.TESTMETHOD:
        case ApexcodeParser.SEMI:
        case ApexcodeParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 231;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
            if(la_===1) {
                this.state = 230;
                this.packageDeclaration();

            }
            this.state = 236;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ApexcodeParser.T__1) {
                this.state = 233;
                this.importDeclaration();
                this.state = 238;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 242;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__7) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__9) | (1 << ApexcodeParser.T__10) | (1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16) | (1 << ApexcodeParser.T__17) | (1 << ApexcodeParser.T__19) | (1 << ApexcodeParser.T__22))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (ApexcodeParser.ENUM - 52)) | (1 << (ApexcodeParser.TESTMETHOD - 52)) | (1 << (ApexcodeParser.SEMI - 52)))) !== 0) || _la===ApexcodeParser.AT) {
                this.state = 239;
                this.typeDeclaration();
                this.state = 244;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 245;
            this.match(ApexcodeParser.EOF);
            break;
        case ApexcodeParser.TRIGGER:
            this.enterOuterAlt(localctx, 2);
            this.state = 246;
            this.triggerDeclaration();
            this.state = 247;
            this.match(ApexcodeParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PackageDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_packageDeclaration;
    return this;
}

PackageDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PackageDeclarationContext.prototype.constructor = PackageDeclarationContext;

PackageDeclarationContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

PackageDeclarationContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

PackageDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterPackageDeclaration(this);
	}
};

PackageDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitPackageDeclaration(this);
	}
};




ApexcodeParser.PackageDeclarationContext = PackageDeclarationContext;

ApexcodeParser.prototype.packageDeclaration = function() {

    var localctx = new PackageDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ApexcodeParser.RULE_packageDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 254;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.AT) {
            this.state = 251;
            this.annotation();
            this.state = 256;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 257;
        this.match(ApexcodeParser.T__0);
        this.state = 258;
        this.qualifiedName();
        this.state = 259;
        this.match(ApexcodeParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_importDeclaration;
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

ImportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterImportDeclaration(this);
	}
};

ImportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitImportDeclaration(this);
	}
};




ApexcodeParser.ImportDeclarationContext = ImportDeclarationContext;

ApexcodeParser.prototype.importDeclaration = function() {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ApexcodeParser.RULE_importDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 261;
        this.match(ApexcodeParser.T__1);
        this.state = 263;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.T__2) {
            this.state = 262;
            this.match(ApexcodeParser.T__2);
        }

        this.state = 265;
        this.qualifiedName();
        this.state = 268;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.DOT) {
            this.state = 266;
            this.match(ApexcodeParser.DOT);
            this.state = 267;
            this.match(ApexcodeParser.MUL);
        }

        this.state = 270;
        this.match(ApexcodeParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_typeDeclaration;
    return this;
}

TypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDeclarationContext.prototype.constructor = TypeDeclarationContext;

TypeDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

TypeDeclarationContext.prototype.classOrInterfaceModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassOrInterfaceModifierContext);
    } else {
        return this.getTypedRuleContext(ClassOrInterfaceModifierContext,i);
    }
};

TypeDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

TypeDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

TypeDeclarationContext.prototype.annotationTypeDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
};

TypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTypeDeclaration(this);
	}
};

TypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTypeDeclaration(this);
	}
};




ApexcodeParser.TypeDeclarationContext = TypeDeclarationContext;

ApexcodeParser.prototype.typeDeclaration = function() {

    var localctx = new TypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ApexcodeParser.RULE_typeDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 301;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 275;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__7) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__9) | (1 << ApexcodeParser.T__10) | (1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16) | (1 << ApexcodeParser.T__17))) !== 0) || _la===ApexcodeParser.TESTMETHOD || _la===ApexcodeParser.AT) {
                this.state = 272;
                this.classOrInterfaceModifier();
                this.state = 277;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 278;
            this.classDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 282;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__7) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__9) | (1 << ApexcodeParser.T__10) | (1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16) | (1 << ApexcodeParser.T__17))) !== 0) || _la===ApexcodeParser.TESTMETHOD || _la===ApexcodeParser.AT) {
                this.state = 279;
                this.classOrInterfaceModifier();
                this.state = 284;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 285;
            this.enumDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 289;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__7) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__9) | (1 << ApexcodeParser.T__10) | (1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16) | (1 << ApexcodeParser.T__17))) !== 0) || _la===ApexcodeParser.TESTMETHOD || _la===ApexcodeParser.AT) {
                this.state = 286;
                this.classOrInterfaceModifier();
                this.state = 291;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 292;
            this.interfaceDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 296;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 293;
                    this.classOrInterfaceModifier(); 
                }
                this.state = 298;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
            }

            this.state = 299;
            this.annotationTypeDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 300;
            this.match(ApexcodeParser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_triggerDeclaration;
    return this;
}

TriggerDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerDeclarationContext.prototype.constructor = TriggerDeclarationContext;

TriggerDeclarationContext.prototype.TRIGGER = function() {
    return this.getToken(ApexcodeParser.TRIGGER, 0);
};

TriggerDeclarationContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexcodeParser.Identifier);
    } else {
        return this.getToken(ApexcodeParser.Identifier, i);
    }
};


TriggerDeclarationContext.prototype.triggerScope = function() {
    return this.getTypedRuleContext(TriggerScopeContext,0);
};

TriggerDeclarationContext.prototype.triggerBody = function() {
    return this.getTypedRuleContext(TriggerBodyContext,0);
};

TriggerDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTriggerDeclaration(this);
	}
};

TriggerDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTriggerDeclaration(this);
	}
};




ApexcodeParser.TriggerDeclarationContext = TriggerDeclarationContext;

ApexcodeParser.prototype.triggerDeclaration = function() {

    var localctx = new TriggerDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ApexcodeParser.RULE_triggerDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 303;
        this.match(ApexcodeParser.TRIGGER);
        this.state = 304;
        this.match(ApexcodeParser.Identifier);
        this.state = 305;
        this.match(ApexcodeParser.T__3);
        this.state = 306;
        this.match(ApexcodeParser.Identifier);
        this.state = 307;
        this.triggerScope();
        this.state = 308;
        this.triggerBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_modifier;
    return this;
}

ModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierContext.prototype.constructor = ModifierContext;

ModifierContext.prototype.classOrInterfaceModifier = function() {
    return this.getTypedRuleContext(ClassOrInterfaceModifierContext,0);
};

ModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterModifier(this);
	}
};

ModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitModifier(this);
	}
};




ApexcodeParser.ModifierContext = ModifierContext;

ApexcodeParser.prototype.modifier = function() {

    var localctx = new ModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ApexcodeParser.RULE_modifier);
    var _la = 0; // Token type
    try {
        this.state = 312;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.T__2:
        case ApexcodeParser.T__7:
        case ApexcodeParser.T__8:
        case ApexcodeParser.T__9:
        case ApexcodeParser.T__10:
        case ApexcodeParser.T__11:
        case ApexcodeParser.T__12:
        case ApexcodeParser.T__13:
        case ApexcodeParser.T__14:
        case ApexcodeParser.T__15:
        case ApexcodeParser.T__16:
        case ApexcodeParser.T__17:
        case ApexcodeParser.TESTMETHOD:
        case ApexcodeParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 310;
            this.classOrInterfaceModifier();
            break;
        case ApexcodeParser.T__4:
        case ApexcodeParser.T__5:
        case ApexcodeParser.T__6:
            this.enterOuterAlt(localctx, 2);
            this.state = 311;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__4) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__6))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOrInterfaceModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_classOrInterfaceModifier;
    return this;
}

ClassOrInterfaceModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOrInterfaceModifierContext.prototype.constructor = ClassOrInterfaceModifierContext;

ClassOrInterfaceModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ClassOrInterfaceModifierContext.prototype.TESTMETHOD = function() {
    return this.getToken(ApexcodeParser.TESTMETHOD, 0);
};

ClassOrInterfaceModifierContext.prototype.sharingModifier = function() {
    return this.getTypedRuleContext(SharingModifierContext,0);
};

ClassOrInterfaceModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterClassOrInterfaceModifier(this);
	}
};

ClassOrInterfaceModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitClassOrInterfaceModifier(this);
	}
};




ApexcodeParser.ClassOrInterfaceModifierContext = ClassOrInterfaceModifierContext;

ApexcodeParser.prototype.classOrInterfaceModifier = function() {

    var localctx = new ClassOrInterfaceModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ApexcodeParser.RULE_classOrInterfaceModifier);
    var _la = 0; // Token type
    try {
        this.state = 317;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 314;
            this.annotation();
            break;
        case ApexcodeParser.T__2:
        case ApexcodeParser.T__7:
        case ApexcodeParser.T__8:
        case ApexcodeParser.T__9:
        case ApexcodeParser.T__10:
        case ApexcodeParser.T__11:
        case ApexcodeParser.T__12:
        case ApexcodeParser.T__13:
        case ApexcodeParser.T__14:
        case ApexcodeParser.T__15:
        case ApexcodeParser.TESTMETHOD:
            this.enterOuterAlt(localctx, 2);
            this.state = 315;
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__7) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__9) | (1 << ApexcodeParser.T__10) | (1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15))) !== 0) || _la===ApexcodeParser.TESTMETHOD)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case ApexcodeParser.T__16:
        case ApexcodeParser.T__17:
            this.enterOuterAlt(localctx, 3);
            this.state = 316;
            this.sharingModifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharingModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_sharingModifier;
    return this;
}

SharingModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharingModifierContext.prototype.constructor = SharingModifierContext;


SharingModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterSharingModifier(this);
	}
};

SharingModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitSharingModifier(this);
	}
};




ApexcodeParser.SharingModifierContext = SharingModifierContext;

ApexcodeParser.prototype.sharingModifier = function() {

    var localctx = new SharingModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ApexcodeParser.RULE_sharingModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 319;
        _la = this._input.LA(1);
        if(!(_la===ApexcodeParser.T__16 || _la===ApexcodeParser.T__17)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 320;
        this.match(ApexcodeParser.T__18);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_variableModifier;
    return this;
}

VariableModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableModifierContext.prototype.constructor = VariableModifierContext;

VariableModifierContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

VariableModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterVariableModifier(this);
	}
};

VariableModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitVariableModifier(this);
	}
};




ApexcodeParser.VariableModifierContext = VariableModifierContext;

ApexcodeParser.prototype.variableModifier = function() {

    var localctx = new VariableModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ApexcodeParser.RULE_variableModifier);
    try {
        this.state = 324;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.T__11:
            this.enterOuterAlt(localctx, 1);
            this.state = 322;
            this.match(ApexcodeParser.T__11);
            break;
        case ApexcodeParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 323;
            this.annotation();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_classDeclaration;
    return this;
}

ClassDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationContext.prototype.constructor = ClassDeclarationContext;

ClassDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

ClassDeclarationContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

ClassDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ClassDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

ClassDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterClassDeclaration(this);
	}
};

ClassDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitClassDeclaration(this);
	}
};




ApexcodeParser.ClassDeclarationContext = ClassDeclarationContext;

ApexcodeParser.prototype.classDeclaration = function() {

    var localctx = new ClassDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ApexcodeParser.RULE_classDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 326;
        this.match(ApexcodeParser.T__19);
        this.state = 327;
        this.match(ApexcodeParser.Identifier);
        this.state = 329;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.LT) {
            this.state = 328;
            this.typeParameters();
        }

        this.state = 333;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.T__20) {
            this.state = 331;
            this.match(ApexcodeParser.T__20);
            this.state = 332;
            this.type();
        }

        this.state = 337;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.T__21) {
            this.state = 335;
            this.match(ApexcodeParser.T__21);
            this.state = 336;
            this.typeList();
        }

        this.state = 339;
        this.classBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_typeParameters;
    return this;
}

TypeParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParametersContext.prototype.constructor = TypeParametersContext;

TypeParametersContext.prototype.typeParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeParameterContext);
    } else {
        return this.getTypedRuleContext(TypeParameterContext,i);
    }
};

TypeParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTypeParameters(this);
	}
};

TypeParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTypeParameters(this);
	}
};




ApexcodeParser.TypeParametersContext = TypeParametersContext;

ApexcodeParser.prototype.typeParameters = function() {

    var localctx = new TypeParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ApexcodeParser.RULE_typeParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 341;
        this.match(ApexcodeParser.LT);
        this.state = 342;
        this.typeParameter();
        this.state = 347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.COMMA) {
            this.state = 343;
            this.match(ApexcodeParser.COMMA);
            this.state = 344;
            this.typeParameter();
            this.state = 349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 350;
        this.match(ApexcodeParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_typeParameter;
    return this;
}

TypeParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeParameterContext.prototype.constructor = TypeParameterContext;

TypeParameterContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

TypeParameterContext.prototype.typeBound = function() {
    return this.getTypedRuleContext(TypeBoundContext,0);
};

TypeParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTypeParameter(this);
	}
};

TypeParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTypeParameter(this);
	}
};




ApexcodeParser.TypeParameterContext = TypeParameterContext;

ApexcodeParser.prototype.typeParameter = function() {

    var localctx = new TypeParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ApexcodeParser.RULE_typeParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 352;
        this.match(ApexcodeParser.Identifier);
        this.state = 355;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.T__20) {
            this.state = 353;
            this.match(ApexcodeParser.T__20);
            this.state = 354;
            this.typeBound();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_typeBound;
    return this;
}

TypeBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeBoundContext.prototype.constructor = TypeBoundContext;

TypeBoundContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeBoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTypeBound(this);
	}
};

TypeBoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTypeBound(this);
	}
};




ApexcodeParser.TypeBoundContext = TypeBoundContext;

ApexcodeParser.prototype.typeBound = function() {

    var localctx = new TypeBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ApexcodeParser.RULE_typeBound);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 357;
        this.type();
        this.state = 362;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.BITAND) {
            this.state = 358;
            this.match(ApexcodeParser.BITAND);
            this.state = 359;
            this.type();
            this.state = 364;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_enumDeclaration;
    return this;
}

EnumDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDeclarationContext.prototype.constructor = EnumDeclarationContext;

EnumDeclarationContext.prototype.ENUM = function() {
    return this.getToken(ApexcodeParser.ENUM, 0);
};

EnumDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

EnumDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

EnumDeclarationContext.prototype.enumConstants = function() {
    return this.getTypedRuleContext(EnumConstantsContext,0);
};

EnumDeclarationContext.prototype.enumBodyDeclarations = function() {
    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
};

EnumDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterEnumDeclaration(this);
	}
};

EnumDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitEnumDeclaration(this);
	}
};




ApexcodeParser.EnumDeclarationContext = EnumDeclarationContext;

ApexcodeParser.prototype.enumDeclaration = function() {

    var localctx = new EnumDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ApexcodeParser.RULE_enumDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 365;
        this.match(ApexcodeParser.ENUM);
        this.state = 366;
        this.match(ApexcodeParser.Identifier);
        this.state = 369;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.T__21) {
            this.state = 367;
            this.match(ApexcodeParser.T__21);
            this.state = 368;
            this.typeList();
        }

        this.state = 371;
        this.match(ApexcodeParser.LBRACE);
        this.state = 373;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.Identifier || _la===ApexcodeParser.AT) {
            this.state = 372;
            this.enumConstants();
        }

        this.state = 376;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.COMMA) {
            this.state = 375;
            this.match(ApexcodeParser.COMMA);
        }

        this.state = 379;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.SEMI) {
            this.state = 378;
            this.enumBodyDeclarations();
        }

        this.state = 381;
        this.match(ApexcodeParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_enumConstants;
    return this;
}

EnumConstantsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantsContext.prototype.constructor = EnumConstantsContext;

EnumConstantsContext.prototype.enumConstant = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumConstantContext);
    } else {
        return this.getTypedRuleContext(EnumConstantContext,i);
    }
};

EnumConstantsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterEnumConstants(this);
	}
};

EnumConstantsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitEnumConstants(this);
	}
};




ApexcodeParser.EnumConstantsContext = EnumConstantsContext;

ApexcodeParser.prototype.enumConstants = function() {

    var localctx = new EnumConstantsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ApexcodeParser.RULE_enumConstants);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 383;
        this.enumConstant();
        this.state = 388;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,25,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 384;
                this.match(ApexcodeParser.COMMA);
                this.state = 385;
                this.enumConstant(); 
            }
            this.state = 390;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,25,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_enumConstant;
    return this;
}

EnumConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantContext.prototype.constructor = EnumConstantContext;

EnumConstantContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

EnumConstantContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

EnumConstantContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

EnumConstantContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

EnumConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterEnumConstant(this);
	}
};

EnumConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitEnumConstant(this);
	}
};




ApexcodeParser.EnumConstantContext = EnumConstantContext;

ApexcodeParser.prototype.enumConstant = function() {

    var localctx = new EnumConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ApexcodeParser.RULE_enumConstant);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 394;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.AT) {
            this.state = 391;
            this.annotation();
            this.state = 396;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 397;
        this.match(ApexcodeParser.Identifier);
        this.state = 399;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.LPAREN) {
            this.state = 398;
            this.arguments();
        }

        this.state = 402;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.LBRACE) {
            this.state = 401;
            this.classBody();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumBodyDeclarationsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_enumBodyDeclarations;
    return this;
}

EnumBodyDeclarationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumBodyDeclarationsContext.prototype.constructor = EnumBodyDeclarationsContext;

EnumBodyDeclarationsContext.prototype.classBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
    }
};

EnumBodyDeclarationsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterEnumBodyDeclarations(this);
	}
};

EnumBodyDeclarationsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitEnumBodyDeclarations(this);
	}
};




ApexcodeParser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext;

ApexcodeParser.prototype.enumBodyDeclarations = function() {

    var localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ApexcodeParser.RULE_enumBodyDeclarations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 404;
        this.match(ApexcodeParser.SEMI);
        this.state = 408;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__4) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__6) | (1 << ApexcodeParser.T__7) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__9) | (1 << ApexcodeParser.T__10) | (1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16) | (1 << ApexcodeParser.T__17) | (1 << ApexcodeParser.T__19) | (1 << ApexcodeParser.T__22) | (1 << ApexcodeParser.T__23) | (1 << ApexcodeParser.T__25))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (ApexcodeParser.ENUM - 52)) | (1 << (ApexcodeParser.TESTMETHOD - 52)) | (1 << (ApexcodeParser.LBRACE - 52)) | (1 << (ApexcodeParser.SEMI - 52)) | (1 << (ApexcodeParser.LT - 52)))) !== 0) || _la===ApexcodeParser.Identifier || _la===ApexcodeParser.AT) {
            this.state = 405;
            this.classBodyDeclaration();
            this.state = 410;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_interfaceDeclaration;
    return this;
}

InterfaceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceDeclarationContext.prototype.constructor = InterfaceDeclarationContext;

InterfaceDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

InterfaceDeclarationContext.prototype.interfaceBody = function() {
    return this.getTypedRuleContext(InterfaceBodyContext,0);
};

InterfaceDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

InterfaceDeclarationContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

InterfaceDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterInterfaceDeclaration(this);
	}
};

InterfaceDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitInterfaceDeclaration(this);
	}
};




ApexcodeParser.InterfaceDeclarationContext = InterfaceDeclarationContext;

ApexcodeParser.prototype.interfaceDeclaration = function() {

    var localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ApexcodeParser.RULE_interfaceDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 411;
        this.match(ApexcodeParser.T__22);
        this.state = 412;
        this.match(ApexcodeParser.Identifier);
        this.state = 414;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.LT) {
            this.state = 413;
            this.typeParameters();
        }

        this.state = 418;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.T__20) {
            this.state = 416;
            this.match(ApexcodeParser.T__20);
            this.state = 417;
            this.typeList();
        }

        this.state = 420;
        this.interfaceBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_typeList;
    return this;
}

TypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeListContext.prototype.constructor = TypeListContext;

TypeListContext.prototype.type = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeContext);
    } else {
        return this.getTypedRuleContext(TypeContext,i);
    }
};

TypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTypeList(this);
	}
};

TypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTypeList(this);
	}
};




ApexcodeParser.TypeListContext = TypeListContext;

ApexcodeParser.prototype.typeList = function() {

    var localctx = new TypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ApexcodeParser.RULE_typeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 422;
        this.type();
        this.state = 427;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.COMMA) {
            this.state = 423;
            this.match(ApexcodeParser.COMMA);
            this.state = 424;
            this.type();
            this.state = 429;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_classBody;
    return this;
}

ClassBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyContext.prototype.constructor = ClassBodyContext;

ClassBodyContext.prototype.classBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
    }
};

ClassBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterClassBody(this);
	}
};

ClassBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitClassBody(this);
	}
};




ApexcodeParser.ClassBodyContext = ClassBodyContext;

ApexcodeParser.prototype.classBody = function() {

    var localctx = new ClassBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ApexcodeParser.RULE_classBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 430;
        this.match(ApexcodeParser.LBRACE);
        this.state = 434;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__4) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__6) | (1 << ApexcodeParser.T__7) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__9) | (1 << ApexcodeParser.T__10) | (1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16) | (1 << ApexcodeParser.T__17) | (1 << ApexcodeParser.T__19) | (1 << ApexcodeParser.T__22) | (1 << ApexcodeParser.T__23) | (1 << ApexcodeParser.T__25))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (ApexcodeParser.ENUM - 52)) | (1 << (ApexcodeParser.TESTMETHOD - 52)) | (1 << (ApexcodeParser.LBRACE - 52)) | (1 << (ApexcodeParser.SEMI - 52)) | (1 << (ApexcodeParser.LT - 52)))) !== 0) || _la===ApexcodeParser.Identifier || _la===ApexcodeParser.AT) {
            this.state = 431;
            this.classBodyDeclaration();
            this.state = 436;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 437;
        this.match(ApexcodeParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_interfaceBody;
    return this;
}

InterfaceBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceBodyContext.prototype.constructor = InterfaceBodyContext;

InterfaceBodyContext.prototype.interfaceBodyDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceBodyDeclarationContext);
    } else {
        return this.getTypedRuleContext(InterfaceBodyDeclarationContext,i);
    }
};

InterfaceBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterInterfaceBody(this);
	}
};

InterfaceBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitInterfaceBody(this);
	}
};




ApexcodeParser.InterfaceBodyContext = InterfaceBodyContext;

ApexcodeParser.prototype.interfaceBody = function() {

    var localctx = new InterfaceBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ApexcodeParser.RULE_interfaceBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 439;
        this.match(ApexcodeParser.LBRACE);
        this.state = 443;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__4) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__6) | (1 << ApexcodeParser.T__7) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__9) | (1 << ApexcodeParser.T__10) | (1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16) | (1 << ApexcodeParser.T__17) | (1 << ApexcodeParser.T__19) | (1 << ApexcodeParser.T__22) | (1 << ApexcodeParser.T__23) | (1 << ApexcodeParser.T__25))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (ApexcodeParser.ENUM - 52)) | (1 << (ApexcodeParser.TESTMETHOD - 52)) | (1 << (ApexcodeParser.SEMI - 52)) | (1 << (ApexcodeParser.LT - 52)))) !== 0) || _la===ApexcodeParser.Identifier || _la===ApexcodeParser.AT) {
            this.state = 440;
            this.interfaceBodyDeclaration();
            this.state = 445;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 446;
        this.match(ApexcodeParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_classBodyDeclaration;
    return this;
}

ClassBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassBodyDeclarationContext.prototype.constructor = ClassBodyDeclarationContext;

ClassBodyDeclarationContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ClassBodyDeclarationContext.prototype.memberDeclaration = function() {
    return this.getTypedRuleContext(MemberDeclarationContext,0);
};

ClassBodyDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

ClassBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterClassBodyDeclaration(this);
	}
};

ClassBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitClassBodyDeclaration(this);
	}
};




ApexcodeParser.ClassBodyDeclarationContext = ClassBodyDeclarationContext;

ApexcodeParser.prototype.classBodyDeclaration = function() {

    var localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ApexcodeParser.RULE_classBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.state = 460;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 448;
            this.match(ApexcodeParser.SEMI);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 450;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ApexcodeParser.T__2) {
                this.state = 449;
                this.match(ApexcodeParser.T__2);
            }

            this.state = 452;
            this.block();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 456;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 453;
                    this.modifier(); 
                }
                this.state = 458;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
            }

            this.state = 459;
            this.memberDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_memberDeclaration;
    return this;
}

MemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MemberDeclarationContext.prototype.constructor = MemberDeclarationContext;

MemberDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

MemberDeclarationContext.prototype.genericMethodDeclaration = function() {
    return this.getTypedRuleContext(GenericMethodDeclarationContext,0);
};

MemberDeclarationContext.prototype.fieldDeclaration = function() {
    return this.getTypedRuleContext(FieldDeclarationContext,0);
};

MemberDeclarationContext.prototype.constructorDeclaration = function() {
    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
};

MemberDeclarationContext.prototype.genericConstructorDeclaration = function() {
    return this.getTypedRuleContext(GenericConstructorDeclarationContext,0);
};

MemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

MemberDeclarationContext.prototype.annotationTypeDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
};

MemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

MemberDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

MemberDeclarationContext.prototype.propertyDeclaration = function() {
    return this.getTypedRuleContext(PropertyDeclarationContext,0);
};

MemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterMemberDeclaration(this);
	}
};

MemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitMemberDeclaration(this);
	}
};




ApexcodeParser.MemberDeclarationContext = MemberDeclarationContext;

ApexcodeParser.prototype.memberDeclaration = function() {

    var localctx = new MemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ApexcodeParser.RULE_memberDeclaration);
    try {
        this.state = 472;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 462;
            this.methodDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 463;
            this.genericMethodDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 464;
            this.fieldDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 465;
            this.constructorDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 466;
            this.genericConstructorDeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 467;
            this.interfaceDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 468;
            this.annotationTypeDeclaration();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 469;
            this.classDeclaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 470;
            this.enumDeclaration();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 471;
            this.propertyDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_methodDeclaration;
    return this;
}

MethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclarationContext.prototype.constructor = MethodDeclarationContext;

MethodDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

MethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

MethodDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

MethodDeclarationContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

MethodDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

MethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitMethodDeclaration(this);
	}
};




ApexcodeParser.MethodDeclarationContext = MethodDeclarationContext;

ApexcodeParser.prototype.methodDeclaration = function() {

    var localctx = new MethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ApexcodeParser.RULE_methodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 475;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.T__14) {
            this.state = 474;
            this.match(ApexcodeParser.T__14);
        }

        this.state = 479;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.T__25:
        case ApexcodeParser.Identifier:
            this.state = 477;
            this.type();
            break;
        case ApexcodeParser.T__23:
            this.state = 478;
            this.match(ApexcodeParser.T__23);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 481;
        this.match(ApexcodeParser.Identifier);
        this.state = 482;
        this.formalParameters();
        this.state = 487;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.LBRACK) {
            this.state = 483;
            this.match(ApexcodeParser.LBRACK);
            this.state = 484;
            this.match(ApexcodeParser.RBRACK);
            this.state = 489;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 492;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.T__24) {
            this.state = 490;
            this.match(ApexcodeParser.T__24);
            this.state = 491;
            this.qualifiedNameList();
        }

        this.state = 496;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.LBRACE:
            this.state = 494;
            this.methodBody();
            break;
        case ApexcodeParser.SEMI:
            this.state = 495;
            this.match(ApexcodeParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GenericMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_genericMethodDeclaration;
    return this;
}

GenericMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericMethodDeclarationContext.prototype.constructor = GenericMethodDeclarationContext;

GenericMethodDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

GenericMethodDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

GenericMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterGenericMethodDeclaration(this);
	}
};

GenericMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitGenericMethodDeclaration(this);
	}
};




ApexcodeParser.GenericMethodDeclarationContext = GenericMethodDeclarationContext;

ApexcodeParser.prototype.genericMethodDeclaration = function() {

    var localctx = new GenericMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ApexcodeParser.RULE_genericMethodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 498;
        this.typeParameters();
        this.state = 499;
        this.methodDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_constructorDeclaration;
    return this;
}

ConstructorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorDeclarationContext.prototype.constructor = ConstructorDeclarationContext;

ConstructorDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

ConstructorDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

ConstructorDeclarationContext.prototype.constructorBody = function() {
    return this.getTypedRuleContext(ConstructorBodyContext,0);
};

ConstructorDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

ConstructorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterConstructorDeclaration(this);
	}
};

ConstructorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitConstructorDeclaration(this);
	}
};




ApexcodeParser.ConstructorDeclarationContext = ConstructorDeclarationContext;

ApexcodeParser.prototype.constructorDeclaration = function() {

    var localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ApexcodeParser.RULE_constructorDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 501;
        this.match(ApexcodeParser.Identifier);
        this.state = 502;
        this.formalParameters();
        this.state = 505;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.T__24) {
            this.state = 503;
            this.match(ApexcodeParser.T__24);
            this.state = 504;
            this.qualifiedNameList();
        }

        this.state = 507;
        this.constructorBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GenericConstructorDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_genericConstructorDeclaration;
    return this;
}

GenericConstructorDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericConstructorDeclarationContext.prototype.constructor = GenericConstructorDeclarationContext;

GenericConstructorDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

GenericConstructorDeclarationContext.prototype.constructorDeclaration = function() {
    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
};

GenericConstructorDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterGenericConstructorDeclaration(this);
	}
};

GenericConstructorDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitGenericConstructorDeclaration(this);
	}
};




ApexcodeParser.GenericConstructorDeclarationContext = GenericConstructorDeclarationContext;

ApexcodeParser.prototype.genericConstructorDeclaration = function() {

    var localctx = new GenericConstructorDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ApexcodeParser.RULE_genericConstructorDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 509;
        this.typeParameters();
        this.state = 510;
        this.constructorDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FieldDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_fieldDeclaration;
    return this;
}

FieldDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldDeclarationContext.prototype.constructor = FieldDeclarationContext;

FieldDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FieldDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

FieldDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterFieldDeclaration(this);
	}
};

FieldDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitFieldDeclaration(this);
	}
};




ApexcodeParser.FieldDeclarationContext = FieldDeclarationContext;

ApexcodeParser.prototype.fieldDeclaration = function() {

    var localctx = new FieldDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ApexcodeParser.RULE_fieldDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 512;
        this.type();
        this.state = 513;
        this.variableDeclarators();
        this.state = 514;
        this.match(ApexcodeParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_propertyDeclaration;
    return this;
}

PropertyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDeclarationContext.prototype.constructor = PropertyDeclarationContext;

PropertyDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PropertyDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

PropertyDeclarationContext.prototype.propertyBodyDeclaration = function() {
    return this.getTypedRuleContext(PropertyBodyDeclarationContext,0);
};

PropertyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterPropertyDeclaration(this);
	}
};

PropertyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitPropertyDeclaration(this);
	}
};




ApexcodeParser.PropertyDeclarationContext = PropertyDeclarationContext;

ApexcodeParser.prototype.propertyDeclaration = function() {

    var localctx = new PropertyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ApexcodeParser.RULE_propertyDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 516;
        this.type();
        this.state = 517;
        this.variableDeclarators();
        this.state = 518;
        this.propertyBodyDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_propertyBodyDeclaration;
    return this;
}

PropertyBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyBodyDeclarationContext.prototype.constructor = PropertyBodyDeclarationContext;

PropertyBodyDeclarationContext.prototype.propertyBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyBlockContext);
    } else {
        return this.getTypedRuleContext(PropertyBlockContext,i);
    }
};

PropertyBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterPropertyBodyDeclaration(this);
	}
};

PropertyBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitPropertyBodyDeclaration(this);
	}
};




ApexcodeParser.PropertyBodyDeclarationContext = PropertyBodyDeclarationContext;

ApexcodeParser.prototype.propertyBodyDeclaration = function() {

    var localctx = new PropertyBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ApexcodeParser.RULE_propertyBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 520;
        this.match(ApexcodeParser.LBRACE);
        this.state = 521;
        this.propertyBlock();
        this.state = 523;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__4) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__6) | (1 << ApexcodeParser.T__7) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__9) | (1 << ApexcodeParser.T__10) | (1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16) | (1 << ApexcodeParser.T__17) | (1 << ApexcodeParser.T__25))) !== 0) || _la===ApexcodeParser.T__41 || _la===ApexcodeParser.TESTMETHOD || _la===ApexcodeParser.AT) {
            this.state = 522;
            this.propertyBlock();
        }

        this.state = 525;
        this.match(ApexcodeParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_interfaceBodyDeclaration;
    return this;
}

InterfaceBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceBodyDeclarationContext.prototype.constructor = InterfaceBodyDeclarationContext;

InterfaceBodyDeclarationContext.prototype.interfaceMemberDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMemberDeclarationContext,0);
};

InterfaceBodyDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

InterfaceBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterInterfaceBodyDeclaration(this);
	}
};

InterfaceBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitInterfaceBodyDeclaration(this);
	}
};




ApexcodeParser.InterfaceBodyDeclarationContext = InterfaceBodyDeclarationContext;

ApexcodeParser.prototype.interfaceBodyDeclaration = function() {

    var localctx = new InterfaceBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ApexcodeParser.RULE_interfaceBodyDeclaration);
    try {
        this.state = 535;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.T__2:
        case ApexcodeParser.T__4:
        case ApexcodeParser.T__5:
        case ApexcodeParser.T__6:
        case ApexcodeParser.T__7:
        case ApexcodeParser.T__8:
        case ApexcodeParser.T__9:
        case ApexcodeParser.T__10:
        case ApexcodeParser.T__11:
        case ApexcodeParser.T__12:
        case ApexcodeParser.T__13:
        case ApexcodeParser.T__14:
        case ApexcodeParser.T__15:
        case ApexcodeParser.T__16:
        case ApexcodeParser.T__17:
        case ApexcodeParser.T__19:
        case ApexcodeParser.T__22:
        case ApexcodeParser.T__23:
        case ApexcodeParser.T__25:
        case ApexcodeParser.ENUM:
        case ApexcodeParser.TESTMETHOD:
        case ApexcodeParser.LT:
        case ApexcodeParser.Identifier:
        case ApexcodeParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 530;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 527;
                    this.modifier(); 
                }
                this.state = 532;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
            }

            this.state = 533;
            this.interfaceMemberDeclaration();
            break;
        case ApexcodeParser.SEMI:
            this.enterOuterAlt(localctx, 2);
            this.state = 534;
            this.match(ApexcodeParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMemberDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_interfaceMemberDeclaration;
    return this;
}

InterfaceMemberDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMemberDeclarationContext.prototype.constructor = InterfaceMemberDeclarationContext;

InterfaceMemberDeclarationContext.prototype.constDeclaration = function() {
    return this.getTypedRuleContext(ConstDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.interfaceMethodDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.genericInterfaceMethodDeclaration = function() {
    return this.getTypedRuleContext(GenericInterfaceMethodDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.annotationTypeDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

InterfaceMemberDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterInterfaceMemberDeclaration(this);
	}
};

InterfaceMemberDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitInterfaceMemberDeclaration(this);
	}
};




ApexcodeParser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext;

ApexcodeParser.prototype.interfaceMemberDeclaration = function() {

    var localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ApexcodeParser.RULE_interfaceMemberDeclaration);
    try {
        this.state = 544;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 537;
            this.constDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 538;
            this.interfaceMethodDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 539;
            this.genericInterfaceMethodDeclaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 540;
            this.interfaceDeclaration();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 541;
            this.annotationTypeDeclaration();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 542;
            this.classDeclaration();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 543;
            this.enumDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_constDeclaration;
    return this;
}

ConstDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstDeclarationContext.prototype.constructor = ConstDeclarationContext;

ConstDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ConstDeclarationContext.prototype.constantDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantDeclaratorContext);
    } else {
        return this.getTypedRuleContext(ConstantDeclaratorContext,i);
    }
};

ConstDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterConstDeclaration(this);
	}
};

ConstDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitConstDeclaration(this);
	}
};




ApexcodeParser.ConstDeclarationContext = ConstDeclarationContext;

ApexcodeParser.prototype.constDeclaration = function() {

    var localctx = new ConstDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ApexcodeParser.RULE_constDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 546;
        this.type();
        this.state = 547;
        this.constantDeclarator();
        this.state = 552;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.COMMA) {
            this.state = 548;
            this.match(ApexcodeParser.COMMA);
            this.state = 549;
            this.constantDeclarator();
            this.state = 554;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 555;
        this.match(ApexcodeParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_constantDeclarator;
    return this;
}

ConstantDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantDeclaratorContext.prototype.constructor = ConstantDeclaratorContext;

ConstantDeclaratorContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

ConstantDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

ConstantDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterConstantDeclarator(this);
	}
};

ConstantDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitConstantDeclarator(this);
	}
};




ApexcodeParser.ConstantDeclaratorContext = ConstantDeclaratorContext;

ApexcodeParser.prototype.constantDeclarator = function() {

    var localctx = new ConstantDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ApexcodeParser.RULE_constantDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 557;
        this.match(ApexcodeParser.Identifier);
        this.state = 562;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.LBRACK) {
            this.state = 558;
            this.match(ApexcodeParser.LBRACK);
            this.state = 559;
            this.match(ApexcodeParser.RBRACK);
            this.state = 564;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 565;
        this.match(ApexcodeParser.ASSIGN);
        this.state = 566;
        this.variableInitializer();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_interfaceMethodDeclaration;
    return this;
}

InterfaceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceMethodDeclarationContext.prototype.constructor = InterfaceMethodDeclarationContext;

InterfaceMethodDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

InterfaceMethodDeclarationContext.prototype.formalParameters = function() {
    return this.getTypedRuleContext(FormalParametersContext,0);
};

InterfaceMethodDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

InterfaceMethodDeclarationContext.prototype.qualifiedNameList = function() {
    return this.getTypedRuleContext(QualifiedNameListContext,0);
};

InterfaceMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterInterfaceMethodDeclaration(this);
	}
};

InterfaceMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitInterfaceMethodDeclaration(this);
	}
};




ApexcodeParser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext;

ApexcodeParser.prototype.interfaceMethodDeclaration = function() {

    var localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ApexcodeParser.RULE_interfaceMethodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.T__25:
        case ApexcodeParser.Identifier:
            this.state = 568;
            this.type();
            break;
        case ApexcodeParser.T__23:
            this.state = 569;
            this.match(ApexcodeParser.T__23);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 572;
        this.match(ApexcodeParser.Identifier);
        this.state = 573;
        this.formalParameters();
        this.state = 578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.LBRACK) {
            this.state = 574;
            this.match(ApexcodeParser.LBRACK);
            this.state = 575;
            this.match(ApexcodeParser.RBRACK);
            this.state = 580;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 583;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.T__24) {
            this.state = 581;
            this.match(ApexcodeParser.T__24);
            this.state = 582;
            this.qualifiedNameList();
        }

        this.state = 585;
        this.match(ApexcodeParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GenericInterfaceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_genericInterfaceMethodDeclaration;
    return this;
}

GenericInterfaceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericInterfaceMethodDeclarationContext.prototype.constructor = GenericInterfaceMethodDeclarationContext;

GenericInterfaceMethodDeclarationContext.prototype.typeParameters = function() {
    return this.getTypedRuleContext(TypeParametersContext,0);
};

GenericInterfaceMethodDeclarationContext.prototype.interfaceMethodDeclaration = function() {
    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
};

GenericInterfaceMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterGenericInterfaceMethodDeclaration(this);
	}
};

GenericInterfaceMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitGenericInterfaceMethodDeclaration(this);
	}
};




ApexcodeParser.GenericInterfaceMethodDeclarationContext = GenericInterfaceMethodDeclarationContext;

ApexcodeParser.prototype.genericInterfaceMethodDeclaration = function() {

    var localctx = new GenericInterfaceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ApexcodeParser.RULE_genericInterfaceMethodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 587;
        this.typeParameters();
        this.state = 588;
        this.interfaceMethodDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_variableDeclarators;
    return this;
}

VariableDeclaratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorsContext.prototype.constructor = VariableDeclaratorsContext;

VariableDeclaratorsContext.prototype.variableDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclaratorContext);
    } else {
        return this.getTypedRuleContext(VariableDeclaratorContext,i);
    }
};

VariableDeclaratorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterVariableDeclarators(this);
	}
};

VariableDeclaratorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitVariableDeclarators(this);
	}
};




ApexcodeParser.VariableDeclaratorsContext = VariableDeclaratorsContext;

ApexcodeParser.prototype.variableDeclarators = function() {

    var localctx = new VariableDeclaratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ApexcodeParser.RULE_variableDeclarators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 590;
        this.variableDeclarator();
        this.state = 595;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.COMMA) {
            this.state = 591;
            this.match(ApexcodeParser.COMMA);
            this.state = 592;
            this.variableDeclarator();
            this.state = 597;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_variableDeclarator;
    return this;
}

VariableDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorContext.prototype.constructor = VariableDeclaratorContext;

VariableDeclaratorContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

VariableDeclaratorContext.prototype.variableInitializer = function() {
    return this.getTypedRuleContext(VariableInitializerContext,0);
};

VariableDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterVariableDeclarator(this);
	}
};

VariableDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitVariableDeclarator(this);
	}
};




ApexcodeParser.VariableDeclaratorContext = VariableDeclaratorContext;

ApexcodeParser.prototype.variableDeclarator = function() {

    var localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ApexcodeParser.RULE_variableDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        this.variableDeclaratorId();
        this.state = 601;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.ASSIGN) {
            this.state = 599;
            this.match(ApexcodeParser.ASSIGN);
            this.state = 600;
            this.variableInitializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclaratorIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_variableDeclaratorId;
    return this;
}

VariableDeclaratorIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclaratorIdContext.prototype.constructor = VariableDeclaratorIdContext;

VariableDeclaratorIdContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

VariableDeclaratorIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterVariableDeclaratorId(this);
	}
};

VariableDeclaratorIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitVariableDeclaratorId(this);
	}
};




ApexcodeParser.VariableDeclaratorIdContext = VariableDeclaratorIdContext;

ApexcodeParser.prototype.variableDeclaratorId = function() {

    var localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ApexcodeParser.RULE_variableDeclaratorId);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 603;
        this.match(ApexcodeParser.Identifier);
        this.state = 608;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.LBRACK) {
            this.state = 604;
            this.match(ApexcodeParser.LBRACK);
            this.state = 605;
            this.match(ApexcodeParser.RBRACK);
            this.state = 610;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_variableInitializer;
    return this;
}

VariableInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableInitializerContext.prototype.constructor = VariableInitializerContext;

VariableInitializerContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

VariableInitializerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterVariableInitializer(this);
	}
};

VariableInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitVariableInitializer(this);
	}
};




ApexcodeParser.VariableInitializerContext = VariableInitializerContext;

ApexcodeParser.prototype.variableInitializer = function() {

    var localctx = new VariableInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ApexcodeParser.RULE_variableInitializer);
    try {
        this.state = 613;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.LBRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 611;
            this.arrayInitializer();
            break;
        case ApexcodeParser.T__23:
        case ApexcodeParser.T__25:
        case ApexcodeParser.T__26:
        case ApexcodeParser.T__27:
        case ApexcodeParser.T__44:
        case ApexcodeParser.SoqlLiteral:
        case ApexcodeParser.SoslLiteral:
        case ApexcodeParser.TRIGGER:
        case ApexcodeParser.IntegerLiteral:
        case ApexcodeParser.FloatingPointLiteral:
        case ApexcodeParser.BooleanLiteral:
        case ApexcodeParser.CharacterLiteral:
        case ApexcodeParser.StringLiteral:
        case ApexcodeParser.NullLiteral:
        case ApexcodeParser.LPAREN:
        case ApexcodeParser.LT:
        case ApexcodeParser.BANG:
        case ApexcodeParser.TILDE:
        case ApexcodeParser.INC:
        case ApexcodeParser.DEC:
        case ApexcodeParser.ADD:
        case ApexcodeParser.SUB:
        case ApexcodeParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 612;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_arrayInitializer;
    return this;
}

ArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayInitializerContext.prototype.constructor = ArrayInitializerContext;

ArrayInitializerContext.prototype.variableInitializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableInitializerContext);
    } else {
        return this.getTypedRuleContext(VariableInitializerContext,i);
    }
};

ArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterArrayInitializer(this);
	}
};

ArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitArrayInitializer(this);
	}
};




ApexcodeParser.ArrayInitializerContext = ArrayInitializerContext;

ApexcodeParser.prototype.arrayInitializer = function() {

    var localctx = new ArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ApexcodeParser.RULE_arrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 615;
        this.match(ApexcodeParser.LBRACE);
        this.state = 627;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ApexcodeParser.T__23 - 24)) | (1 << (ApexcodeParser.T__25 - 24)) | (1 << (ApexcodeParser.T__26 - 24)) | (1 << (ApexcodeParser.T__27 - 24)) | (1 << (ApexcodeParser.T__44 - 24)) | (1 << (ApexcodeParser.SoqlLiteral - 24)) | (1 << (ApexcodeParser.SoslLiteral - 24)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexcodeParser.TRIGGER - 64)) | (1 << (ApexcodeParser.IntegerLiteral - 64)) | (1 << (ApexcodeParser.FloatingPointLiteral - 64)) | (1 << (ApexcodeParser.BooleanLiteral - 64)) | (1 << (ApexcodeParser.CharacterLiteral - 64)) | (1 << (ApexcodeParser.StringLiteral - 64)) | (1 << (ApexcodeParser.NullLiteral - 64)) | (1 << (ApexcodeParser.LPAREN - 64)) | (1 << (ApexcodeParser.LBRACE - 64)) | (1 << (ApexcodeParser.LT - 64)) | (1 << (ApexcodeParser.BANG - 64)) | (1 << (ApexcodeParser.TILDE - 64)) | (1 << (ApexcodeParser.INC - 64)) | (1 << (ApexcodeParser.DEC - 64)) | (1 << (ApexcodeParser.ADD - 64)))) !== 0) || _la===ApexcodeParser.SUB || _la===ApexcodeParser.Identifier) {
            this.state = 616;
            this.variableInitializer();
            this.state = 621;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 617;
                    this.match(ApexcodeParser.COMMA);
                    this.state = 618;
                    this.variableInitializer(); 
                }
                this.state = 623;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
            }

            this.state = 625;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ApexcodeParser.COMMA) {
                this.state = 624;
                this.match(ApexcodeParser.COMMA);
            }

        }

        this.state = 629;
        this.match(ApexcodeParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumConstantNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_enumConstantName;
    return this;
}

EnumConstantNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumConstantNameContext.prototype.constructor = EnumConstantNameContext;

EnumConstantNameContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

EnumConstantNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterEnumConstantName(this);
	}
};

EnumConstantNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitEnumConstantName(this);
	}
};




ApexcodeParser.EnumConstantNameContext = EnumConstantNameContext;

ApexcodeParser.prototype.enumConstantName = function() {

    var localctx = new EnumConstantNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ApexcodeParser.RULE_enumConstantName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 631;
        this.match(ApexcodeParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_type;
    return this;
}

TypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeContext.prototype.constructor = TypeContext;

TypeContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

TypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterType(this);
	}
};

TypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitType(this);
	}
};




ApexcodeParser.TypeContext = TypeContext;

ApexcodeParser.prototype.type = function() {

    var localctx = new TypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ApexcodeParser.RULE_type);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.classOrInterfaceType();
        this.state = 638;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 634;
                this.match(ApexcodeParser.LBRACK);
                this.state = 635;
                this.match(ApexcodeParser.RBRACK); 
            }
            this.state = 640;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassOrInterfaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_classOrInterfaceType;
    return this;
}

ClassOrInterfaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassOrInterfaceTypeContext.prototype.constructor = ClassOrInterfaceTypeContext;

ClassOrInterfaceTypeContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexcodeParser.Identifier);
    } else {
        return this.getToken(ApexcodeParser.Identifier, i);
    }
};


ClassOrInterfaceTypeContext.prototype.typeArguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentsContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentsContext,i);
    }
};

ClassOrInterfaceTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterClassOrInterfaceType(this);
	}
};

ClassOrInterfaceTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitClassOrInterfaceType(this);
	}
};




ApexcodeParser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext;

ApexcodeParser.prototype.classOrInterfaceType = function() {

    var localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ApexcodeParser.RULE_classOrInterfaceType);
    try {
        this.state = 657;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 641;
            this.match(ApexcodeParser.Identifier);
            this.state = 643;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
            if(la_===1) {
                this.state = 642;
                this.typeArguments();

            }
            this.state = 652;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 645;
                    this.match(ApexcodeParser.DOT);
                    this.state = 646;
                    this.match(ApexcodeParser.Identifier);
                    this.state = 648;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
                    if(la_===1) {
                        this.state = 647;
                        this.typeArguments();

                    } 
                }
                this.state = 654;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
            }

            break;
        case ApexcodeParser.T__25:
            this.enterOuterAlt(localctx, 2);
            this.state = 655;
            this.match(ApexcodeParser.T__25);
            this.state = 656;
            this.typeArguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_typeArguments;
    return this;
}

TypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsContext.prototype.constructor = TypeArgumentsContext;

TypeArgumentsContext.prototype.typeArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentContext,i);
    }
};

TypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTypeArguments(this);
	}
};

TypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTypeArguments(this);
	}
};




ApexcodeParser.TypeArgumentsContext = TypeArgumentsContext;

ApexcodeParser.prototype.typeArguments = function() {

    var localctx = new TypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ApexcodeParser.RULE_typeArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 659;
        this.match(ApexcodeParser.LT);
        this.state = 660;
        this.typeArgument();
        this.state = 665;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.COMMA) {
            this.state = 661;
            this.match(ApexcodeParser.COMMA);
            this.state = 662;
            this.typeArgument();
            this.state = 667;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 668;
        this.match(ApexcodeParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_typeArgument;
    return this;
}

TypeArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentContext.prototype.constructor = TypeArgumentContext;

TypeArgumentContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

TypeArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTypeArgument(this);
	}
};

TypeArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTypeArgument(this);
	}
};




ApexcodeParser.TypeArgumentContext = TypeArgumentContext;

ApexcodeParser.prototype.typeArgument = function() {

    var localctx = new TypeArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ApexcodeParser.RULE_typeArgument);
    var _la = 0; // Token type
    try {
        this.state = 676;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.T__25:
        case ApexcodeParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 670;
            this.type();
            break;
        case ApexcodeParser.QUESTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 671;
            this.match(ApexcodeParser.QUESTION);
            this.state = 674;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ApexcodeParser.T__20 || _la===ApexcodeParser.T__26) {
                this.state = 672;
                _la = this._input.LA(1);
                if(!(_la===ApexcodeParser.T__20 || _la===ApexcodeParser.T__26)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 673;
                this.type();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_qualifiedNameList;
    return this;
}

QualifiedNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameListContext.prototype.constructor = QualifiedNameListContext;

QualifiedNameListContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

QualifiedNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterQualifiedNameList(this);
	}
};

QualifiedNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitQualifiedNameList(this);
	}
};




ApexcodeParser.QualifiedNameListContext = QualifiedNameListContext;

ApexcodeParser.prototype.qualifiedNameList = function() {

    var localctx = new QualifiedNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ApexcodeParser.RULE_qualifiedNameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 678;
        this.qualifiedName();
        this.state = 683;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.COMMA) {
            this.state = 679;
            this.match(ApexcodeParser.COMMA);
            this.state = 680;
            this.qualifiedName();
            this.state = 685;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_formalParameters;
    return this;
}

FormalParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParametersContext.prototype.constructor = FormalParametersContext;

FormalParametersContext.prototype.formalParameterList = function() {
    return this.getTypedRuleContext(FormalParameterListContext,0);
};

FormalParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterFormalParameters(this);
	}
};

FormalParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitFormalParameters(this);
	}
};




ApexcodeParser.FormalParametersContext = FormalParametersContext;

ApexcodeParser.prototype.formalParameters = function() {

    var localctx = new FormalParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ApexcodeParser.RULE_formalParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 686;
        this.match(ApexcodeParser.LPAREN);
        this.state = 688;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.T__11 || _la===ApexcodeParser.T__25 || _la===ApexcodeParser.Identifier || _la===ApexcodeParser.AT) {
            this.state = 687;
            this.formalParameterList();
        }

        this.state = 690;
        this.match(ApexcodeParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_formalParameterList;
    return this;
}

FormalParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterListContext.prototype.constructor = FormalParameterListContext;

FormalParameterListContext.prototype.formalParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FormalParameterContext);
    } else {
        return this.getTypedRuleContext(FormalParameterContext,i);
    }
};

FormalParameterListContext.prototype.lastFormalParameter = function() {
    return this.getTypedRuleContext(LastFormalParameterContext,0);
};

FormalParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterFormalParameterList(this);
	}
};

FormalParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitFormalParameterList(this);
	}
};




ApexcodeParser.FormalParameterListContext = FormalParameterListContext;

ApexcodeParser.prototype.formalParameterList = function() {

    var localctx = new FormalParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ApexcodeParser.RULE_formalParameterList);
    var _la = 0; // Token type
    try {
        this.state = 705;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 692;
            this.formalParameter();
            this.state = 697;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 693;
                    this.match(ApexcodeParser.COMMA);
                    this.state = 694;
                    this.formalParameter(); 
                }
                this.state = 699;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
            }

            this.state = 702;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ApexcodeParser.COMMA) {
                this.state = 700;
                this.match(ApexcodeParser.COMMA);
                this.state = 701;
                this.lastFormalParameter();
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 704;
            this.lastFormalParameter();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_formalParameter;
    return this;
}

FormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FormalParameterContext.prototype.constructor = FormalParameterContext;

FormalParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

FormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

FormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

FormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterFormalParameter(this);
	}
};

FormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitFormalParameter(this);
	}
};




ApexcodeParser.FormalParameterContext = FormalParameterContext;

ApexcodeParser.prototype.formalParameter = function() {

    var localctx = new FormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ApexcodeParser.RULE_formalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 710;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.T__11 || _la===ApexcodeParser.AT) {
            this.state = 707;
            this.variableModifier();
            this.state = 712;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 713;
        this.type();
        this.state = 714;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LastFormalParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_lastFormalParameter;
    return this;
}

LastFormalParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LastFormalParameterContext.prototype.constructor = LastFormalParameterContext;

LastFormalParameterContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

LastFormalParameterContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

LastFormalParameterContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LastFormalParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterLastFormalParameter(this);
	}
};

LastFormalParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitLastFormalParameter(this);
	}
};




ApexcodeParser.LastFormalParameterContext = LastFormalParameterContext;

ApexcodeParser.prototype.lastFormalParameter = function() {

    var localctx = new LastFormalParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ApexcodeParser.RULE_lastFormalParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 719;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.T__11 || _la===ApexcodeParser.AT) {
            this.state = 716;
            this.variableModifier();
            this.state = 721;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 722;
        this.type();
        this.state = 723;
        this.match(ApexcodeParser.ELLIPSIS);
        this.state = 724;
        this.variableDeclaratorId();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_methodBody;
    return this;
}

MethodBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodBodyContext.prototype.constructor = MethodBodyContext;

MethodBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

MethodBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterMethodBody(this);
	}
};

MethodBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitMethodBody(this);
	}
};




ApexcodeParser.MethodBodyContext = MethodBodyContext;

ApexcodeParser.prototype.methodBody = function() {

    var localctx = new MethodBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ApexcodeParser.RULE_methodBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 726;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructorBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_constructorBody;
    return this;
}

ConstructorBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructorBodyContext.prototype.constructor = ConstructorBodyContext;

ConstructorBodyContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ConstructorBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterConstructorBody(this);
	}
};

ConstructorBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitConstructorBody(this);
	}
};




ApexcodeParser.ConstructorBodyContext = ConstructorBodyContext;

ApexcodeParser.prototype.constructorBody = function() {

    var localctx = new ConstructorBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ApexcodeParser.RULE_constructorBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 728;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_triggerBody;
    return this;
}

TriggerBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerBodyContext.prototype.constructor = TriggerBodyContext;

TriggerBodyContext.prototype.triggerBodyDeclaration = function() {
    return this.getTypedRuleContext(TriggerBodyDeclarationContext,0);
};

TriggerBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTriggerBody(this);
	}
};

TriggerBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTriggerBody(this);
	}
};




ApexcodeParser.TriggerBodyContext = TriggerBodyContext;

ApexcodeParser.prototype.triggerBody = function() {

    var localctx = new TriggerBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ApexcodeParser.RULE_triggerBody);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 730;
        this.match(ApexcodeParser.LBRACE);
        this.state = 731;
        this.triggerBodyDeclaration();
        this.state = 732;
        this.match(ApexcodeParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerBodyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_triggerBodyDeclaration;
    return this;
}

TriggerBodyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerBodyDeclarationContext.prototype.constructor = TriggerBodyDeclarationContext;

TriggerBodyDeclarationContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

TriggerBodyDeclarationContext.prototype.methodDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MethodDeclarationContext);
    } else {
        return this.getTypedRuleContext(MethodDeclarationContext,i);
    }
};

TriggerBodyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTriggerBodyDeclaration(this);
	}
};

TriggerBodyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTriggerBodyDeclaration(this);
	}
};




ApexcodeParser.TriggerBodyDeclarationContext = TriggerBodyDeclarationContext;

ApexcodeParser.prototype.triggerBodyDeclaration = function() {

    var localctx = new TriggerBodyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ApexcodeParser.RULE_triggerBodyDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 738;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__7) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__9) | (1 << ApexcodeParser.T__10) | (1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16) | (1 << ApexcodeParser.T__17) | (1 << ApexcodeParser.T__19) | (1 << ApexcodeParser.T__22) | (1 << ApexcodeParser.T__23) | (1 << ApexcodeParser.T__25) | (1 << ApexcodeParser.T__26) | (1 << ApexcodeParser.T__27))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexcodeParser.T__31 - 32)) | (1 << (ApexcodeParser.T__33 - 32)) | (1 << (ApexcodeParser.T__34 - 32)) | (1 << (ApexcodeParser.T__35 - 32)) | (1 << (ApexcodeParser.T__36 - 32)) | (1 << (ApexcodeParser.T__37 - 32)) | (1 << (ApexcodeParser.T__38 - 32)) | (1 << (ApexcodeParser.T__39 - 32)) | (1 << (ApexcodeParser.T__40 - 32)) | (1 << (ApexcodeParser.T__44 - 32)) | (1 << (ApexcodeParser.SoqlLiteral - 32)) | (1 << (ApexcodeParser.SoslLiteral - 32)) | (1 << (ApexcodeParser.ENUM - 32)) | (1 << (ApexcodeParser.TESTMETHOD - 32)) | (1 << (ApexcodeParser.DB_UPDATE - 32)) | (1 << (ApexcodeParser.DB_UPSERT - 32)) | (1 << (ApexcodeParser.DB_DELETE - 32)) | (1 << (ApexcodeParser.DB_INSERT - 32)) | (1 << (ApexcodeParser.DB_UNDELETE - 32)) | (1 << (ApexcodeParser.SYSTEM_RUNAS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexcodeParser.TRIGGER - 64)) | (1 << (ApexcodeParser.IntegerLiteral - 64)) | (1 << (ApexcodeParser.FloatingPointLiteral - 64)) | (1 << (ApexcodeParser.BooleanLiteral - 64)) | (1 << (ApexcodeParser.CharacterLiteral - 64)) | (1 << (ApexcodeParser.StringLiteral - 64)) | (1 << (ApexcodeParser.NullLiteral - 64)) | (1 << (ApexcodeParser.LPAREN - 64)) | (1 << (ApexcodeParser.LBRACE - 64)) | (1 << (ApexcodeParser.SEMI - 64)) | (1 << (ApexcodeParser.LT - 64)) | (1 << (ApexcodeParser.BANG - 64)) | (1 << (ApexcodeParser.TILDE - 64)) | (1 << (ApexcodeParser.INC - 64)) | (1 << (ApexcodeParser.DEC - 64)) | (1 << (ApexcodeParser.ADD - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ApexcodeParser.SUB - 96)) | (1 << (ApexcodeParser.Identifier - 96)) | (1 << (ApexcodeParser.AT - 96)))) !== 0)) {
            this.state = 736;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
            switch(la_) {
            case 1:
                this.state = 734;
                this.blockStatement();
                break;

            case 2:
                this.state = 735;
                this.methodDeclaration();
                break;

            }
            this.state = 740;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifiedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_qualifiedName;
    return this;
}

QualifiedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifiedNameContext.prototype.constructor = QualifiedNameContext;

QualifiedNameContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexcodeParser.Identifier);
    } else {
        return this.getToken(ApexcodeParser.Identifier, i);
    }
};


QualifiedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterQualifiedName(this);
	}
};

QualifiedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitQualifiedName(this);
	}
};




ApexcodeParser.QualifiedNameContext = QualifiedNameContext;

ApexcodeParser.prototype.qualifiedName = function() {

    var localctx = new QualifiedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ApexcodeParser.RULE_qualifiedName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 741;
        this.match(ApexcodeParser.Identifier);
        this.state = 746;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 742;
                this.match(ApexcodeParser.DOT);
                this.state = 743;
                this.match(ApexcodeParser.Identifier); 
            }
            this.state = 748;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.IntegerLiteral = function() {
    return this.getToken(ApexcodeParser.IntegerLiteral, 0);
};

LiteralContext.prototype.FloatingPointLiteral = function() {
    return this.getToken(ApexcodeParser.FloatingPointLiteral, 0);
};

LiteralContext.prototype.CharacterLiteral = function() {
    return this.getToken(ApexcodeParser.CharacterLiteral, 0);
};

LiteralContext.prototype.StringLiteral = function() {
    return this.getToken(ApexcodeParser.StringLiteral, 0);
};

LiteralContext.prototype.BooleanLiteral = function() {
    return this.getToken(ApexcodeParser.BooleanLiteral, 0);
};

LiteralContext.prototype.triggerContextVariable = function() {
    return this.getTypedRuleContext(TriggerContextVariableContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitLiteral(this);
	}
};




ApexcodeParser.LiteralContext = LiteralContext;

ApexcodeParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ApexcodeParser.RULE_literal);
    try {
        this.state = 756;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.IntegerLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 749;
            this.match(ApexcodeParser.IntegerLiteral);
            break;
        case ApexcodeParser.FloatingPointLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 750;
            this.match(ApexcodeParser.FloatingPointLiteral);
            break;
        case ApexcodeParser.CharacterLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 751;
            this.match(ApexcodeParser.CharacterLiteral);
            break;
        case ApexcodeParser.StringLiteral:
            this.enterOuterAlt(localctx, 4);
            this.state = 752;
            this.match(ApexcodeParser.StringLiteral);
            break;
        case ApexcodeParser.BooleanLiteral:
            this.enterOuterAlt(localctx, 5);
            this.state = 753;
            this.match(ApexcodeParser.BooleanLiteral);
            break;
        case ApexcodeParser.NullLiteral:
            this.enterOuterAlt(localctx, 6);
            this.state = 754;
            this.match(ApexcodeParser.NullLiteral);
            break;
        case ApexcodeParser.TRIGGER:
            this.enterOuterAlt(localctx, 7);
            this.state = 755;
            this.triggerContextVariable();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerContextVariableContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_triggerContextVariable;
    return this;
}

TriggerContextVariableContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerContextVariableContext.prototype.constructor = TriggerContextVariableContext;

TriggerContextVariableContext.prototype.TRIGGER = function() {
    return this.getToken(ApexcodeParser.TRIGGER, 0);
};

TriggerContextVariableContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TriggerContextVariableContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTriggerContextVariable(this);
	}
};

TriggerContextVariableContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTriggerContextVariable(this);
	}
};




ApexcodeParser.TriggerContextVariableContext = TriggerContextVariableContext;

ApexcodeParser.prototype.triggerContextVariable = function() {

    var localctx = new TriggerContextVariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ApexcodeParser.RULE_triggerContextVariable);
    try {
        this.state = 770;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 758;
            this.match(ApexcodeParser.TRIGGER);
            this.state = 759;
            this.match(ApexcodeParser.DOT);
            this.state = 760;
            this.match(ApexcodeParser.T__27);
            this.state = 765;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
            if(la_===1) {
                this.state = 761;
                this.match(ApexcodeParser.LBRACK);
                this.state = 762;
                this.expression(0);
                this.state = 763;
                this.match(ApexcodeParser.RBRACK);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 767;
            this.match(ApexcodeParser.TRIGGER);
            this.state = 768;
            this.match(ApexcodeParser.DOT);
            this.state = 769;
            this.expression(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerScopeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_triggerScope;
    return this;
}

TriggerScopeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerScopeContext.prototype.constructor = TriggerScopeContext;

TriggerScopeContext.prototype.triggerEvent = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TriggerEventContext);
    } else {
        return this.getTypedRuleContext(TriggerEventContext,i);
    }
};

TriggerScopeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTriggerScope(this);
	}
};

TriggerScopeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTriggerScope(this);
	}
};




ApexcodeParser.TriggerScopeContext = TriggerScopeContext;

ApexcodeParser.prototype.triggerScope = function() {

    var localctx = new TriggerScopeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ApexcodeParser.RULE_triggerScope);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 772;
        this.match(ApexcodeParser.LPAREN);
        this.state = 773;
        this.triggerEvent();
        this.state = 778;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.COMMA) {
            this.state = 774;
            this.match(ApexcodeParser.COMMA);
            this.state = 775;
            this.triggerEvent();
            this.state = 780;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 781;
        this.match(ApexcodeParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerEventContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_triggerEvent;
    return this;
}

TriggerEventContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerEventContext.prototype.constructor = TriggerEventContext;

TriggerEventContext.prototype.triggerEventBefore = function() {
    return this.getTypedRuleContext(TriggerEventBeforeContext,0);
};

TriggerEventContext.prototype.triggerEventAfter = function() {
    return this.getTypedRuleContext(TriggerEventAfterContext,0);
};

TriggerEventContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTriggerEvent(this);
	}
};

TriggerEventContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTriggerEvent(this);
	}
};




ApexcodeParser.TriggerEventContext = TriggerEventContext;

ApexcodeParser.prototype.triggerEvent = function() {

    var localctx = new TriggerEventContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ApexcodeParser.RULE_triggerEvent);
    try {
        this.state = 785;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.T__28:
            this.enterOuterAlt(localctx, 1);
            this.state = 783;
            this.triggerEventBefore();
            break;
        case ApexcodeParser.T__29:
            this.enterOuterAlt(localctx, 2);
            this.state = 784;
            this.triggerEventAfter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerEventBeforeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_triggerEventBefore;
    return this;
}

TriggerEventBeforeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerEventBeforeContext.prototype.constructor = TriggerEventBeforeContext;

TriggerEventBeforeContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

TriggerEventBeforeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTriggerEventBefore(this);
	}
};

TriggerEventBeforeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTriggerEventBefore(this);
	}
};




ApexcodeParser.TriggerEventBeforeContext = TriggerEventBeforeContext;

ApexcodeParser.prototype.triggerEventBefore = function() {

    var localctx = new TriggerEventBeforeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ApexcodeParser.RULE_triggerEventBefore);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 787;
        this.match(ApexcodeParser.T__28);

        this.state = 788;
        this.match(ApexcodeParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriggerEventAfterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_triggerEventAfter;
    return this;
}

TriggerEventAfterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriggerEventAfterContext.prototype.constructor = TriggerEventAfterContext;

TriggerEventAfterContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

TriggerEventAfterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTriggerEventAfter(this);
	}
};

TriggerEventAfterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTriggerEventAfter(this);
	}
};




ApexcodeParser.TriggerEventAfterContext = TriggerEventAfterContext;

ApexcodeParser.prototype.triggerEventAfter = function() {

    var localctx = new TriggerEventAfterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ApexcodeParser.RULE_triggerEventAfter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 790;
        this.match(ApexcodeParser.T__29);

        this.state = 791;
        this.match(ApexcodeParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.annotationName = function() {
    return this.getTypedRuleContext(AnnotationNameContext,0);
};

AnnotationContext.prototype.elementValuePairs = function() {
    return this.getTypedRuleContext(ElementValuePairsContext,0);
};

AnnotationContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

AnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterAnnotation(this);
	}
};

AnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitAnnotation(this);
	}
};




ApexcodeParser.AnnotationContext = AnnotationContext;

ApexcodeParser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ApexcodeParser.RULE_annotation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 793;
        this.match(ApexcodeParser.AT);
        this.state = 794;
        this.annotationName();
        this.state = 801;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.LPAREN) {
            this.state = 795;
            this.match(ApexcodeParser.LPAREN);
            this.state = 798;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
            if(la_===1) {
                this.state = 796;
                this.elementValuePairs();

            } else if(la_===2) {
                this.state = 797;
                this.elementValue();

            }
            this.state = 800;
            this.match(ApexcodeParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_annotationName;
    return this;
}

AnnotationNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationNameContext.prototype.constructor = AnnotationNameContext;

AnnotationNameContext.prototype.qualifiedName = function() {
    return this.getTypedRuleContext(QualifiedNameContext,0);
};

AnnotationNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterAnnotationName(this);
	}
};

AnnotationNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitAnnotationName(this);
	}
};




ApexcodeParser.AnnotationNameContext = AnnotationNameContext;

ApexcodeParser.prototype.annotationName = function() {

    var localctx = new AnnotationNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ApexcodeParser.RULE_annotationName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 803;
        this.qualifiedName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValuePairsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_elementValuePairs;
    return this;
}

ElementValuePairsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairsContext.prototype.constructor = ElementValuePairsContext;

ElementValuePairsContext.prototype.elementValuePair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValuePairContext);
    } else {
        return this.getTypedRuleContext(ElementValuePairContext,i);
    }
};

ElementValuePairsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterElementValuePairs(this);
	}
};

ElementValuePairsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitElementValuePairs(this);
	}
};




ApexcodeParser.ElementValuePairsContext = ElementValuePairsContext;

ApexcodeParser.prototype.elementValuePairs = function() {

    var localctx = new ElementValuePairsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ApexcodeParser.RULE_elementValuePairs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 805;
        this.elementValuePair();
        this.state = 810;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.COMMA) {
            this.state = 806;
            this.match(ApexcodeParser.COMMA);
            this.state = 807;
            this.elementValuePair();
            this.state = 812;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValuePairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_elementValuePair;
    return this;
}

ElementValuePairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValuePairContext.prototype.constructor = ElementValuePairContext;

ElementValuePairContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

ElementValuePairContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

ElementValuePairContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterElementValuePair(this);
	}
};

ElementValuePairContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitElementValuePair(this);
	}
};




ApexcodeParser.ElementValuePairContext = ElementValuePairContext;

ApexcodeParser.prototype.elementValuePair = function() {

    var localctx = new ElementValuePairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ApexcodeParser.RULE_elementValuePair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 813;
        this.match(ApexcodeParser.Identifier);
        this.state = 814;
        this.match(ApexcodeParser.ASSIGN);
        this.state = 815;
        this.elementValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_elementValue;
    return this;
}

ElementValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueContext.prototype.constructor = ElementValueContext;

ElementValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElementValueContext.prototype.annotation = function() {
    return this.getTypedRuleContext(AnnotationContext,0);
};

ElementValueContext.prototype.elementValueArrayInitializer = function() {
    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
};

ElementValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterElementValue(this);
	}
};

ElementValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitElementValue(this);
	}
};




ApexcodeParser.ElementValueContext = ElementValueContext;

ApexcodeParser.prototype.elementValue = function() {

    var localctx = new ElementValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ApexcodeParser.RULE_elementValue);
    try {
        this.state = 820;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.T__23:
        case ApexcodeParser.T__25:
        case ApexcodeParser.T__26:
        case ApexcodeParser.T__27:
        case ApexcodeParser.T__44:
        case ApexcodeParser.SoqlLiteral:
        case ApexcodeParser.SoslLiteral:
        case ApexcodeParser.TRIGGER:
        case ApexcodeParser.IntegerLiteral:
        case ApexcodeParser.FloatingPointLiteral:
        case ApexcodeParser.BooleanLiteral:
        case ApexcodeParser.CharacterLiteral:
        case ApexcodeParser.StringLiteral:
        case ApexcodeParser.NullLiteral:
        case ApexcodeParser.LPAREN:
        case ApexcodeParser.LT:
        case ApexcodeParser.BANG:
        case ApexcodeParser.TILDE:
        case ApexcodeParser.INC:
        case ApexcodeParser.DEC:
        case ApexcodeParser.ADD:
        case ApexcodeParser.SUB:
        case ApexcodeParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 817;
            this.expression(0);
            break;
        case ApexcodeParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 818;
            this.annotation();
            break;
        case ApexcodeParser.LBRACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 819;
            this.elementValueArrayInitializer();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementValueArrayInitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_elementValueArrayInitializer;
    return this;
}

ElementValueArrayInitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementValueArrayInitializerContext.prototype.constructor = ElementValueArrayInitializerContext;

ElementValueArrayInitializerContext.prototype.elementValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementValueContext);
    } else {
        return this.getTypedRuleContext(ElementValueContext,i);
    }
};

ElementValueArrayInitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterElementValueArrayInitializer(this);
	}
};

ElementValueArrayInitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitElementValueArrayInitializer(this);
	}
};




ApexcodeParser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext;

ApexcodeParser.prototype.elementValueArrayInitializer = function() {

    var localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ApexcodeParser.RULE_elementValueArrayInitializer);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 822;
        this.match(ApexcodeParser.LBRACE);
        this.state = 831;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ApexcodeParser.T__23 - 24)) | (1 << (ApexcodeParser.T__25 - 24)) | (1 << (ApexcodeParser.T__26 - 24)) | (1 << (ApexcodeParser.T__27 - 24)) | (1 << (ApexcodeParser.T__44 - 24)) | (1 << (ApexcodeParser.SoqlLiteral - 24)) | (1 << (ApexcodeParser.SoslLiteral - 24)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexcodeParser.TRIGGER - 64)) | (1 << (ApexcodeParser.IntegerLiteral - 64)) | (1 << (ApexcodeParser.FloatingPointLiteral - 64)) | (1 << (ApexcodeParser.BooleanLiteral - 64)) | (1 << (ApexcodeParser.CharacterLiteral - 64)) | (1 << (ApexcodeParser.StringLiteral - 64)) | (1 << (ApexcodeParser.NullLiteral - 64)) | (1 << (ApexcodeParser.LPAREN - 64)) | (1 << (ApexcodeParser.LBRACE - 64)) | (1 << (ApexcodeParser.LT - 64)) | (1 << (ApexcodeParser.BANG - 64)) | (1 << (ApexcodeParser.TILDE - 64)) | (1 << (ApexcodeParser.INC - 64)) | (1 << (ApexcodeParser.DEC - 64)) | (1 << (ApexcodeParser.ADD - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ApexcodeParser.SUB - 96)) | (1 << (ApexcodeParser.Identifier - 96)) | (1 << (ApexcodeParser.AT - 96)))) !== 0)) {
            this.state = 823;
            this.elementValue();
            this.state = 828;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,88,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 824;
                    this.match(ApexcodeParser.COMMA);
                    this.state = 825;
                    this.elementValue(); 
                }
                this.state = 830;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,88,this._ctx);
            }

        }

        this.state = 834;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.COMMA) {
            this.state = 833;
            this.match(ApexcodeParser.COMMA);
        }

        this.state = 836;
        this.match(ApexcodeParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_annotationTypeDeclaration;
    return this;
}

AnnotationTypeDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeDeclarationContext.prototype.constructor = AnnotationTypeDeclarationContext;

AnnotationTypeDeclarationContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

AnnotationTypeDeclarationContext.prototype.annotationTypeBody = function() {
    return this.getTypedRuleContext(AnnotationTypeBodyContext,0);
};

AnnotationTypeDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterAnnotationTypeDeclaration(this);
	}
};

AnnotationTypeDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitAnnotationTypeDeclaration(this);
	}
};




ApexcodeParser.AnnotationTypeDeclarationContext = AnnotationTypeDeclarationContext;

ApexcodeParser.prototype.annotationTypeDeclaration = function() {

    var localctx = new AnnotationTypeDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ApexcodeParser.RULE_annotationTypeDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 838;
        this.match(ApexcodeParser.AT);
        this.state = 839;
        this.match(ApexcodeParser.T__22);
        this.state = 840;
        this.match(ApexcodeParser.Identifier);
        this.state = 841;
        this.annotationTypeBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_annotationTypeBody;
    return this;
}

AnnotationTypeBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeBodyContext.prototype.constructor = AnnotationTypeBodyContext;

AnnotationTypeBodyContext.prototype.annotationTypeElementDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationTypeElementDeclarationContext);
    } else {
        return this.getTypedRuleContext(AnnotationTypeElementDeclarationContext,i);
    }
};

AnnotationTypeBodyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterAnnotationTypeBody(this);
	}
};

AnnotationTypeBodyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitAnnotationTypeBody(this);
	}
};




ApexcodeParser.AnnotationTypeBodyContext = AnnotationTypeBodyContext;

ApexcodeParser.prototype.annotationTypeBody = function() {

    var localctx = new AnnotationTypeBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ApexcodeParser.RULE_annotationTypeBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 843;
        this.match(ApexcodeParser.LBRACE);
        this.state = 847;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__4) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__6) | (1 << ApexcodeParser.T__7) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__9) | (1 << ApexcodeParser.T__10) | (1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16) | (1 << ApexcodeParser.T__17) | (1 << ApexcodeParser.T__19) | (1 << ApexcodeParser.T__22) | (1 << ApexcodeParser.T__25))) !== 0) || ((((_la - 52)) & ~0x1f) == 0 && ((1 << (_la - 52)) & ((1 << (ApexcodeParser.ENUM - 52)) | (1 << (ApexcodeParser.TESTMETHOD - 52)) | (1 << (ApexcodeParser.SEMI - 52)))) !== 0) || _la===ApexcodeParser.Identifier || _la===ApexcodeParser.AT) {
            this.state = 844;
            this.annotationTypeElementDeclaration();
            this.state = 849;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 850;
        this.match(ApexcodeParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeElementDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_annotationTypeElementDeclaration;
    return this;
}

AnnotationTypeElementDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeElementDeclarationContext.prototype.constructor = AnnotationTypeElementDeclarationContext;

AnnotationTypeElementDeclarationContext.prototype.annotationTypeElementRest = function() {
    return this.getTypedRuleContext(AnnotationTypeElementRestContext,0);
};

AnnotationTypeElementDeclarationContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

AnnotationTypeElementDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterAnnotationTypeElementDeclaration(this);
	}
};

AnnotationTypeElementDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitAnnotationTypeElementDeclaration(this);
	}
};




ApexcodeParser.AnnotationTypeElementDeclarationContext = AnnotationTypeElementDeclarationContext;

ApexcodeParser.prototype.annotationTypeElementDeclaration = function() {

    var localctx = new AnnotationTypeElementDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ApexcodeParser.RULE_annotationTypeElementDeclaration);
    try {
        this.state = 860;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.T__2:
        case ApexcodeParser.T__4:
        case ApexcodeParser.T__5:
        case ApexcodeParser.T__6:
        case ApexcodeParser.T__7:
        case ApexcodeParser.T__8:
        case ApexcodeParser.T__9:
        case ApexcodeParser.T__10:
        case ApexcodeParser.T__11:
        case ApexcodeParser.T__12:
        case ApexcodeParser.T__13:
        case ApexcodeParser.T__14:
        case ApexcodeParser.T__15:
        case ApexcodeParser.T__16:
        case ApexcodeParser.T__17:
        case ApexcodeParser.T__19:
        case ApexcodeParser.T__22:
        case ApexcodeParser.T__25:
        case ApexcodeParser.ENUM:
        case ApexcodeParser.TESTMETHOD:
        case ApexcodeParser.Identifier:
        case ApexcodeParser.AT:
            this.enterOuterAlt(localctx, 1);
            this.state = 855;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,92,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 852;
                    this.modifier(); 
                }
                this.state = 857;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,92,this._ctx);
            }

            this.state = 858;
            this.annotationTypeElementRest();
            break;
        case ApexcodeParser.SEMI:
            this.enterOuterAlt(localctx, 2);
            this.state = 859;
            this.match(ApexcodeParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationTypeElementRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_annotationTypeElementRest;
    return this;
}

AnnotationTypeElementRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationTypeElementRestContext.prototype.constructor = AnnotationTypeElementRestContext;

AnnotationTypeElementRestContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

AnnotationTypeElementRestContext.prototype.annotationMethodOrConstantRest = function() {
    return this.getTypedRuleContext(AnnotationMethodOrConstantRestContext,0);
};

AnnotationTypeElementRestContext.prototype.classDeclaration = function() {
    return this.getTypedRuleContext(ClassDeclarationContext,0);
};

AnnotationTypeElementRestContext.prototype.interfaceDeclaration = function() {
    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
};

AnnotationTypeElementRestContext.prototype.enumDeclaration = function() {
    return this.getTypedRuleContext(EnumDeclarationContext,0);
};

AnnotationTypeElementRestContext.prototype.annotationTypeDeclaration = function() {
    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
};

AnnotationTypeElementRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterAnnotationTypeElementRest(this);
	}
};

AnnotationTypeElementRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitAnnotationTypeElementRest(this);
	}
};




ApexcodeParser.AnnotationTypeElementRestContext = AnnotationTypeElementRestContext;

ApexcodeParser.prototype.annotationTypeElementRest = function() {

    var localctx = new AnnotationTypeElementRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ApexcodeParser.RULE_annotationTypeElementRest);
    try {
        this.state = 882;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.T__25:
        case ApexcodeParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 862;
            this.type();
            this.state = 863;
            this.annotationMethodOrConstantRest();
            this.state = 864;
            this.match(ApexcodeParser.SEMI);
            break;
        case ApexcodeParser.T__19:
            this.enterOuterAlt(localctx, 2);
            this.state = 866;
            this.classDeclaration();
            this.state = 868;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
            if(la_===1) {
                this.state = 867;
                this.match(ApexcodeParser.SEMI);

            }
            break;
        case ApexcodeParser.T__22:
            this.enterOuterAlt(localctx, 3);
            this.state = 870;
            this.interfaceDeclaration();
            this.state = 872;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
            if(la_===1) {
                this.state = 871;
                this.match(ApexcodeParser.SEMI);

            }
            break;
        case ApexcodeParser.ENUM:
            this.enterOuterAlt(localctx, 4);
            this.state = 874;
            this.enumDeclaration();
            this.state = 876;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
            if(la_===1) {
                this.state = 875;
                this.match(ApexcodeParser.SEMI);

            }
            break;
        case ApexcodeParser.AT:
            this.enterOuterAlt(localctx, 5);
            this.state = 878;
            this.annotationTypeDeclaration();
            this.state = 880;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
            if(la_===1) {
                this.state = 879;
                this.match(ApexcodeParser.SEMI);

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationMethodOrConstantRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_annotationMethodOrConstantRest;
    return this;
}

AnnotationMethodOrConstantRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationMethodOrConstantRestContext.prototype.constructor = AnnotationMethodOrConstantRestContext;

AnnotationMethodOrConstantRestContext.prototype.annotationMethodRest = function() {
    return this.getTypedRuleContext(AnnotationMethodRestContext,0);
};

AnnotationMethodOrConstantRestContext.prototype.annotationConstantRest = function() {
    return this.getTypedRuleContext(AnnotationConstantRestContext,0);
};

AnnotationMethodOrConstantRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterAnnotationMethodOrConstantRest(this);
	}
};

AnnotationMethodOrConstantRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitAnnotationMethodOrConstantRest(this);
	}
};




ApexcodeParser.AnnotationMethodOrConstantRestContext = AnnotationMethodOrConstantRestContext;

ApexcodeParser.prototype.annotationMethodOrConstantRest = function() {

    var localctx = new AnnotationMethodOrConstantRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ApexcodeParser.RULE_annotationMethodOrConstantRest);
    try {
        this.state = 886;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 884;
            this.annotationMethodRest();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 885;
            this.annotationConstantRest();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationMethodRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_annotationMethodRest;
    return this;
}

AnnotationMethodRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationMethodRestContext.prototype.constructor = AnnotationMethodRestContext;

AnnotationMethodRestContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

AnnotationMethodRestContext.prototype.defaultValue = function() {
    return this.getTypedRuleContext(DefaultValueContext,0);
};

AnnotationMethodRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterAnnotationMethodRest(this);
	}
};

AnnotationMethodRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitAnnotationMethodRest(this);
	}
};




ApexcodeParser.AnnotationMethodRestContext = AnnotationMethodRestContext;

ApexcodeParser.prototype.annotationMethodRest = function() {

    var localctx = new AnnotationMethodRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ApexcodeParser.RULE_annotationMethodRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 888;
        this.match(ApexcodeParser.Identifier);
        this.state = 889;
        this.match(ApexcodeParser.LPAREN);
        this.state = 890;
        this.match(ApexcodeParser.RPAREN);
        this.state = 892;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.T__30) {
            this.state = 891;
            this.defaultValue();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationConstantRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_annotationConstantRest;
    return this;
}

AnnotationConstantRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationConstantRestContext.prototype.constructor = AnnotationConstantRestContext;

AnnotationConstantRestContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

AnnotationConstantRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterAnnotationConstantRest(this);
	}
};

AnnotationConstantRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitAnnotationConstantRest(this);
	}
};




ApexcodeParser.AnnotationConstantRestContext = AnnotationConstantRestContext;

ApexcodeParser.prototype.annotationConstantRest = function() {

    var localctx = new AnnotationConstantRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ApexcodeParser.RULE_annotationConstantRest);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 894;
        this.variableDeclarators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefaultValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_defaultValue;
    return this;
}

DefaultValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultValueContext.prototype.constructor = DefaultValueContext;

DefaultValueContext.prototype.elementValue = function() {
    return this.getTypedRuleContext(ElementValueContext,0);
};

DefaultValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterDefaultValue(this);
	}
};

DefaultValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitDefaultValue(this);
	}
};




ApexcodeParser.DefaultValueContext = DefaultValueContext;

ApexcodeParser.prototype.defaultValue = function() {

    var localctx = new DefaultValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ApexcodeParser.RULE_defaultValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 896;
        this.match(ApexcodeParser.T__30);
        this.state = 897;
        this.elementValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.blockStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BlockStatementContext);
    } else {
        return this.getTypedRuleContext(BlockStatementContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitBlock(this);
	}
};




ApexcodeParser.BlockContext = BlockContext;

ApexcodeParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ApexcodeParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 899;
        this.match(ApexcodeParser.LBRACE);
        this.state = 903;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__7) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__9) | (1 << ApexcodeParser.T__10) | (1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16) | (1 << ApexcodeParser.T__17) | (1 << ApexcodeParser.T__19) | (1 << ApexcodeParser.T__22) | (1 << ApexcodeParser.T__23) | (1 << ApexcodeParser.T__25) | (1 << ApexcodeParser.T__26) | (1 << ApexcodeParser.T__27))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ApexcodeParser.T__31 - 32)) | (1 << (ApexcodeParser.T__33 - 32)) | (1 << (ApexcodeParser.T__34 - 32)) | (1 << (ApexcodeParser.T__35 - 32)) | (1 << (ApexcodeParser.T__36 - 32)) | (1 << (ApexcodeParser.T__37 - 32)) | (1 << (ApexcodeParser.T__38 - 32)) | (1 << (ApexcodeParser.T__39 - 32)) | (1 << (ApexcodeParser.T__40 - 32)) | (1 << (ApexcodeParser.T__44 - 32)) | (1 << (ApexcodeParser.SoqlLiteral - 32)) | (1 << (ApexcodeParser.SoslLiteral - 32)) | (1 << (ApexcodeParser.ENUM - 32)) | (1 << (ApexcodeParser.TESTMETHOD - 32)) | (1 << (ApexcodeParser.DB_UPDATE - 32)) | (1 << (ApexcodeParser.DB_UPSERT - 32)) | (1 << (ApexcodeParser.DB_DELETE - 32)) | (1 << (ApexcodeParser.DB_INSERT - 32)) | (1 << (ApexcodeParser.DB_UNDELETE - 32)) | (1 << (ApexcodeParser.SYSTEM_RUNAS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexcodeParser.TRIGGER - 64)) | (1 << (ApexcodeParser.IntegerLiteral - 64)) | (1 << (ApexcodeParser.FloatingPointLiteral - 64)) | (1 << (ApexcodeParser.BooleanLiteral - 64)) | (1 << (ApexcodeParser.CharacterLiteral - 64)) | (1 << (ApexcodeParser.StringLiteral - 64)) | (1 << (ApexcodeParser.NullLiteral - 64)) | (1 << (ApexcodeParser.LPAREN - 64)) | (1 << (ApexcodeParser.LBRACE - 64)) | (1 << (ApexcodeParser.SEMI - 64)) | (1 << (ApexcodeParser.LT - 64)) | (1 << (ApexcodeParser.BANG - 64)) | (1 << (ApexcodeParser.TILDE - 64)) | (1 << (ApexcodeParser.INC - 64)) | (1 << (ApexcodeParser.DEC - 64)) | (1 << (ApexcodeParser.ADD - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ApexcodeParser.SUB - 96)) | (1 << (ApexcodeParser.Identifier - 96)) | (1 << (ApexcodeParser.AT - 96)))) !== 0)) {
            this.state = 900;
            this.blockStatement();
            this.state = 905;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 906;
        this.match(ApexcodeParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_blockStatement;
    return this;
}

BlockStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockStatementContext.prototype.constructor = BlockStatementContext;

BlockStatementContext.prototype.localVariableDeclarationStatement = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,0);
};

BlockStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

BlockStatementContext.prototype.typeDeclaration = function() {
    return this.getTypedRuleContext(TypeDeclarationContext,0);
};

BlockStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterBlockStatement(this);
	}
};

BlockStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitBlockStatement(this);
	}
};




ApexcodeParser.BlockStatementContext = BlockStatementContext;

ApexcodeParser.prototype.blockStatement = function() {

    var localctx = new BlockStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ApexcodeParser.RULE_blockStatement);
    try {
        this.state = 911;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 908;
            this.localVariableDeclarationStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 909;
            this.statement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 910;
            this.typeDeclaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalVariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_localVariableDeclarationStatement;
    return this;
}

LocalVariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationStatementContext.prototype.constructor = LocalVariableDeclarationStatementContext;

LocalVariableDeclarationStatementContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

LocalVariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterLocalVariableDeclarationStatement(this);
	}
};

LocalVariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitLocalVariableDeclarationStatement(this);
	}
};




ApexcodeParser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext;

ApexcodeParser.prototype.localVariableDeclarationStatement = function() {

    var localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ApexcodeParser.RULE_localVariableDeclarationStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 913;
        this.localVariableDeclaration();
        this.state = 914;
        this.match(ApexcodeParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_localVariableDeclaration;
    return this;
}

LocalVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalVariableDeclarationContext.prototype.constructor = LocalVariableDeclarationContext;

LocalVariableDeclarationContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

LocalVariableDeclarationContext.prototype.variableDeclarators = function() {
    return this.getTypedRuleContext(VariableDeclaratorsContext,0);
};

LocalVariableDeclarationContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

LocalVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterLocalVariableDeclaration(this);
	}
};

LocalVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitLocalVariableDeclaration(this);
	}
};




ApexcodeParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext;

ApexcodeParser.prototype.localVariableDeclaration = function() {

    var localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ApexcodeParser.RULE_localVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 919;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.T__11 || _la===ApexcodeParser.AT) {
            this.state = 916;
            this.variableModifier();
            this.state = 921;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 922;
        this.type();
        this.state = 923;
        this.variableDeclarators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.parExpression = function() {
    return this.getTypedRuleContext(ParExpressionContext,0);
};

StatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementContext.prototype.forControl = function() {
    return this.getTypedRuleContext(ForControlContext,0);
};

StatementContext.prototype.finallyBlock = function() {
    return this.getTypedRuleContext(FinallyBlockContext,0);
};

StatementContext.prototype.catchClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CatchClauseContext);
    } else {
        return this.getTypedRuleContext(CatchClauseContext,i);
    }
};

StatementContext.prototype.resourceSpecification = function() {
    return this.getTypedRuleContext(ResourceSpecificationContext,0);
};

StatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

StatementContext.prototype.statementExpression = function() {
    return this.getTypedRuleContext(StatementExpressionContext,0);
};

StatementContext.prototype.runas_expression = function() {
    return this.getTypedRuleContext(Runas_expressionContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitStatement(this);
	}
};




ApexcodeParser.StatementContext = StatementContext;

ApexcodeParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ApexcodeParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 1001;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 925;
            this.block();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 926;
            this.match(ApexcodeParser.T__31);
            this.state = 927;
            this.parExpression();
            this.state = 928;
            this.statement();
            this.state = 931;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
            if(la_===1) {
                this.state = 929;
                this.match(ApexcodeParser.T__32);
                this.state = 930;
                this.statement();

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 933;
            this.match(ApexcodeParser.T__33);
            this.state = 934;
            this.match(ApexcodeParser.LPAREN);
            this.state = 935;
            this.forControl();
            this.state = 936;
            this.match(ApexcodeParser.RPAREN);
            this.state = 937;
            this.statement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 939;
            this.match(ApexcodeParser.T__34);
            this.state = 940;
            this.parExpression();
            this.state = 941;
            this.statement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 943;
            this.match(ApexcodeParser.T__35);
            this.state = 944;
            this.statement();
            this.state = 945;
            this.match(ApexcodeParser.T__34);
            this.state = 946;
            this.parExpression();
            this.state = 947;
            this.match(ApexcodeParser.SEMI);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 949;
            this.match(ApexcodeParser.T__36);
            this.state = 950;
            this.block();
            this.state = 960;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ApexcodeParser.T__42:
                this.state = 952; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 951;
                    this.catchClause();
                    this.state = 954; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===ApexcodeParser.T__42);
                this.state = 957;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ApexcodeParser.T__43) {
                    this.state = 956;
                    this.finallyBlock();
                }

                break;
            case ApexcodeParser.T__43:
                this.state = 959;
                this.finallyBlock();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 962;
            this.match(ApexcodeParser.T__36);
            this.state = 963;
            this.resourceSpecification();
            this.state = 964;
            this.block();
            this.state = 968;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ApexcodeParser.T__42) {
                this.state = 965;
                this.catchClause();
                this.state = 970;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 972;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ApexcodeParser.T__43) {
                this.state = 971;
                this.finallyBlock();
            }

            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 974;
            this.match(ApexcodeParser.T__37);
            this.state = 976;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ApexcodeParser.T__23 - 24)) | (1 << (ApexcodeParser.T__25 - 24)) | (1 << (ApexcodeParser.T__26 - 24)) | (1 << (ApexcodeParser.T__27 - 24)) | (1 << (ApexcodeParser.T__44 - 24)) | (1 << (ApexcodeParser.SoqlLiteral - 24)) | (1 << (ApexcodeParser.SoslLiteral - 24)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexcodeParser.TRIGGER - 64)) | (1 << (ApexcodeParser.IntegerLiteral - 64)) | (1 << (ApexcodeParser.FloatingPointLiteral - 64)) | (1 << (ApexcodeParser.BooleanLiteral - 64)) | (1 << (ApexcodeParser.CharacterLiteral - 64)) | (1 << (ApexcodeParser.StringLiteral - 64)) | (1 << (ApexcodeParser.NullLiteral - 64)) | (1 << (ApexcodeParser.LPAREN - 64)) | (1 << (ApexcodeParser.LT - 64)) | (1 << (ApexcodeParser.BANG - 64)) | (1 << (ApexcodeParser.TILDE - 64)) | (1 << (ApexcodeParser.INC - 64)) | (1 << (ApexcodeParser.DEC - 64)) | (1 << (ApexcodeParser.ADD - 64)))) !== 0) || _la===ApexcodeParser.SUB || _la===ApexcodeParser.Identifier) {
                this.state = 975;
                this.expression(0);
            }

            this.state = 978;
            this.match(ApexcodeParser.SEMI);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 979;
            this.match(ApexcodeParser.T__38);
            this.state = 980;
            this.expression(0);
            this.state = 981;
            this.match(ApexcodeParser.SEMI);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 983;
            this.match(ApexcodeParser.T__39);
            this.state = 985;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ApexcodeParser.Identifier) {
                this.state = 984;
                this.match(ApexcodeParser.Identifier);
            }

            this.state = 987;
            this.match(ApexcodeParser.SEMI);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 988;
            this.match(ApexcodeParser.T__40);
            this.state = 990;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ApexcodeParser.Identifier) {
                this.state = 989;
                this.match(ApexcodeParser.Identifier);
            }

            this.state = 992;
            this.match(ApexcodeParser.SEMI);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 993;
            this.match(ApexcodeParser.SEMI);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 994;
            this.statementExpression();
            this.state = 995;
            this.match(ApexcodeParser.SEMI);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 997;
            this.runas_expression();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 998;
            this.match(ApexcodeParser.Identifier);
            this.state = 999;
            this.match(ApexcodeParser.COLON);
            this.state = 1000;
            this.statement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_propertyBlock;
    return this;
}

PropertyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyBlockContext.prototype.constructor = PropertyBlockContext;

PropertyBlockContext.prototype.getter = function() {
    return this.getTypedRuleContext(GetterContext,0);
};

PropertyBlockContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

PropertyBlockContext.prototype.modifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierContext);
    } else {
        return this.getTypedRuleContext(ModifierContext,i);
    }
};

PropertyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterPropertyBlock(this);
	}
};

PropertyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitPropertyBlock(this);
	}
};




ApexcodeParser.PropertyBlockContext = PropertyBlockContext;

ApexcodeParser.prototype.propertyBlock = function() {

    var localctx = new PropertyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ApexcodeParser.RULE_propertyBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1006;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__2) | (1 << ApexcodeParser.T__4) | (1 << ApexcodeParser.T__5) | (1 << ApexcodeParser.T__6) | (1 << ApexcodeParser.T__7) | (1 << ApexcodeParser.T__8) | (1 << ApexcodeParser.T__9) | (1 << ApexcodeParser.T__10) | (1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__12) | (1 << ApexcodeParser.T__13) | (1 << ApexcodeParser.T__14) | (1 << ApexcodeParser.T__15) | (1 << ApexcodeParser.T__16) | (1 << ApexcodeParser.T__17))) !== 0) || _la===ApexcodeParser.TESTMETHOD || _la===ApexcodeParser.AT) {
            this.state = 1003;
            this.modifier();
            this.state = 1008;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1011;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.T__41:
            this.state = 1009;
            this.getter();
            break;
        case ApexcodeParser.T__25:
            this.state = 1010;
            this.setter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_getter;
    return this;
}

GetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GetterContext.prototype.constructor = GetterContext;

GetterContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

GetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterGetter(this);
	}
};

GetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitGetter(this);
	}
};




ApexcodeParser.GetterContext = GetterContext;

ApexcodeParser.prototype.getter = function() {

    var localctx = new GetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ApexcodeParser.RULE_getter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1013;
        this.match(ApexcodeParser.T__41);
        this.state = 1016;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.SEMI:
            this.state = 1014;
            this.match(ApexcodeParser.SEMI);
            break;
        case ApexcodeParser.LBRACE:
            this.state = 1015;
            this.methodBody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_setter;
    return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.methodBody = function() {
    return this.getTypedRuleContext(MethodBodyContext,0);
};

SetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterSetter(this);
	}
};

SetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitSetter(this);
	}
};




ApexcodeParser.SetterContext = SetterContext;

ApexcodeParser.prototype.setter = function() {

    var localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ApexcodeParser.RULE_setter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1018;
        this.match(ApexcodeParser.T__25);
        this.state = 1021;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.SEMI:
            this.state = 1019;
            this.match(ApexcodeParser.SEMI);
            break;
        case ApexcodeParser.LBRACE:
            this.state = 1020;
            this.methodBody();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_catchClause;
    return this;
}

CatchClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchClauseContext.prototype.constructor = CatchClauseContext;

CatchClauseContext.prototype.catchType = function() {
    return this.getTypedRuleContext(CatchTypeContext,0);
};

CatchClauseContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

CatchClauseContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

CatchClauseContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

CatchClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterCatchClause(this);
	}
};

CatchClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitCatchClause(this);
	}
};




ApexcodeParser.CatchClauseContext = CatchClauseContext;

ApexcodeParser.prototype.catchClause = function() {

    var localctx = new CatchClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ApexcodeParser.RULE_catchClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1023;
        this.match(ApexcodeParser.T__42);
        this.state = 1024;
        this.match(ApexcodeParser.LPAREN);
        this.state = 1028;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.T__11 || _la===ApexcodeParser.AT) {
            this.state = 1025;
            this.variableModifier();
            this.state = 1030;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1031;
        this.catchType();
        this.state = 1032;
        this.match(ApexcodeParser.Identifier);
        this.state = 1033;
        this.match(ApexcodeParser.RPAREN);
        this.state = 1034;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_catchType;
    return this;
}

CatchTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchTypeContext.prototype.constructor = CatchTypeContext;

CatchTypeContext.prototype.qualifiedName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifiedNameContext);
    } else {
        return this.getTypedRuleContext(QualifiedNameContext,i);
    }
};

CatchTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterCatchType(this);
	}
};

CatchTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitCatchType(this);
	}
};




ApexcodeParser.CatchTypeContext = CatchTypeContext;

ApexcodeParser.prototype.catchType = function() {

    var localctx = new CatchTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ApexcodeParser.RULE_catchType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1036;
        this.qualifiedName();
        this.state = 1041;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.BITOR) {
            this.state = 1037;
            this.match(ApexcodeParser.BITOR);
            this.state = 1038;
            this.qualifiedName();
            this.state = 1043;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FinallyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_finallyBlock;
    return this;
}

FinallyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyBlockContext.prototype.constructor = FinallyBlockContext;

FinallyBlockContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FinallyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterFinallyBlock(this);
	}
};

FinallyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitFinallyBlock(this);
	}
};




ApexcodeParser.FinallyBlockContext = FinallyBlockContext;

ApexcodeParser.prototype.finallyBlock = function() {

    var localctx = new FinallyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ApexcodeParser.RULE_finallyBlock);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1044;
        this.match(ApexcodeParser.T__43);
        this.state = 1045;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceSpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_resourceSpecification;
    return this;
}

ResourceSpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceSpecificationContext.prototype.constructor = ResourceSpecificationContext;

ResourceSpecificationContext.prototype.resources = function() {
    return this.getTypedRuleContext(ResourcesContext,0);
};

ResourceSpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterResourceSpecification(this);
	}
};

ResourceSpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitResourceSpecification(this);
	}
};




ApexcodeParser.ResourceSpecificationContext = ResourceSpecificationContext;

ApexcodeParser.prototype.resourceSpecification = function() {

    var localctx = new ResourceSpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ApexcodeParser.RULE_resourceSpecification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1047;
        this.match(ApexcodeParser.LPAREN);
        this.state = 1048;
        this.resources();
        this.state = 1050;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.SEMI) {
            this.state = 1049;
            this.match(ApexcodeParser.SEMI);
        }

        this.state = 1052;
        this.match(ApexcodeParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourcesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_resources;
    return this;
}

ResourcesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourcesContext.prototype.constructor = ResourcesContext;

ResourcesContext.prototype.resource = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ResourceContext);
    } else {
        return this.getTypedRuleContext(ResourceContext,i);
    }
};

ResourcesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterResources(this);
	}
};

ResourcesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitResources(this);
	}
};




ApexcodeParser.ResourcesContext = ResourcesContext;

ApexcodeParser.prototype.resources = function() {

    var localctx = new ResourcesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ApexcodeParser.RULE_resources);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1054;
        this.resource();
        this.state = 1059;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1055;
                this.match(ApexcodeParser.SEMI);
                this.state = 1056;
                this.resource(); 
            }
            this.state = 1061;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ResourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_resource;
    return this;
}

ResourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ResourceContext.prototype.constructor = ResourceContext;

ResourceContext.prototype.classOrInterfaceType = function() {
    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
};

ResourceContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

ResourceContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ResourceContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

ResourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterResource(this);
	}
};

ResourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitResource(this);
	}
};




ApexcodeParser.ResourceContext = ResourceContext;

ApexcodeParser.prototype.resource = function() {

    var localctx = new ResourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ApexcodeParser.RULE_resource);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1065;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.T__11 || _la===ApexcodeParser.AT) {
            this.state = 1062;
            this.variableModifier();
            this.state = 1067;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1068;
        this.classOrInterfaceType();
        this.state = 1069;
        this.variableDeclaratorId();
        this.state = 1070;
        this.match(ApexcodeParser.ASSIGN);
        this.state = 1071;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_forControl;
    return this;
}

ForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForControlContext.prototype.constructor = ForControlContext;

ForControlContext.prototype.enhancedForControl = function() {
    return this.getTypedRuleContext(EnhancedForControlContext,0);
};

ForControlContext.prototype.forInit = function() {
    return this.getTypedRuleContext(ForInitContext,0);
};

ForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForControlContext.prototype.forUpdate = function() {
    return this.getTypedRuleContext(ForUpdateContext,0);
};

ForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterForControl(this);
	}
};

ForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitForControl(this);
	}
};




ApexcodeParser.ForControlContext = ForControlContext;

ApexcodeParser.prototype.forControl = function() {

    var localctx = new ForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ApexcodeParser.RULE_forControl);
    var _la = 0; // Token type
    try {
        this.state = 1085;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1073;
            this.enhancedForControl();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1075;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ApexcodeParser.T__11) | (1 << ApexcodeParser.T__23) | (1 << ApexcodeParser.T__25) | (1 << ApexcodeParser.T__26) | (1 << ApexcodeParser.T__27))) !== 0) || ((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (ApexcodeParser.T__44 - 45)) | (1 << (ApexcodeParser.SoqlLiteral - 45)) | (1 << (ApexcodeParser.SoslLiteral - 45)) | (1 << (ApexcodeParser.TRIGGER - 45)) | (1 << (ApexcodeParser.IntegerLiteral - 45)) | (1 << (ApexcodeParser.FloatingPointLiteral - 45)) | (1 << (ApexcodeParser.BooleanLiteral - 45)) | (1 << (ApexcodeParser.CharacterLiteral - 45)) | (1 << (ApexcodeParser.StringLiteral - 45)) | (1 << (ApexcodeParser.NullLiteral - 45)) | (1 << (ApexcodeParser.LPAREN - 45)))) !== 0) || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (ApexcodeParser.LT - 82)) | (1 << (ApexcodeParser.BANG - 82)) | (1 << (ApexcodeParser.TILDE - 82)) | (1 << (ApexcodeParser.INC - 82)) | (1 << (ApexcodeParser.DEC - 82)) | (1 << (ApexcodeParser.ADD - 82)) | (1 << (ApexcodeParser.SUB - 82)))) !== 0) || _la===ApexcodeParser.Identifier || _la===ApexcodeParser.AT) {
                this.state = 1074;
                this.forInit();
            }

            this.state = 1077;
            this.match(ApexcodeParser.SEMI);
            this.state = 1079;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ApexcodeParser.T__23 - 24)) | (1 << (ApexcodeParser.T__25 - 24)) | (1 << (ApexcodeParser.T__26 - 24)) | (1 << (ApexcodeParser.T__27 - 24)) | (1 << (ApexcodeParser.T__44 - 24)) | (1 << (ApexcodeParser.SoqlLiteral - 24)) | (1 << (ApexcodeParser.SoslLiteral - 24)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexcodeParser.TRIGGER - 64)) | (1 << (ApexcodeParser.IntegerLiteral - 64)) | (1 << (ApexcodeParser.FloatingPointLiteral - 64)) | (1 << (ApexcodeParser.BooleanLiteral - 64)) | (1 << (ApexcodeParser.CharacterLiteral - 64)) | (1 << (ApexcodeParser.StringLiteral - 64)) | (1 << (ApexcodeParser.NullLiteral - 64)) | (1 << (ApexcodeParser.LPAREN - 64)) | (1 << (ApexcodeParser.LT - 64)) | (1 << (ApexcodeParser.BANG - 64)) | (1 << (ApexcodeParser.TILDE - 64)) | (1 << (ApexcodeParser.INC - 64)) | (1 << (ApexcodeParser.DEC - 64)) | (1 << (ApexcodeParser.ADD - 64)))) !== 0) || _la===ApexcodeParser.SUB || _la===ApexcodeParser.Identifier) {
                this.state = 1078;
                this.expression(0);
            }

            this.state = 1081;
            this.match(ApexcodeParser.SEMI);
            this.state = 1083;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ApexcodeParser.T__23 - 24)) | (1 << (ApexcodeParser.T__25 - 24)) | (1 << (ApexcodeParser.T__26 - 24)) | (1 << (ApexcodeParser.T__27 - 24)) | (1 << (ApexcodeParser.T__44 - 24)) | (1 << (ApexcodeParser.SoqlLiteral - 24)) | (1 << (ApexcodeParser.SoslLiteral - 24)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexcodeParser.TRIGGER - 64)) | (1 << (ApexcodeParser.IntegerLiteral - 64)) | (1 << (ApexcodeParser.FloatingPointLiteral - 64)) | (1 << (ApexcodeParser.BooleanLiteral - 64)) | (1 << (ApexcodeParser.CharacterLiteral - 64)) | (1 << (ApexcodeParser.StringLiteral - 64)) | (1 << (ApexcodeParser.NullLiteral - 64)) | (1 << (ApexcodeParser.LPAREN - 64)) | (1 << (ApexcodeParser.LT - 64)) | (1 << (ApexcodeParser.BANG - 64)) | (1 << (ApexcodeParser.TILDE - 64)) | (1 << (ApexcodeParser.INC - 64)) | (1 << (ApexcodeParser.DEC - 64)) | (1 << (ApexcodeParser.ADD - 64)))) !== 0) || _la===ApexcodeParser.SUB || _la===ApexcodeParser.Identifier) {
                this.state = 1082;
                this.forUpdate();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForInitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_forInit;
    return this;
}

ForInitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForInitContext.prototype.constructor = ForInitContext;

ForInitContext.prototype.localVariableDeclaration = function() {
    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
};

ForInitContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForInitContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterForInit(this);
	}
};

ForInitContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitForInit(this);
	}
};




ApexcodeParser.ForInitContext = ForInitContext;

ApexcodeParser.prototype.forInit = function() {

    var localctx = new ForInitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ApexcodeParser.RULE_forInit);
    try {
        this.state = 1089;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1087;
            this.localVariableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1088;
            this.expressionList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnhancedForControlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_enhancedForControl;
    return this;
}

EnhancedForControlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnhancedForControlContext.prototype.constructor = EnhancedForControlContext;

EnhancedForControlContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

EnhancedForControlContext.prototype.variableDeclaratorId = function() {
    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
};

EnhancedForControlContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

EnhancedForControlContext.prototype.variableModifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableModifierContext);
    } else {
        return this.getTypedRuleContext(VariableModifierContext,i);
    }
};

EnhancedForControlContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterEnhancedForControl(this);
	}
};

EnhancedForControlContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitEnhancedForControl(this);
	}
};




ApexcodeParser.EnhancedForControlContext = EnhancedForControlContext;

ApexcodeParser.prototype.enhancedForControl = function() {

    var localctx = new EnhancedForControlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ApexcodeParser.RULE_enhancedForControl);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1094;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.T__11 || _la===ApexcodeParser.AT) {
            this.state = 1091;
            this.variableModifier();
            this.state = 1096;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1097;
        this.type();
        this.state = 1098;
        this.variableDeclaratorId();
        this.state = 1099;
        this.match(ApexcodeParser.COLON);
        this.state = 1100;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForUpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_forUpdate;
    return this;
}

ForUpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForUpdateContext.prototype.constructor = ForUpdateContext;

ForUpdateContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ForUpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterForUpdate(this);
	}
};

ForUpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitForUpdate(this);
	}
};




ApexcodeParser.ForUpdateContext = ForUpdateContext;

ApexcodeParser.prototype.forUpdate = function() {

    var localctx = new ForUpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ApexcodeParser.RULE_forUpdate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1102;
        this.expressionList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Db_shortcut_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_db_shortcut_expression;
    return this;
}

Db_shortcut_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Db_shortcut_expressionContext.prototype.constructor = Db_shortcut_expressionContext;

Db_shortcut_expressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

Db_shortcut_expressionContext.prototype.DB_UPDATE = function() {
    return this.getToken(ApexcodeParser.DB_UPDATE, 0);
};

Db_shortcut_expressionContext.prototype.DB_UPSERT = function() {
    return this.getToken(ApexcodeParser.DB_UPSERT, 0);
};

Db_shortcut_expressionContext.prototype.DB_DELETE = function() {
    return this.getToken(ApexcodeParser.DB_DELETE, 0);
};

Db_shortcut_expressionContext.prototype.DB_INSERT = function() {
    return this.getToken(ApexcodeParser.DB_INSERT, 0);
};

Db_shortcut_expressionContext.prototype.DB_UNDELETE = function() {
    return this.getToken(ApexcodeParser.DB_UNDELETE, 0);
};

Db_shortcut_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterDb_shortcut_expression(this);
	}
};

Db_shortcut_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitDb_shortcut_expression(this);
	}
};




ApexcodeParser.Db_shortcut_expressionContext = Db_shortcut_expressionContext;

ApexcodeParser.prototype.db_shortcut_expression = function() {

    var localctx = new Db_shortcut_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ApexcodeParser.RULE_db_shortcut_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1104;
        _la = this._input.LA(1);
        if(!(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (ApexcodeParser.DB_UPDATE - 58)) | (1 << (ApexcodeParser.DB_UPSERT - 58)) | (1 << (ApexcodeParser.DB_DELETE - 58)) | (1 << (ApexcodeParser.DB_INSERT - 58)) | (1 << (ApexcodeParser.DB_UNDELETE - 58)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1105;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Runas_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_runas_expression;
    return this;
}

Runas_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Runas_expressionContext.prototype.constructor = Runas_expressionContext;

Runas_expressionContext.prototype.SYSTEM_RUNAS = function() {
    return this.getToken(ApexcodeParser.SYSTEM_RUNAS, 0);
};

Runas_expressionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

Runas_expressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

Runas_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterRunas_expression(this);
	}
};

Runas_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitRunas_expression(this);
	}
};




ApexcodeParser.Runas_expressionContext = Runas_expressionContext;

ApexcodeParser.prototype.runas_expression = function() {

    var localctx = new Runas_expressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, ApexcodeParser.RULE_runas_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1107;
        this.match(ApexcodeParser.SYSTEM_RUNAS);
        this.state = 1108;
        this.match(ApexcodeParser.LPAREN);
        this.state = 1110;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ApexcodeParser.T__23 - 24)) | (1 << (ApexcodeParser.T__25 - 24)) | (1 << (ApexcodeParser.T__26 - 24)) | (1 << (ApexcodeParser.T__27 - 24)) | (1 << (ApexcodeParser.T__44 - 24)) | (1 << (ApexcodeParser.SoqlLiteral - 24)) | (1 << (ApexcodeParser.SoslLiteral - 24)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexcodeParser.TRIGGER - 64)) | (1 << (ApexcodeParser.IntegerLiteral - 64)) | (1 << (ApexcodeParser.FloatingPointLiteral - 64)) | (1 << (ApexcodeParser.BooleanLiteral - 64)) | (1 << (ApexcodeParser.CharacterLiteral - 64)) | (1 << (ApexcodeParser.StringLiteral - 64)) | (1 << (ApexcodeParser.NullLiteral - 64)) | (1 << (ApexcodeParser.LPAREN - 64)) | (1 << (ApexcodeParser.LT - 64)) | (1 << (ApexcodeParser.BANG - 64)) | (1 << (ApexcodeParser.TILDE - 64)) | (1 << (ApexcodeParser.INC - 64)) | (1 << (ApexcodeParser.DEC - 64)) | (1 << (ApexcodeParser.ADD - 64)))) !== 0) || _la===ApexcodeParser.SUB || _la===ApexcodeParser.Identifier) {
            this.state = 1109;
            this.expressionList();
        }

        this.state = 1112;
        this.match(ApexcodeParser.RPAREN);
        this.state = 1113;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_parExpression;
    return this;
}

ParExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParExpressionContext.prototype.constructor = ParExpressionContext;

ParExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ParExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterParExpression(this);
	}
};

ParExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitParExpression(this);
	}
};




ApexcodeParser.ParExpressionContext = ParExpressionContext;

ApexcodeParser.prototype.parExpression = function() {

    var localctx = new ParExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ApexcodeParser.RULE_parExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1115;
        this.match(ApexcodeParser.LPAREN);
        this.state = 1116;
        this.expression(0);
        this.state = 1117;
        this.match(ApexcodeParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitExpressionList(this);
	}
};




ApexcodeParser.ExpressionListContext = ExpressionListContext;

ApexcodeParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, ApexcodeParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1119;
        this.expression(0);
        this.state = 1124;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.COMMA) {
            this.state = 1120;
            this.match(ApexcodeParser.COMMA);
            this.state = 1121;
            this.expression(0);
            this.state = 1126;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_statementExpression;
    return this;
}

StatementExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementExpressionContext.prototype.constructor = StatementExpressionContext;

StatementExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementExpressionContext.prototype.db_shortcut_expression = function() {
    return this.getTypedRuleContext(Db_shortcut_expressionContext,0);
};

StatementExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterStatementExpression(this);
	}
};

StatementExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitStatementExpression(this);
	}
};




ApexcodeParser.StatementExpressionContext = StatementExpressionContext;

ApexcodeParser.prototype.statementExpression = function() {

    var localctx = new StatementExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, ApexcodeParser.RULE_statementExpression);
    try {
        this.state = 1129;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.T__23:
        case ApexcodeParser.T__25:
        case ApexcodeParser.T__26:
        case ApexcodeParser.T__27:
        case ApexcodeParser.T__44:
        case ApexcodeParser.SoqlLiteral:
        case ApexcodeParser.SoslLiteral:
        case ApexcodeParser.TRIGGER:
        case ApexcodeParser.IntegerLiteral:
        case ApexcodeParser.FloatingPointLiteral:
        case ApexcodeParser.BooleanLiteral:
        case ApexcodeParser.CharacterLiteral:
        case ApexcodeParser.StringLiteral:
        case ApexcodeParser.NullLiteral:
        case ApexcodeParser.LPAREN:
        case ApexcodeParser.LT:
        case ApexcodeParser.BANG:
        case ApexcodeParser.TILDE:
        case ApexcodeParser.INC:
        case ApexcodeParser.DEC:
        case ApexcodeParser.ADD:
        case ApexcodeParser.SUB:
        case ApexcodeParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1127;
            this.expression(0);
            break;
        case ApexcodeParser.DB_UPDATE:
        case ApexcodeParser.DB_UPSERT:
        case ApexcodeParser.DB_DELETE:
        case ApexcodeParser.DB_INSERT:
        case ApexcodeParser.DB_UNDELETE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1128;
            this.db_shortcut_expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.primary = function() {
    return this.getTypedRuleContext(PrimaryContext,0);
};

ExpressionContext.prototype.creator = function() {
    return this.getTypedRuleContext(CreatorContext,0);
};

ExpressionContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.WS = function() {
    return this.getToken(ApexcodeParser.WS, 0);
};

ExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ExpressionContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

ExpressionContext.prototype.innerCreator = function() {
    return this.getTypedRuleContext(InnerCreatorContext,0);
};

ExpressionContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

ExpressionContext.prototype.superSuffix = function() {
    return this.getTypedRuleContext(SuperSuffixContext,0);
};

ExpressionContext.prototype.explicitGenericInvocation = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitExpression(this);
	}
};



ApexcodeParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 198;
    this.enterRecursionRule(localctx, 198, ApexcodeParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1144;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1132;
            this.primary();
            break;

        case 2:
            this.state = 1133;
            this.match(ApexcodeParser.T__27);
            this.state = 1134;
            this.creator();
            break;

        case 3:
            this.state = 1135;
            this.match(ApexcodeParser.LPAREN);
            this.state = 1136;
            this.type();
            this.state = 1137;
            this.match(ApexcodeParser.RPAREN);
            this.state = 1138;
            this.expression(17);
            break;

        case 4:
            this.state = 1140;
            _la = this._input.LA(1);
            if(!(((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (ApexcodeParser.INC - 93)) | (1 << (ApexcodeParser.DEC - 93)) | (1 << (ApexcodeParser.ADD - 93)) | (1 << (ApexcodeParser.SUB - 93)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1141;
            this.expression(15);
            break;

        case 5:
            this.state = 1142;
            _la = this._input.LA(1);
            if(!(_la===ApexcodeParser.BANG || _la===ApexcodeParser.TILDE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1143;
            this.expression(14);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1262;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,142,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1260;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1146;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1147;
                    _la = this._input.LA(1);
                    if(!(((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (ApexcodeParser.MUL - 97)) | (1 << (ApexcodeParser.DIV - 97)) | (1 << (ApexcodeParser.MOD - 97)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1148;
                    this.expression(14);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1149;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 1150;
                    _la = this._input.LA(1);
                    if(!(_la===ApexcodeParser.ADD || _la===ApexcodeParser.SUB)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1151;
                    this.expression(13);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1152;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1160;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 1153;
                        this.match(ApexcodeParser.LT);
                        this.state = 1154;
                        this.match(ApexcodeParser.LT);
                        break;

                    case 2:
                        this.state = 1155;
                        this.match(ApexcodeParser.GT);
                        this.state = 1156;
                        this.match(ApexcodeParser.GT);
                        this.state = 1157;
                        this.match(ApexcodeParser.GT);
                        break;

                    case 3:
                        this.state = 1158;
                        this.match(ApexcodeParser.GT);
                        this.state = 1159;
                        this.match(ApexcodeParser.GT);
                        break;

                    }
                    this.state = 1162;
                    this.expression(12);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1163;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 1178;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 1164;
                        this.match(ApexcodeParser.LE);
                        break;

                    case 2:
                        this.state = 1165;
                        this.match(ApexcodeParser.LT);
                        this.state = 1167;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===ApexcodeParser.WS) {
                            this.state = 1166;
                            this.match(ApexcodeParser.WS);
                        }

                        this.state = 1169;
                        this.match(ApexcodeParser.ASSIGN);
                        break;

                    case 3:
                        this.state = 1170;
                        this.match(ApexcodeParser.GT);
                        this.state = 1172;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===ApexcodeParser.WS) {
                            this.state = 1171;
                            this.match(ApexcodeParser.WS);
                        }

                        this.state = 1174;
                        this.match(ApexcodeParser.ASSIGN);
                        break;

                    case 4:
                        this.state = 1175;
                        this.match(ApexcodeParser.GE);
                        break;

                    case 5:
                        this.state = 1176;
                        this.match(ApexcodeParser.GT);
                        break;

                    case 6:
                        this.state = 1177;
                        this.match(ApexcodeParser.LT);
                        break;

                    }
                    this.state = 1180;
                    this.expression(11);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1181;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1182;
                    _la = this._input.LA(1);
                    if(!(_la===ApexcodeParser.T__46 || _la===ApexcodeParser.T__47 || _la===ApexcodeParser.EQUAL || _la===ApexcodeParser.NOTEQUAL)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1183;
                    this.expression(9);
                    break;

                case 6:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1184;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1185;
                    this.match(ApexcodeParser.BITAND);
                    this.state = 1186;
                    this.expression(8);
                    break;

                case 7:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1187;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1188;
                    this.match(ApexcodeParser.CARET);
                    this.state = 1189;
                    this.expression(7);
                    break;

                case 8:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1190;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1191;
                    this.match(ApexcodeParser.BITOR);
                    this.state = 1192;
                    this.expression(6);
                    break;

                case 9:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1193;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1194;
                    this.match(ApexcodeParser.AND);
                    this.state = 1195;
                    this.expression(5);
                    break;

                case 10:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1196;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1197;
                    this.match(ApexcodeParser.OR);
                    this.state = 1198;
                    this.expression(4);
                    break;

                case 11:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1199;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1200;
                    this.match(ApexcodeParser.QUESTION);
                    this.state = 1201;
                    this.expression(0);
                    this.state = 1202;
                    this.match(ApexcodeParser.COLON);
                    this.state = 1203;
                    this.expression(3);
                    break;

                case 12:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1205;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1206;
                    _la = this._input.LA(1);
                    if(!(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (ApexcodeParser.ASSIGN - 80)) | (1 << (ApexcodeParser.ADD_ASSIGN - 80)) | (1 << (ApexcodeParser.SUB_ASSIGN - 80)) | (1 << (ApexcodeParser.MUL_ASSIGN - 80)) | (1 << (ApexcodeParser.DIV_ASSIGN - 80)) | (1 << (ApexcodeParser.AND_ASSIGN - 80)) | (1 << (ApexcodeParser.OR_ASSIGN - 80)) | (1 << (ApexcodeParser.XOR_ASSIGN - 80)) | (1 << (ApexcodeParser.MOD_ASSIGN - 80)) | (1 << (ApexcodeParser.LSHIFT_ASSIGN - 80)))) !== 0) || _la===ApexcodeParser.RSHIFT_ASSIGN || _la===ApexcodeParser.URSHIFT_ASSIGN)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1207;
                    this.expression(1);
                    break;

                case 13:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1208;
                    if (!( this.precpred(this._ctx, 27))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 27)");
                    }
                    this.state = 1209;
                    this.match(ApexcodeParser.DOT);
                    this.state = 1210;
                    this.match(ApexcodeParser.T__41);
                    this.state = 1211;
                    this.match(ApexcodeParser.LPAREN);
                    this.state = 1213;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ApexcodeParser.T__23 - 24)) | (1 << (ApexcodeParser.T__25 - 24)) | (1 << (ApexcodeParser.T__26 - 24)) | (1 << (ApexcodeParser.T__27 - 24)) | (1 << (ApexcodeParser.T__44 - 24)) | (1 << (ApexcodeParser.SoqlLiteral - 24)) | (1 << (ApexcodeParser.SoslLiteral - 24)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexcodeParser.TRIGGER - 64)) | (1 << (ApexcodeParser.IntegerLiteral - 64)) | (1 << (ApexcodeParser.FloatingPointLiteral - 64)) | (1 << (ApexcodeParser.BooleanLiteral - 64)) | (1 << (ApexcodeParser.CharacterLiteral - 64)) | (1 << (ApexcodeParser.StringLiteral - 64)) | (1 << (ApexcodeParser.NullLiteral - 64)) | (1 << (ApexcodeParser.LPAREN - 64)) | (1 << (ApexcodeParser.LT - 64)) | (1 << (ApexcodeParser.BANG - 64)) | (1 << (ApexcodeParser.TILDE - 64)) | (1 << (ApexcodeParser.INC - 64)) | (1 << (ApexcodeParser.DEC - 64)) | (1 << (ApexcodeParser.ADD - 64)))) !== 0) || _la===ApexcodeParser.SUB || _la===ApexcodeParser.Identifier) {
                        this.state = 1212;
                        this.expressionList();
                    }

                    this.state = 1215;
                    this.match(ApexcodeParser.RPAREN);
                    break;

                case 14:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1216;
                    if (!( this.precpred(this._ctx, 26))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 26)");
                    }
                    this.state = 1217;
                    this.match(ApexcodeParser.DOT);
                    this.state = 1218;
                    this.match(ApexcodeParser.T__25);
                    this.state = 1219;
                    this.match(ApexcodeParser.LPAREN);
                    this.state = 1221;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ApexcodeParser.T__23 - 24)) | (1 << (ApexcodeParser.T__25 - 24)) | (1 << (ApexcodeParser.T__26 - 24)) | (1 << (ApexcodeParser.T__27 - 24)) | (1 << (ApexcodeParser.T__44 - 24)) | (1 << (ApexcodeParser.SoqlLiteral - 24)) | (1 << (ApexcodeParser.SoslLiteral - 24)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexcodeParser.TRIGGER - 64)) | (1 << (ApexcodeParser.IntegerLiteral - 64)) | (1 << (ApexcodeParser.FloatingPointLiteral - 64)) | (1 << (ApexcodeParser.BooleanLiteral - 64)) | (1 << (ApexcodeParser.CharacterLiteral - 64)) | (1 << (ApexcodeParser.StringLiteral - 64)) | (1 << (ApexcodeParser.NullLiteral - 64)) | (1 << (ApexcodeParser.LPAREN - 64)) | (1 << (ApexcodeParser.LT - 64)) | (1 << (ApexcodeParser.BANG - 64)) | (1 << (ApexcodeParser.TILDE - 64)) | (1 << (ApexcodeParser.INC - 64)) | (1 << (ApexcodeParser.DEC - 64)) | (1 << (ApexcodeParser.ADD - 64)))) !== 0) || _la===ApexcodeParser.SUB || _la===ApexcodeParser.Identifier) {
                        this.state = 1220;
                        this.expressionList();
                    }

                    this.state = 1223;
                    this.match(ApexcodeParser.RPAREN);
                    break;

                case 15:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1224;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 1225;
                    this.match(ApexcodeParser.DOT);
                    this.state = 1226;
                    this.match(ApexcodeParser.Identifier);
                    break;

                case 16:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1227;
                    if (!( this.precpred(this._ctx, 24))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
                    }
                    this.state = 1228;
                    this.match(ApexcodeParser.DOT);
                    this.state = 1229;
                    this.match(ApexcodeParser.T__44);
                    break;

                case 17:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1230;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 1231;
                    this.match(ApexcodeParser.DOT);
                    this.state = 1232;
                    this.match(ApexcodeParser.T__27);
                    this.state = 1234;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ApexcodeParser.LT) {
                        this.state = 1233;
                        this.nonWildcardTypeArguments();
                    }

                    this.state = 1236;
                    this.innerCreator();
                    break;

                case 18:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1237;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 1238;
                    this.match(ApexcodeParser.DOT);
                    this.state = 1239;
                    this.match(ApexcodeParser.T__26);
                    this.state = 1240;
                    this.superSuffix();
                    break;

                case 19:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1241;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 1242;
                    this.match(ApexcodeParser.DOT);
                    this.state = 1243;
                    this.explicitGenericInvocation();
                    break;

                case 20:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1244;
                    if (!( this.precpred(this._ctx, 20))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 20)");
                    }
                    this.state = 1245;
                    this.match(ApexcodeParser.LBRACK);
                    this.state = 1246;
                    this.expression(0);
                    this.state = 1247;
                    this.match(ApexcodeParser.RBRACK);
                    break;

                case 21:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1249;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 1250;
                    this.match(ApexcodeParser.LPAREN);
                    this.state = 1252;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ApexcodeParser.T__23 - 24)) | (1 << (ApexcodeParser.T__25 - 24)) | (1 << (ApexcodeParser.T__26 - 24)) | (1 << (ApexcodeParser.T__27 - 24)) | (1 << (ApexcodeParser.T__44 - 24)) | (1 << (ApexcodeParser.SoqlLiteral - 24)) | (1 << (ApexcodeParser.SoslLiteral - 24)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexcodeParser.TRIGGER - 64)) | (1 << (ApexcodeParser.IntegerLiteral - 64)) | (1 << (ApexcodeParser.FloatingPointLiteral - 64)) | (1 << (ApexcodeParser.BooleanLiteral - 64)) | (1 << (ApexcodeParser.CharacterLiteral - 64)) | (1 << (ApexcodeParser.StringLiteral - 64)) | (1 << (ApexcodeParser.NullLiteral - 64)) | (1 << (ApexcodeParser.LPAREN - 64)) | (1 << (ApexcodeParser.LT - 64)) | (1 << (ApexcodeParser.BANG - 64)) | (1 << (ApexcodeParser.TILDE - 64)) | (1 << (ApexcodeParser.INC - 64)) | (1 << (ApexcodeParser.DEC - 64)) | (1 << (ApexcodeParser.ADD - 64)))) !== 0) || _la===ApexcodeParser.SUB || _la===ApexcodeParser.Identifier) {
                        this.state = 1251;
                        this.expressionList();
                    }

                    this.state = 1254;
                    this.match(ApexcodeParser.RPAREN);
                    break;

                case 22:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1255;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1256;
                    _la = this._input.LA(1);
                    if(!(_la===ApexcodeParser.INC || _la===ApexcodeParser.DEC)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 23:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ApexcodeParser.RULE_expression);
                    this.state = 1257;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1258;
                    this.match(ApexcodeParser.T__45);
                    this.state = 1259;
                    this.type();
                    break;

                } 
            }
            this.state = 1264;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,142,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_primary;
    return this;
}

PrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryContext.prototype.constructor = PrimaryContext;

PrimaryContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

PrimaryContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

PrimaryContext.prototype.type = function() {
    return this.getTypedRuleContext(TypeContext,0);
};

PrimaryContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

PrimaryContext.prototype.explicitGenericInvocationSuffix = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
};

PrimaryContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

PrimaryContext.prototype.SoqlLiteral = function() {
    return this.getToken(ApexcodeParser.SoqlLiteral, 0);
};

PrimaryContext.prototype.SoslLiteral = function() {
    return this.getToken(ApexcodeParser.SoslLiteral, 0);
};

PrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterPrimary(this);
	}
};

PrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitPrimary(this);
	}
};




ApexcodeParser.PrimaryContext = PrimaryContext;

ApexcodeParser.prototype.primary = function() {

    var localctx = new PrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, ApexcodeParser.RULE_primary);
    try {
        this.state = 1288;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1265;
            this.match(ApexcodeParser.LPAREN);
            this.state = 1266;
            this.expression(0);
            this.state = 1267;
            this.match(ApexcodeParser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1269;
            this.match(ApexcodeParser.T__44);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1270;
            this.match(ApexcodeParser.T__26);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1271;
            this.literal();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1272;
            this.match(ApexcodeParser.Identifier);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1273;
            this.type();
            this.state = 1274;
            this.match(ApexcodeParser.DOT);
            this.state = 1275;
            this.match(ApexcodeParser.T__19);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1277;
            this.match(ApexcodeParser.T__23);
            this.state = 1278;
            this.match(ApexcodeParser.DOT);
            this.state = 1279;
            this.match(ApexcodeParser.T__19);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1280;
            this.nonWildcardTypeArguments();
            this.state = 1284;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ApexcodeParser.T__26:
            case ApexcodeParser.Identifier:
                this.state = 1281;
                this.explicitGenericInvocationSuffix();
                break;
            case ApexcodeParser.T__44:
                this.state = 1282;
                this.match(ApexcodeParser.T__44);
                this.state = 1283;
                this.arguments();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1286;
            this.match(ApexcodeParser.SoqlLiteral);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1287;
            this.match(ApexcodeParser.SoslLiteral);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_creator;
    return this;
}

CreatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreatorContext.prototype.constructor = CreatorContext;

CreatorContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

CreatorContext.prototype.createdName = function() {
    return this.getTypedRuleContext(CreatedNameContext,0);
};

CreatorContext.prototype.classCreatorRest = function() {
    return this.getTypedRuleContext(ClassCreatorRestContext,0);
};

CreatorContext.prototype.arrayCreatorRest = function() {
    return this.getTypedRuleContext(ArrayCreatorRestContext,0);
};

CreatorContext.prototype.mapCreatorRest = function() {
    return this.getTypedRuleContext(MapCreatorRestContext,0);
};

CreatorContext.prototype.setCreatorRest = function() {
    return this.getTypedRuleContext(SetCreatorRestContext,0);
};

CreatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterCreator(this);
	}
};

CreatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitCreator(this);
	}
};




ApexcodeParser.CreatorContext = CreatorContext;

ApexcodeParser.prototype.creator = function() {

    var localctx = new CreatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, ApexcodeParser.RULE_creator);
    try {
        this.state = 1301;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.LT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1290;
            this.nonWildcardTypeArguments();
            this.state = 1291;
            this.createdName();
            this.state = 1292;
            this.classCreatorRest();
            break;
        case ApexcodeParser.T__25:
        case ApexcodeParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1294;
            this.createdName();
            this.state = 1299;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1295;
                this.arrayCreatorRest();
                break;

            case 2:
                this.state = 1296;
                this.classCreatorRest();
                break;

            case 3:
                this.state = 1297;
                this.mapCreatorRest();
                break;

            case 4:
                this.state = 1298;
                this.setCreatorRest();
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreatedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_createdName;
    return this;
}

CreatedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreatedNameContext.prototype.constructor = CreatedNameContext;

CreatedNameContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ApexcodeParser.Identifier);
    } else {
        return this.getToken(ApexcodeParser.Identifier, i);
    }
};


CreatedNameContext.prototype.typeArgumentsOrDiamond = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeArgumentsOrDiamondContext);
    } else {
        return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,i);
    }
};

CreatedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterCreatedName(this);
	}
};

CreatedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitCreatedName(this);
	}
};




ApexcodeParser.CreatedNameContext = CreatedNameContext;

ApexcodeParser.prototype.createdName = function() {

    var localctx = new CreatedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, ApexcodeParser.RULE_createdName);
    var _la = 0; // Token type
    try {
        this.state = 1319;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 1303;
            this.match(ApexcodeParser.Identifier);
            this.state = 1305;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ApexcodeParser.LT) {
                this.state = 1304;
                this.typeArgumentsOrDiamond();
            }

            this.state = 1314;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ApexcodeParser.DOT) {
                this.state = 1307;
                this.match(ApexcodeParser.DOT);
                this.state = 1308;
                this.match(ApexcodeParser.Identifier);
                this.state = 1310;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ApexcodeParser.LT) {
                    this.state = 1309;
                    this.typeArgumentsOrDiamond();
                }

                this.state = 1316;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case ApexcodeParser.T__25:
            this.enterOuterAlt(localctx, 2);
            this.state = 1317;
            this.match(ApexcodeParser.T__25);
            this.state = 1318;
            this.typeArgumentsOrDiamond();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InnerCreatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_innerCreator;
    return this;
}

InnerCreatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InnerCreatorContext.prototype.constructor = InnerCreatorContext;

InnerCreatorContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

InnerCreatorContext.prototype.classCreatorRest = function() {
    return this.getTypedRuleContext(ClassCreatorRestContext,0);
};

InnerCreatorContext.prototype.nonWildcardTypeArgumentsOrDiamond = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsOrDiamondContext,0);
};

InnerCreatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterInnerCreator(this);
	}
};

InnerCreatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitInnerCreator(this);
	}
};




ApexcodeParser.InnerCreatorContext = InnerCreatorContext;

ApexcodeParser.prototype.innerCreator = function() {

    var localctx = new InnerCreatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, ApexcodeParser.RULE_innerCreator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1321;
        this.match(ApexcodeParser.Identifier);
        this.state = 1323;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ApexcodeParser.LT) {
            this.state = 1322;
            this.nonWildcardTypeArgumentsOrDiamond();
        }

        this.state = 1325;
        this.classCreatorRest();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_arrayCreatorRest;
    return this;
}

ArrayCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayCreatorRestContext.prototype.constructor = ArrayCreatorRestContext;

ArrayCreatorRestContext.prototype.arrayInitializer = function() {
    return this.getTypedRuleContext(ArrayInitializerContext,0);
};

ArrayCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArrayCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterArrayCreatorRest(this);
	}
};

ArrayCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitArrayCreatorRest(this);
	}
};




ApexcodeParser.ArrayCreatorRestContext = ArrayCreatorRestContext;

ApexcodeParser.prototype.arrayCreatorRest = function() {

    var localctx = new ArrayCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, ApexcodeParser.RULE_arrayCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1327;
        this.match(ApexcodeParser.LBRACK);
        this.state = 1355;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.RBRACK:
            this.state = 1328;
            this.match(ApexcodeParser.RBRACK);
            this.state = 1333;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ApexcodeParser.LBRACK) {
                this.state = 1329;
                this.match(ApexcodeParser.LBRACK);
                this.state = 1330;
                this.match(ApexcodeParser.RBRACK);
                this.state = 1335;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1336;
            this.arrayInitializer();
            break;
        case ApexcodeParser.T__23:
        case ApexcodeParser.T__25:
        case ApexcodeParser.T__26:
        case ApexcodeParser.T__27:
        case ApexcodeParser.T__44:
        case ApexcodeParser.SoqlLiteral:
        case ApexcodeParser.SoslLiteral:
        case ApexcodeParser.TRIGGER:
        case ApexcodeParser.IntegerLiteral:
        case ApexcodeParser.FloatingPointLiteral:
        case ApexcodeParser.BooleanLiteral:
        case ApexcodeParser.CharacterLiteral:
        case ApexcodeParser.StringLiteral:
        case ApexcodeParser.NullLiteral:
        case ApexcodeParser.LPAREN:
        case ApexcodeParser.LT:
        case ApexcodeParser.BANG:
        case ApexcodeParser.TILDE:
        case ApexcodeParser.INC:
        case ApexcodeParser.DEC:
        case ApexcodeParser.ADD:
        case ApexcodeParser.SUB:
        case ApexcodeParser.Identifier:
            this.state = 1337;
            this.expression(0);
            this.state = 1338;
            this.match(ApexcodeParser.RBRACK);
            this.state = 1345;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,153,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1339;
                    this.match(ApexcodeParser.LBRACK);
                    this.state = 1340;
                    this.expression(0);
                    this.state = 1341;
                    this.match(ApexcodeParser.RBRACK); 
                }
                this.state = 1347;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,153,this._ctx);
            }

            this.state = 1352;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,154,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 1348;
                    this.match(ApexcodeParser.LBRACK);
                    this.state = 1349;
                    this.match(ApexcodeParser.RBRACK); 
                }
                this.state = 1354;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,154,this._ctx);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_mapCreatorRest;
    return this;
}

MapCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapCreatorRestContext.prototype.constructor = MapCreatorRestContext;

MapCreatorRestContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

MapCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

MapCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterMapCreatorRest(this);
	}
};

MapCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitMapCreatorRest(this);
	}
};




ApexcodeParser.MapCreatorRestContext = MapCreatorRestContext;

ApexcodeParser.prototype.mapCreatorRest = function() {

    var localctx = new MapCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, ApexcodeParser.RULE_mapCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1357;
        this.match(ApexcodeParser.LBRACE);
        this.state = 1382;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ApexcodeParser.T__23 - 24)) | (1 << (ApexcodeParser.T__25 - 24)) | (1 << (ApexcodeParser.T__26 - 24)) | (1 << (ApexcodeParser.T__27 - 24)) | (1 << (ApexcodeParser.T__44 - 24)) | (1 << (ApexcodeParser.SoqlLiteral - 24)) | (1 << (ApexcodeParser.SoslLiteral - 24)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexcodeParser.TRIGGER - 64)) | (1 << (ApexcodeParser.IntegerLiteral - 64)) | (1 << (ApexcodeParser.FloatingPointLiteral - 64)) | (1 << (ApexcodeParser.BooleanLiteral - 64)) | (1 << (ApexcodeParser.CharacterLiteral - 64)) | (1 << (ApexcodeParser.StringLiteral - 64)) | (1 << (ApexcodeParser.NullLiteral - 64)) | (1 << (ApexcodeParser.LPAREN - 64)) | (1 << (ApexcodeParser.LT - 64)) | (1 << (ApexcodeParser.BANG - 64)) | (1 << (ApexcodeParser.TILDE - 64)) | (1 << (ApexcodeParser.INC - 64)) | (1 << (ApexcodeParser.DEC - 64)) | (1 << (ApexcodeParser.ADD - 64)))) !== 0) || _la===ApexcodeParser.SUB || _la===ApexcodeParser.Identifier) {
            this.state = 1360;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1358;
                this.literal();
                break;

            case 2:
                this.state = 1359;
                this.expression(0);
                break;

            }
            this.state = 1362;
            this.match(ApexcodeParser.T__48);
            this.state = 1365;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1363;
                this.literal();
                break;

            case 2:
                this.state = 1364;
                this.expression(0);
                break;

            }
            this.state = 1379;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ApexcodeParser.COMMA) {
                this.state = 1367;
                this.match(ApexcodeParser.COMMA);
                this.state = 1370;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1368;
                    this.literal();
                    break;

                case 2:
                    this.state = 1369;
                    this.expression(0);
                    break;

                }
                this.state = 1372;
                this.match(ApexcodeParser.T__48);
                this.state = 1375;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1373;
                    this.literal();
                    break;

                case 2:
                    this.state = 1374;
                    this.expression(0);
                    break;

                }
                this.state = 1381;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1384;
        this.match(ApexcodeParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SetCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_setCreatorRest;
    return this;
}

SetCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetCreatorRestContext.prototype.constructor = SetCreatorRestContext;

SetCreatorRestContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

SetCreatorRestContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SetCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterSetCreatorRest(this);
	}
};

SetCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitSetCreatorRest(this);
	}
};




ApexcodeParser.SetCreatorRestContext = SetCreatorRestContext;

ApexcodeParser.prototype.setCreatorRest = function() {

    var localctx = new SetCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, ApexcodeParser.RULE_setCreatorRest);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1386;
        this.match(ApexcodeParser.LBRACE);
        this.state = 1389;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1387;
            this.literal();
            break;

        case 2:
            this.state = 1388;
            this.expression(0);
            break;

        }
        this.state = 1398;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ApexcodeParser.COMMA) {
            this.state = 1391;
            this.match(ApexcodeParser.COMMA);
            this.state = 1394;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1392;
                this.literal();
                break;

            case 2:
                this.state = 1393;
                this.expression(0);
                break;

            }
            this.state = 1400;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1401;
        this.match(ApexcodeParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassCreatorRestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_classCreatorRest;
    return this;
}

ClassCreatorRestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassCreatorRestContext.prototype.constructor = ClassCreatorRestContext;

ClassCreatorRestContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ClassCreatorRestContext.prototype.classBody = function() {
    return this.getTypedRuleContext(ClassBodyContext,0);
};

ClassCreatorRestContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterClassCreatorRest(this);
	}
};

ClassCreatorRestContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitClassCreatorRest(this);
	}
};




ApexcodeParser.ClassCreatorRestContext = ClassCreatorRestContext;

ApexcodeParser.prototype.classCreatorRest = function() {

    var localctx = new ClassCreatorRestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, ApexcodeParser.RULE_classCreatorRest);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1403;
        this.arguments();
        this.state = 1405;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
        if(la_===1) {
            this.state = 1404;
            this.classBody();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitGenericInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_explicitGenericInvocation;
    return this;
}

ExplicitGenericInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitGenericInvocationContext.prototype.constructor = ExplicitGenericInvocationContext;

ExplicitGenericInvocationContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

ExplicitGenericInvocationContext.prototype.explicitGenericInvocationSuffix = function() {
    return this.getTypedRuleContext(ExplicitGenericInvocationSuffixContext,0);
};

ExplicitGenericInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterExplicitGenericInvocation(this);
	}
};

ExplicitGenericInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitExplicitGenericInvocation(this);
	}
};




ApexcodeParser.ExplicitGenericInvocationContext = ExplicitGenericInvocationContext;

ApexcodeParser.prototype.explicitGenericInvocation = function() {

    var localctx = new ExplicitGenericInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, ApexcodeParser.RULE_explicitGenericInvocation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1407;
        this.nonWildcardTypeArguments();
        this.state = 1408;
        this.explicitGenericInvocationSuffix();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonWildcardTypeArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_nonWildcardTypeArguments;
    return this;
}

NonWildcardTypeArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonWildcardTypeArgumentsContext.prototype.constructor = NonWildcardTypeArgumentsContext;

NonWildcardTypeArgumentsContext.prototype.typeList = function() {
    return this.getTypedRuleContext(TypeListContext,0);
};

NonWildcardTypeArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterNonWildcardTypeArguments(this);
	}
};

NonWildcardTypeArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitNonWildcardTypeArguments(this);
	}
};




ApexcodeParser.NonWildcardTypeArgumentsContext = NonWildcardTypeArgumentsContext;

ApexcodeParser.prototype.nonWildcardTypeArguments = function() {

    var localctx = new NonWildcardTypeArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, ApexcodeParser.RULE_nonWildcardTypeArguments);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1410;
        this.match(ApexcodeParser.LT);
        this.state = 1411;
        this.typeList();
        this.state = 1412;
        this.match(ApexcodeParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArgumentsOrDiamondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_typeArgumentsOrDiamond;
    return this;
}

TypeArgumentsOrDiamondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArgumentsOrDiamondContext.prototype.constructor = TypeArgumentsOrDiamondContext;

TypeArgumentsOrDiamondContext.prototype.typeArguments = function() {
    return this.getTypedRuleContext(TypeArgumentsContext,0);
};

TypeArgumentsOrDiamondContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterTypeArgumentsOrDiamond(this);
	}
};

TypeArgumentsOrDiamondContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitTypeArgumentsOrDiamond(this);
	}
};




ApexcodeParser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext;

ApexcodeParser.prototype.typeArgumentsOrDiamond = function() {

    var localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, ApexcodeParser.RULE_typeArgumentsOrDiamond);
    try {
        this.state = 1417;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1414;
            this.match(ApexcodeParser.LT);
            this.state = 1415;
            this.match(ApexcodeParser.GT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1416;
            this.typeArguments();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonWildcardTypeArgumentsOrDiamondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_nonWildcardTypeArgumentsOrDiamond;
    return this;
}

NonWildcardTypeArgumentsOrDiamondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonWildcardTypeArgumentsOrDiamondContext.prototype.constructor = NonWildcardTypeArgumentsOrDiamondContext;

NonWildcardTypeArgumentsOrDiamondContext.prototype.nonWildcardTypeArguments = function() {
    return this.getTypedRuleContext(NonWildcardTypeArgumentsContext,0);
};

NonWildcardTypeArgumentsOrDiamondContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterNonWildcardTypeArgumentsOrDiamond(this);
	}
};

NonWildcardTypeArgumentsOrDiamondContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitNonWildcardTypeArgumentsOrDiamond(this);
	}
};




ApexcodeParser.NonWildcardTypeArgumentsOrDiamondContext = NonWildcardTypeArgumentsOrDiamondContext;

ApexcodeParser.prototype.nonWildcardTypeArgumentsOrDiamond = function() {

    var localctx = new NonWildcardTypeArgumentsOrDiamondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, ApexcodeParser.RULE_nonWildcardTypeArgumentsOrDiamond);
    try {
        this.state = 1422;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1419;
            this.match(ApexcodeParser.LT);
            this.state = 1420;
            this.match(ApexcodeParser.GT);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1421;
            this.nonWildcardTypeArguments();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SuperSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_superSuffix;
    return this;
}

SuperSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuperSuffixContext.prototype.constructor = SuperSuffixContext;

SuperSuffixContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

SuperSuffixContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

SuperSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterSuperSuffix(this);
	}
};

SuperSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitSuperSuffix(this);
	}
};




ApexcodeParser.SuperSuffixContext = SuperSuffixContext;

ApexcodeParser.prototype.superSuffix = function() {

    var localctx = new SuperSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, ApexcodeParser.RULE_superSuffix);
    try {
        this.state = 1430;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.LPAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1424;
            this.arguments();
            break;
        case ApexcodeParser.DOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1425;
            this.match(ApexcodeParser.DOT);
            this.state = 1426;
            this.match(ApexcodeParser.Identifier);
            this.state = 1428;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
            if(la_===1) {
                this.state = 1427;
                this.arguments();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExplicitGenericInvocationSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_explicitGenericInvocationSuffix;
    return this;
}

ExplicitGenericInvocationSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplicitGenericInvocationSuffixContext.prototype.constructor = ExplicitGenericInvocationSuffixContext;

ExplicitGenericInvocationSuffixContext.prototype.superSuffix = function() {
    return this.getTypedRuleContext(SuperSuffixContext,0);
};

ExplicitGenericInvocationSuffixContext.prototype.Identifier = function() {
    return this.getToken(ApexcodeParser.Identifier, 0);
};

ExplicitGenericInvocationSuffixContext.prototype.arguments = function() {
    return this.getTypedRuleContext(ArgumentsContext,0);
};

ExplicitGenericInvocationSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterExplicitGenericInvocationSuffix(this);
	}
};

ExplicitGenericInvocationSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitExplicitGenericInvocationSuffix(this);
	}
};




ApexcodeParser.ExplicitGenericInvocationSuffixContext = ExplicitGenericInvocationSuffixContext;

ApexcodeParser.prototype.explicitGenericInvocationSuffix = function() {

    var localctx = new ExplicitGenericInvocationSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, ApexcodeParser.RULE_explicitGenericInvocationSuffix);
    try {
        this.state = 1436;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ApexcodeParser.T__26:
            this.enterOuterAlt(localctx, 1);
            this.state = 1432;
            this.match(ApexcodeParser.T__26);
            this.state = 1433;
            this.superSuffix();
            break;
        case ApexcodeParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 1434;
            this.match(ApexcodeParser.Identifier);
            this.state = 1435;
            this.arguments();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ApexcodeParser.RULE_arguments;
    return this;
}

ArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentsContext.prototype.constructor = ArgumentsContext;

ArgumentsContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.enterArguments(this);
	}
};

ArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ApexcodeListener ) {
        listener.exitArguments(this);
	}
};




ApexcodeParser.ArgumentsContext = ArgumentsContext;

ApexcodeParser.prototype.arguments = function() {

    var localctx = new ArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, ApexcodeParser.RULE_arguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1438;
        this.match(ApexcodeParser.LPAREN);
        this.state = 1440;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (ApexcodeParser.T__23 - 24)) | (1 << (ApexcodeParser.T__25 - 24)) | (1 << (ApexcodeParser.T__26 - 24)) | (1 << (ApexcodeParser.T__27 - 24)) | (1 << (ApexcodeParser.T__44 - 24)) | (1 << (ApexcodeParser.SoqlLiteral - 24)) | (1 << (ApexcodeParser.SoslLiteral - 24)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ApexcodeParser.TRIGGER - 64)) | (1 << (ApexcodeParser.IntegerLiteral - 64)) | (1 << (ApexcodeParser.FloatingPointLiteral - 64)) | (1 << (ApexcodeParser.BooleanLiteral - 64)) | (1 << (ApexcodeParser.CharacterLiteral - 64)) | (1 << (ApexcodeParser.StringLiteral - 64)) | (1 << (ApexcodeParser.NullLiteral - 64)) | (1 << (ApexcodeParser.LPAREN - 64)) | (1 << (ApexcodeParser.LT - 64)) | (1 << (ApexcodeParser.BANG - 64)) | (1 << (ApexcodeParser.TILDE - 64)) | (1 << (ApexcodeParser.INC - 64)) | (1 << (ApexcodeParser.DEC - 64)) | (1 << (ApexcodeParser.ADD - 64)))) !== 0) || _la===ApexcodeParser.SUB || _la===ApexcodeParser.Identifier) {
            this.state = 1439;
            this.expressionList();
        }

        this.state = 1442;
        this.match(ApexcodeParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ApexcodeParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 99:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ApexcodeParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 13);
		case 1:
			return this.precpred(this._ctx, 12);
		case 2:
			return this.precpred(this._ctx, 11);
		case 3:
			return this.precpred(this._ctx, 10);
		case 4:
			return this.precpred(this._ctx, 8);
		case 5:
			return this.precpred(this._ctx, 7);
		case 6:
			return this.precpred(this._ctx, 6);
		case 7:
			return this.precpred(this._ctx, 5);
		case 8:
			return this.precpred(this._ctx, 4);
		case 9:
			return this.precpred(this._ctx, 3);
		case 10:
			return this.precpred(this._ctx, 2);
		case 11:
			return this.precpred(this._ctx, 1);
		case 12:
			return this.precpred(this._ctx, 27);
		case 13:
			return this.precpred(this._ctx, 26);
		case 14:
			return this.precpred(this._ctx, 25);
		case 15:
			return this.precpred(this._ctx, 24);
		case 16:
			return this.precpred(this._ctx, 23);
		case 17:
			return this.precpred(this._ctx, 22);
		case 18:
			return this.precpred(this._ctx, 21);
		case 19:
			return this.precpred(this._ctx, 20);
		case 20:
			return this.precpred(this._ctx, 19);
		case 21:
			return this.precpred(this._ctx, 16);
		case 22:
			return this.precpred(this._ctx, 9);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ApexcodeParser = ApexcodeParser;
